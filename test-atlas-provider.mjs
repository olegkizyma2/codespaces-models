#!/usr/bin/env node

import 'dotenv/config';

const serverUrl = 'http://localhost:4000';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—É–∑–∏
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// –ú–æ–¥–µ–ª—ñ Atlas –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –Ω–∞–∑–≤–∏ GitHub Models API)
const modelsToTest = [
  'atlas-gpt-4o-mini',
  'atlas-llama-3.3-70b-instruct',
  'atlas-phi-4'
];

async function testModel(modelName) {
  console.log(`\nüß™ –¢–µ—Å—Ç—É—é –º–æ–¥–µ–ª—å: ${modelName}`);
  
  try {
    const startTime = Date.now();
    const response = await fetch(`${serverUrl}/v1/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: modelName,
        messages: [{ role: 'user', content: '–ü—Ä–∏–≤—ñ—Ç! –°–∫–∞–∂–∏ —â–æ—Å—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.' }],
        max_tokens: 50
      })
    });
    
    const duration = Date.now() - startTime;
    
    if (!response.ok) {
      const error = await response.text();
      console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${response.status}`);
      console.log(error.substring(0, 200));
      return { success: false, model: modelName, status: response.status };
    }
    
    const data = await response.json();
    console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ! (${duration}ms)`);
    console.log(`üìù –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${data.choices[0].message.content}`);
    console.log(`üìä –¢–æ–∫–µ–Ω–∏: ${data.usage.total_tokens} (prompt: ${data.usage.prompt_tokens}, completion: ${data.usage.completion_tokens})`);
    return { success: true, model: modelName, duration, data };
    
  } catch (error) {
    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    return { success: false, model: modelName, error: error.message };
  }
}

async function testAllModels() {
  console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Atlas –º–æ–¥–µ–ª–µ–π');
  console.log(`üìã –¢–µ—Å—Ç—É–≤–∞—Ç–∏–º—É ${modelsToTest.length} –º–æ–¥–µ–ª–µ–π\n`);
  
  const results = [];
  
  for (let i = 0; i < modelsToTest.length; i++) {
    const result = await testModel(modelsToTest[i]);
    results.push(result);
    
    // –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ (–æ–∫—Ä—ñ–º –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ)
    if (i < modelsToTest.length - 1) {
      console.log('\n‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥–∏...');
      await sleep(2000);
    }
  }
  
  // –ü—ñ–¥—Å—É–º–æ–∫
  console.log('\n' + '='.repeat(60));
  console.log('üìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø ATLAS');
  console.log('='.repeat(60));
  
  const successful = results.filter(r => r.success).length;
  const failed = results.filter(r => !r.success).length;
  
  console.log(`\n‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö: ${successful}`);
  console.log(`‚ùå –ü–æ–º–∏–ª–æ–∫: ${failed}`);
  
  if (successful > 0) {
    console.log('\nüéâ –†–æ–±–æ—á—ñ –º–æ–¥–µ–ª—ñ:');
    results.filter(r => r.success).forEach(r => {
      console.log(`  ‚Ä¢ ${r.model} (${r.duration}ms)`);
    });
  }
  
  if (failed > 0) {
    console.log('\n‚ö†Ô∏è  –ú–æ–¥–µ–ª—ñ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏:');
    results.filter(r => !r.success).forEach(r => {
      console.log(`  ‚Ä¢ ${r.model} (${r.status ? `HTTP ${r.status}` : r.error})`);
    });
  }
  
  // –Ø–∫—â–æ –≤—Å—ñ –º–æ–¥–µ–ª—ñ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å, –≤–∏–≤–æ–¥–∏–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
  if (failed === modelsToTest.length) {
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:');
    console.log('  1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ ATLAS_ENABLED=1 –≤ .env —Ñ–∞–π–ª—ñ');
    console.log('  2. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ GITHUB_TOKEN –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —ñ –≤–∞–ª—ñ–¥–Ω–∏–π');
    console.log('  3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ .env');
    console.log('  4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ —Ç–æ–∫–µ–Ω –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ GitHub Models API');
  }
}

testAllModels();
