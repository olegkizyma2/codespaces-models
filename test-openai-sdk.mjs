#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è OpenAI SDK –∑ –≤–∞—à–∏–º API
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node test-openai-sdk.mjs
 */

import OpenAI from 'openai';
import readline from 'readline';

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ OpenAI –¥–ª—è –≤–∞—à–æ–≥–æ API
const client = new OpenAI({
    apiKey: 'dummy-key',
    baseURL: 'https://8a42c760f69d.ngrok-free.app/v1'
});

// –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
const MODELS = [
    'microsoft/phi-3-mini-4k-instruct',
    'microsoft/phi-3.5-mini-instruct',
    'openai/gpt-4o-mini',
    'meta/llama-3.3-70b-instruct',
    'mistral-ai/mistral-small-2503'
];

async function testModels() {
    console.log('üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ OpenAI SDK\n');
    
    try {
        // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π
        console.log('üìã –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π...');
        const modelsList = await client.models.list();
        console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${modelsList.data.length} –º–æ–¥–µ–ª–µ–π\n`);
        
        // –¢–µ—Å—Ç—É—î–º–æ –∫—ñ–ª—å–∫–∞ –º–æ–¥–µ–ª–µ–π
        const testPrompt = '–ü—Ä–∏–≤—ñ—Ç! –ö–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.';
        
        for (const model of MODELS.slice(0, 3)) { // –¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä—à—ñ 3 –º–æ–¥–µ–ª—ñ
            console.log(`ü§ñ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ: ${model}`);
            
            try {
                const startTime = Date.now();
                
                const response = await client.chat.completions.create({
                    model: model,
                    messages: [
                        { role: 'system', content: '–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.' },
                        { role: 'user', content: testPrompt }
                    ],
                    temperature: 0.7,
                    max_tokens: 200
                });
                
                const duration = Date.now() - startTime;
                
                console.log(`‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å (${duration}ms):`);
                console.log(`   "${response.choices[0].message.content.substring(0, 100)}..."`);
                console.log(`üìä –¢–æ–∫–µ–Ω–∏: ${response.usage.total_tokens} (prompt: ${response.usage.prompt_tokens}, completion: ${response.usage.completion_tokens})\n`);
                
            } catch (error) {
                const status = error?.status || error?.response?.status;
                // –°–ø—Ä–æ–±–∞ –¥—ñ—Å—Ç–∞—Ç–∏ —Ç—ñ–ª–æ –ø–æ–º–∏–ª–∫–∏
                let detail = '';
                if (error?.response?.data) {
                    try { detail = JSON.stringify(error.response.data).slice(0, 500); } catch (_) {}
                } else if (error?.message) {
                    detail = error.message;
                }
                console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞${status ? ` (${status})` : ''}: ${detail}\n`);
            }
        }
        
    } catch (error) {
        const status = error?.status || error?.response?.status;
        let detail = error?.message || '';
        if (error?.response?.data) {
            try { detail = JSON.stringify(error.response.data).slice(0, 500); } catch (_) {}
        }
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è${status ? ` (${status})` : ''}: ${detail}`);
    }
}

async function interactiveChat() {
    console.log('\nüí¨ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç (–≤–≤–µ–¥—ñ—Ç—å "exit" –¥–ª—è –≤–∏—Ö–æ–¥—É)\n');
    
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    
    const messages = [
        { role: 'system', content: '–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.' }
    ];
    
    const model = 'microsoft/phi-3-mini-4k-instruct'; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–±—ñ–ª—å–Ω—É –º–æ–¥–µ–ª—å
    
    const askQuestion = () => {
        rl.question('üë§ –í–∏: ', async (input) => {
            if (input.toLowerCase() === 'exit') {
                rl.close();
                return;
            }
            
            if (input.trim()) {
                messages.push({ role: 'user', content: input });
                
                try {
                    console.log('ü§ñ –î—É–º–∞—é...');
                    
                    const response = await client.chat.completions.create({
                        model: model,
                        messages: messages,
                        temperature: 0.7,
                        max_tokens: 500
                    });
                    
                    const assistantMessage = response.choices[0].message.content;
                    messages.push({ role: 'assistant', content: assistantMessage });
                    
                    console.log(`ü§ñ AI: ${assistantMessage}\n`);
                    
                } catch (error) {
                    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}\n`);
                }
            }
            
            askQuestion();
        });
    };
    
    askQuestion();
}

async function testStreaming() {
    console.log('\nüåä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É...\n');
    
    try {
        const stream = await client.chat.completions.create({
            model: 'microsoft/phi-3-mini-4k-instruct',
            messages: [
                { role: 'system', content: '–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.' },
                { role: 'user', content: '–†–æ–∑–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫—É —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ —Ä–æ–±–æ—Ç—ñ–≤ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ.' }
            ],
            stream: true,
            temperature: 0.7,
            max_tokens: 300
        });
        
        console.log('ü§ñ AI (streaming): ');
        process.stdout.write('   ');
        
        for await (const chunk of stream) {
            const content = chunk.choices[0]?.delta?.content;
            if (content) {
                process.stdout.write(content);
            }
        }
        
        console.log('\n‚úÖ –°—Ç—Ä—ñ–º—ñ–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n');
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É:', error.message);
    }
}

async function testTTS() {
    console.log('üîä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è TTS API...\n');
    
    try {
        const ttsUrl = 'https://8a42c760f69d.ngrok-free.app/tts?text=–ü—Ä–∏–≤—ñ—Ç%20–≤—ñ–¥%20–≤–∞—à–æ–≥–æ%20AI%20–∞—Å–∏—Å—Ç–µ–Ω—Ç–∞!';
        console.log(`üåê TTS URL: ${ttsUrl}`);
        console.log('üí° –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –±—Ä–∞—É–∑–µ—Ä—ñ, —â–æ–± –ø—Ä–æ—Å–ª—É—Ö–∞—Ç–∏ –∞—É–¥—ñ–æ\n');
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ TTS:', error.message);
    }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
    const args = process.argv.slice(2);
    
    if (args.includes('--chat') || args.includes('-c')) {
        await interactiveChat();
    } else if (args.includes('--stream') || args.includes('-s')) {
        await testStreaming();
    } else if (args.includes('--tts') || args.includes('-t')) {
        await testTTS();
    } else {
        // –ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        await testModels();
        
        if (args.includes('--full') || args.includes('-f')) {
            await testStreaming();
            await testTTS();
            await interactiveChat();
        } else {
            console.log('üí° –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó:');
            console.log('   --chat, -c     : –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç');
            console.log('   --stream, -s   : –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É');
            console.log('   --tts, -t      : –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è TTS');
            console.log('   --full, -f     : –ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç —É—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π\n');
        }
    }
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);
