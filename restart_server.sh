#!/usr/bin/env bash
set -Eeuo pipefail

# restart_server.sh ‚Äî –º–æ–¥–µ—Ä–Ω—ñ–∑–æ–≤–∞–Ω–∏–π –±–µ–∑–ø–µ—á–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ OpenAI proxy —Å–µ—Ä–≤–µ—Ä–∞
# 
# –ù–û–í–ò–ù–ö–ò v2.0:
# - –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –∫—ñ–ª—å–∫–æ—Ö –ø–æ—Ä—Ç—ñ–≤ (3010 –¥–ª—è API, 4000 –¥–ª—è Web UI)
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ GPT-5 temperature fix
# - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤ (modern.html, index.html, monitor.html)
# - –°—Ç–∞—Ç—É—Å token rotator —Ç–∞ –º–æ–¥–µ–ª–µ–π
# - Backup –ª–æ–≥—ñ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
# - –ö–æ–ª—å–æ—Ä–æ–≤—ñ —Å—Ç–∞—Ç—É—Å–∏ –∑ emoji
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ zombie –ø—Ä–æ—Ü–µ—Å—ñ–≤
#
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
#   ./restart_server.sh               # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É 4000 (Web UI)
#   ./restart_server.sh -p 3010       # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É 3010 (API only)
#   ./restart_server.sh -a            # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –ø–æ—Ä—Ç—ñ–≤ (3010 + 4000)
#   ./restart_server.sh -d            # debug —Ä–µ–∂–∏–º –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ –ª–æ–≥–∞–º–∏
#   ./restart_server.sh -b            # —Å—Ç–≤–æ—Ä–∏—Ç–∏ backup –ª–æ–≥—ñ–≤
#   ./restart_server.sh -c            # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
#
# –í–∏–º–æ–≥–∏: lsof, curl, node

PORT="${PORT:-4000}"   # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º Web UI –ø–æ—Ä—Ç
API_PORT=3010          # API –ø–æ—Ä—Ç
LOG_FILE="logs/server.log"
LOG_DIR="logs"
PID_FILE="server.pid"
BACKUP_DIR="logs/backup"
HEALTH_PATH="/health"
SIMPLE_CHAT_PATH="/simple.html"
MODERN_CHAT_PATH="/modern.html"
INDEX_PATH="/index.html"
MONITOR_PATH="/monitor.html"
MODELS_PATH="/v1/models"
MAX_WAIT_KILL=5        # —Å–µ–∫
MAX_WAIT_HEALTH=30     # —á–∏—Å–ª–æ —Å–ø—Ä–æ–±
HEALTH_DELAY=0.5       # —Å–µ–∫ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏
DEBUG_MODE=false       # –¥–µ—Ç–∞–ª—å–Ω—ñ –ª–æ–≥–∏
CHECK_ONLY=false       # —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
BACKUP_LOGS=false      # backup –ª–æ–≥—ñ–≤
ALL_PORTS=false        # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –ø–æ—Ä—Ç—ñ–≤

usage() {
  cat << 'EOF' >&2
üöÄ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: restart_server.sh [OPTIONS]

–û–ü–¶–Ü–á:
  -p PORT   –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≤–∫–∞–∑–∞–Ω–∏–π –ø–æ—Ä—Ç (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 4000)
  -a        –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ –ø–æ—Ä—Ç–∏ (3010 API + 4000 Web UI)
  -d        –£–≤—ñ–º–∫–Ω—É—Ç–∏ debug —Ä–µ–∂–∏–º –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ –ª–æ–≥–∞–º–∏
  -b        –°—Ç–≤–æ—Ä–∏—Ç–∏ backup –ª–æ–≥—ñ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
  -c        –¢—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å (–±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É)
  -h        –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É

–ü–†–ò–ö–õ–ê–î–ò:
  ./restart_server.sh           # Web UI –Ω–∞ –ø–æ—Ä—Ç—É 4000
  ./restart_server.sh -p 3010   # API –Ω–∞ –ø–æ—Ä—Ç—É 3010
  ./restart_server.sh -a        # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏
  ./restart_server.sh -c        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
  ./restart_server.sh -b -d     # Backup + Debug —Ä–µ–∂–∏–º

–ü–ï–†–ï–í–Ü–†–ö–ò:
  ‚úÖ Health endpoint (/health)
  ‚úÖ Web —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ (modern.html, index.html, monitor.html)
  ‚úÖ API endpoints (/v1/models, /v1/chat/completions)
  ‚úÖ Token Rotator —Å—Ç–∞—Ç—É—Å
  ‚úÖ Temperature fix (o1, o3, gpt-5 models)
  ‚úÖ –í—Å—ñ 58+ –º–æ–¥–µ–ª–µ–π

–õ–û–ì–ò:
  üìã Server: logs/server.log
  üíæ Backup: logs/backup/server_YYYYMMDD_HHMMSS.log
  üÜî PID: server.pid
EOF
}

# –ö–æ–ª—å–æ—Ä–æ–≤—ñ –≤–∏–≤–æ–¥–∏
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_success() { echo -e "${GREEN}‚úÖ $*${NC}"; }
print_error() { echo -e "${RED}‚ùå $*${NC}" >&2; }
print_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $*${NC}"; }
print_info() { echo -e "${CYAN}‚ÑπÔ∏è  $*${NC}"; }
print_debug() { [[ "$DEBUG_MODE" == "true" ]] && echo -e "${PURPLE}üêõ [DEBUG] $*${NC}" >&2 || true; }
print_header() { echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}\n${CYAN}$*${NC}\n${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"; }

while getopts ":p:abdch" opt; do
  case "$opt" in
    p) PORT="$OPTARG" ;;
    a) ALL_PORTS=true ;;
    b) BACKUP_LOGS=true ;;
    d) DEBUG_MODE=true ;;
    c) CHECK_ONLY=true ;;
    h) usage; exit 0 ;;
    :) print_error "Option -$OPTARG requires an argument"; usage; exit 2 ;;
    \?) print_error "Unknown option: -$OPTARG"; usage; exit 2 ;;
  esac
done

require_cmd() {
  command -v "$1" >/dev/null 2>&1 || {
    print_error "–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '$1' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
    echo "–°–ø—Ä–æ–±—É–π—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ó—ó:" >&2
    case "$1" in
      lsof) echo "  brew install lsof  # –Ω–∞ macOS" >&2 ;;
      curl) echo "  brew install curl  # –Ω–∞ macOS" >&2 ;;
      node) echo "  brew install node  # –Ω–∞ macOS –∞–±–æ https://nodejs.org" >&2 ;;
      jq) echo "  brew install jq    # –Ω–∞ macOS (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)" >&2 ;;
    esac
    exit 127
  }
}

require_cmd lsof
require_cmd curl
require_cmd node

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ jq (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è JSON parsing)
HAS_JQ=false
command -v jq >/dev/null 2>&1 && HAS_JQ=true

debug_log() {
  print_debug "$*"
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
setup_directories() {
  print_debug "–°—Ç–≤–æ—Ä—é—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"
  mkdir -p "$LOG_DIR" "$BACKUP_DIR"
}

# Backup –ª–æ–≥—ñ–≤
backup_logs() {
  if [[ "$BACKUP_LOGS" != "true" ]]; then
    return 0
  fi
  
  if [[ ! -f "$LOG_FILE" ]]; then
    print_info "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, backup –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω"
    return 0
  fi
  
  local timestamp
  timestamp=$(date +%Y%m%d_%H%M%S)
  local backup_file="$BACKUP_DIR/server_${timestamp}.log"
  
  print_info "–°—Ç–≤–æ—Ä—é—é backup –ª–æ–≥—ñ–≤: $backup_file"
  cp "$LOG_FILE" "$backup_file"
  
  # –°—Ç–∏—Å–Ω–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö backup-—ñ–≤ (—Å—Ç–∞—Ä—à—ñ 7 –¥–Ω—ñ–≤)
  find "$BACKUP_DIR" -name "server_*.log" -type f -mtime +7 -exec gzip {} \; 2>/dev/null || true
  
  print_success "Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ"
}

# –û—á–∏—Å—Ç–∫–∞ zombie –ø—Ä–æ—Ü–µ—Å—ñ–≤
cleanup_zombies() {
  print_debug "–û—á–∏—â—É—é zombie –ø—Ä–æ—Ü–µ—Å–∏ node"
  pkill -9 -f "node.*server.js" 2>/dev/null || true
  sleep 1
}

get_listen_pids() {
  # –í–∏–≤–æ–¥–∏—Ç—å PID(–∏), —â–æ —Å–ª—É—Ö–∞—é—Ç—å –≤–∫–∞–∑–∞–Ω–∏–π –ø–æ—Ä—Ç
  local port="$1"
  print_debug "–®—É–∫–∞—é –ø—Ä–æ—Ü–µ—Å–∏ –Ω–∞ –ø–æ—Ä—Ç—É $port"
  lsof -t -nP -iTCP:"$port" -sTCP:LISTEN 2>/dev/null || true
}

kill_pids() {
  local pids=("$@")
  [[ ${#pids[@]} -eq 0 ]] && return 0
  print_info "–ó—É–ø–∏–Ω—è—é –ø—Ä–æ—Ü–µ—Å(–∏): ${pids[*]}"
  kill "${pids[@]}" 2>/dev/null || true

  local waited=0
  while [[ $waited -lt $MAX_WAIT_KILL ]]; do
    sleep 1
    waited=$((waited+1))
    local still_running=false
    for pid in "${pids[@]}"; do
      if ps -p "$pid" >/dev/null 2>&1; then
        still_running=true
        break
      fi
    done
    
    if [[ "$still_running" == "false" ]]; then
      print_debug "–ü—Ä–æ—Ü–µ—Å–∏ –∑—É–ø–∏–Ω–µ–Ω–æ –∑–∞ $waited —Å–µ–∫"
      return 0
    fi
    print_debug "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–∫–∏... ($waited/$MAX_WAIT_KILL)"
  done

  # –ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
  for pid in "${pids[@]}"; do
    if ps -p "$pid" >/dev/null 2>&1; then
      print_warning "–ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É $pid"
      kill -9 "$pid" 2>/dev/null || true
    fi
  done
}

stop_port() {
  local port="$1"
  print_header "üõë –ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É $port"
  
  local pids_str
  pids_str="$(get_listen_pids "$port")"
  
  if [[ -n "$pids_str" ]]; then
    IFS=$' \t\r\n' read -r -a pids <<< "$pids_str"
    kill_pids "${pids[@]}"
    print_success "–°–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É $port –∑—É–ø–∏–Ω–µ–Ω–æ"
  else
    print_info "–ù–µ–º–∞—î –ø—Ä–æ—Ü–µ—Å—ñ–≤ –Ω–∞ –ø–æ—Ä—Ç—É $port"
  fi
}

start_server() {
  local port="$1"
  print_header "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É $port"
  
  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å server.js
  if [[ ! -f "server.js" ]]; then
    print_error "–§–∞–π–ª server.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"
    exit 1
  fi
  
  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏
  local missing_files=()
  [[ ! -f "public/simple.html" ]] && missing_files+=("public/simple.html")
  [[ ! -f "public/modern.html" ]] && missing_files+=("public/modern.html")
  [[ ! -f "public/index.html" ]] && missing_files+=("public/index.html")
  [[ ! -f "public/monitor.html" ]] && missing_files+=("public/monitor.html")
  
  if [[ ${#missing_files[@]} -gt 0 ]]; then
    print_warning "–í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏: ${missing_files[*]}"
  fi
  
  # –û—á–∏—â—É—î–º–æ –ª–æ–≥ –ø—Ä–∏ debug —Ä–µ–∂–∏–º—ñ
  if [[ "$DEBUG_MODE" == "true" ]]; then
    > "$LOG_FILE"
    print_debug "–û—á–∏—Å—Ç–∏–≤ –ª–æ–≥ —Ñ–∞–π–ª $LOG_FILE"
  fi
  
  # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
  print_debug "–ö–æ–º–∞–Ω–¥–∞: PORT=$port node server.js"
  nohup env PORT="$port" node server.js >> "$LOG_FILE" 2>&1 &
  local pid=$!
  echo "$pid" > "$PID_FILE"
  print_success "–ó–∞–ø—É—â–µ–Ω–æ –∑ PID $pid"
  print_info "–õ–æ–≥: $LOG_FILE"
  print_info "PID —Ñ–∞–π–ª: $PID_FILE"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ endpoint
check_endpoint() {
  local url="$1"
  local name="$2"
  
  if curl -fsS --max-time 3 "$url" >/dev/null 2>&1; then
    print_success "$name OK - $url"
    return 0
  else
    print_error "$name FAILED - $url"
    return 1
  fi
}

# –†–æ–∑—à–∏—Ä–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ API
check_models_api() {
  local port="$1"
  local url="http://127.0.0.1:$port$MODELS_PATH"
  
  print_debug "–ü–µ—Ä–µ–≤—ñ—Ä—è—é API –º–æ–¥–µ–ª–µ–π: $url"
  
  if [[ "$HAS_JQ" == "true" ]]; then
    local models_count
    models_count=$(curl -fsS --max-time 5 "$url" 2>/dev/null | jq -r '.data | length' 2>/dev/null || echo "0")
    
    if [[ "$models_count" -gt 0 ]]; then
      print_success "–ú–æ–¥–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ: $models_count"
      return 0
    else
      print_warning "API –º–æ–¥–µ–ª–µ–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î, –∞–ª–µ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π"
      return 1
    fi
  else
    # –ë–µ–∑ jq - –ø—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
    if curl -fsS --max-time 5 "$url" >/dev/null 2>&1; then
      print_success "API –º–æ–¥–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ"
      return 0
    else
      print_error "API –º–æ–¥–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
      return 1
    fi
  fi
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ GPT-5 temperature fix
check_gpt5_fix() {
  print_debug "–ü–µ—Ä–µ–≤—ñ—Ä—è—é temperature fix –¥–ª—è o1/gpt-5 –º–æ–¥–µ–ª–µ–π –≤ server.js"
  
  if grep -q "supportsTemperature" server.js 2>/dev/null; then
    print_success "Temperature fix –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (o1, gpt-5 models)"
    return 0
  else
    print_warning "Temperature fix –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    return 1
  fi
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Token Rotator
check_token_rotator() {
  print_debug "–ü–µ—Ä–µ–≤—ñ—Ä—è—é –ª–æ–≥–∏ Token Rotator"
  
  if grep -q "TOKEN-ROTATOR.*–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ" "$LOG_FILE" 2>/dev/null; then
    local tokens_count
    tokens_count=$(grep "TOKEN-ROTATOR.*–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.*—Ç–æ–∫–µ–Ω" "$LOG_FILE" 2>/dev/null | tail -1 | grep -oE '[0-9]+' | head -1 || echo "0")
    
    if [[ "$tokens_count" -gt 0 ]]; then
      print_success "Token Rotator –∞–∫—Ç–∏–≤–Ω–∏–π ($tokens_count —Ç–æ–∫–µ–Ω—ñ–≤)"
      return 0
    fi
  fi
  
  print_warning "Token Rotator —Å—Ç–∞—Ç—É—Å –Ω–µ–≤—ñ–¥–æ–º–∏–π"
  return 1
}

wait_health() {
  local attempts=$MAX_WAIT_HEALTH
  local health_url="http://127.0.0.1:$PORT$HEALTH_PATH"
  local simple_url="http://127.0.0.1:$PORT$SIMPLE_CHAT_PATH"
  
  echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞..."
  
  for ((i=1; i<=attempts; i++)); do
    debug_log "–°–ø—Ä–æ–±–∞ $i/$attempts: –ø–µ—Ä–µ–≤—ñ—Ä—è—é $health_url"
    
    if curl -fsS --max-time 3 "$health_url" >/dev/null 2>&1; then
      echo "‚úÖ Health OK at $health_url"
      
      # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç—É
      if curl -fsS --max-time 3 "$simple_url" >/dev/null 2>&1; then
        echo "‚úÖ Simple chat OK at $simple_url"
      else
        echo "‚ö†Ô∏è  Simple chat –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π at $simple_url"
      fi
      
      echo ""
      echo "üéâ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π –Ω–∞ –ø–æ—Ä—Ç—É $PORT!"
      echo ""
      echo "üåê Web –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏:"
      echo "   ‚Ä¢ Modern Chat:  http://127.0.0.1:$PORT/modern.html"
      echo "   ‚Ä¢ Simple Chat:  http://127.0.0.1:$PORT/simple.html"
      echo "   ‚Ä¢ Monitor:      http://127.0.0.1:$PORT/monitor.html"
      echo ""
      echo "ü§ñ API: http://127.0.0.1:$PORT/v1/chat/completions"
      
      return 0
    fi
    
    if ((i % 5 == 0)); then
      echo "‚è≥ –û—á—ñ–∫—É—é –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞... ($i/$attempts —Å–ø—Ä–æ–±)"
    fi
    
    sleep "$HEALTH_DELAY"
  done
  
  echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—ñ—Å–ª—è $attempts —Å–ø—Ä–æ–± ($health_url)" >&2
  echo "üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏: tail -f $LOG_FILE" >&2
  return 1
}

main() {
  echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ—Ä—Ç $PORT)..."
  
  if [[ "$DEBUG_MODE" == "true" ]]; then
    echo "üêõ Debug —Ä–µ–∂–∏–º —É–≤—ñ–º–∫–Ω–µ–Ω–æ"
  fi

  # 1) –ó—É–ø–∏–Ω–∏—Ç–∏, —è–∫—â–æ —î
  # macOS bash 3.x —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å: –Ω–µ–º–∞—î mapfile/readarray
  pids_str="$(get_listen_pids "$PORT")"
  if [[ -n "$pids_str" ]]; then
    # –†–æ–∑–±–∏—Ç–∏ —Ä—è–¥–æ–∫ PID-—ñ–≤ —É –º–∞—Å–∏–≤
    IFS=$' \t\r\n' read -r -a pids <<< "$pids_str"
    kill_pids "${pids[@]}"
  else
    echo "‚ÑπÔ∏è  –ù–µ–º–∞—î –ø—Ä–æ—Ü–µ—Å—ñ–≤ –Ω–∞ –ø–æ—Ä—Ç—É $PORT"
  fi

  # 2) –°—Ç–∞—Ä—Ç
  start_server "$PORT"

  # 3) Health-check
  wait_health "$PORT" || {
    echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä" >&2
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –∑ –ª–æ–≥—É
    if [[ -f "$LOG_FILE" ]]; then
      echo "üìã –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –∑ –ª–æ–≥—É:"
      tail -n 10 "$LOG_FILE" | grep -E "(error|Error|ERROR)" || echo "–ü–æ–º–∏–ª–æ–∫ —É –ª–æ–≥–∞—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    fi
    
    return 1
  }

  # 4) –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ —Ä—è–¥–∫–∏ –ª–æ–≥—É
  if [[ -f "$LOG_FILE" ]]; then
    echo ""
    echo "üìã –û—Å—Ç–∞–Ω–Ω—ñ —Ä—è–¥–∫–∏ –ª–æ–≥—É:"
    tail -n 5 "$LOG_FILE" || true
  fi
  
  echo ""
  echo "‚ú® –ì–æ—Ç–æ–≤–æ! –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å."
}

main "$@"
