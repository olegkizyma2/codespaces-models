#!/usr/bin/env node

/**
 * Test ATLAS models through the server API
 */

import 'dotenv/config';

const serverUrl = 'http://localhost:4000';

async function testModelThroughServer(model) {
  console.log(`\nüìù –¢–µ—Å—Ç –º–æ–¥–µ–ª—ñ: ${model}`);
  console.log('='.repeat(60));
  
  try {
    const startTime = Date.now();
    
    const response = await fetch(`${serverUrl}/v1/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: model,
        messages: [
          { role: 'user', content: 'Say "Hello from ATLAS!" in one sentence.' }
        ],
        temperature: 0.7,
        max_tokens: 50
      })
    });
    
    const duration = Date.now() - startTime;
    
    if (!response.ok) {
      const error = await response.text();
      console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${response.status}: ${error.substring(0, 200)}`);
      return { success: false, model, error: `${response.status} ${response.statusText}` };
    }
    
    const data = await response.json();
    
    console.log(`‚úÖ –£—Å–ø—ñ—Ö (${duration}ms)`);
    console.log(`–í—ñ–¥–ø–æ–≤—ñ–¥—å: ${data.choices[0].message.content}`);
    console.log(`–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ${data.usage?.total_tokens || 'N/A'} —Ç–æ–∫–µ–Ω—ñ–≤`);
    
    return { success: true, duration, model };
    
  } catch (error) {
    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    return { success: false, error: error.message, model };
  }
}

async function main() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ATLAS –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä\n');
  console.log(`Server: ${serverUrl}\n`);
  
  const testModels = [
    'atlas-openai/gpt-4o-mini',
    'atlas-openai/gpt-4o',
    'atlas-meta/llama-3.3-70b-instruct',
    'atlas-microsoft/phi-4-mini-instruct',
    'atlas-mistral-ai/mistral-small-2503'
  ];
  
  console.log(`üìã –¢–µ—Å—Ç—É—î–º–æ ${testModels.length} –º–æ–¥–µ–ª–µ–π...\n`);
  
  const results = [];
  
  for (const model of testModels) {
    const result = await testModelThroughServer(model);
    results.push(result);
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // Summary
  console.log('\n' + '='.repeat(60));
  console.log('üìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø');
  console.log('='.repeat(60));
  
  const successful = results.filter(r => r.success);
  const failed = results.filter(r => !r.success);
  
  console.log(`\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: ${successful.length}/${results.length}`);
  if (successful.length > 0) {
    successful.forEach(r => {
      console.log(`   - ${r.model} (${r.duration}ms)`);
    });
  }
  
  if (failed.length > 0) {
    console.log(`\n‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed.length}/${results.length}`);
    failed.forEach(r => {
      console.log(`   - ${r.model}: ${r.error}`);
    });
  }
  
  console.log('\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

main();
