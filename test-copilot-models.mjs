#!/usr/bin/env node

/**
 * Test GitHub Copilot Chat models
 */

const API_BASE = 'http://localhost:4000/v1';

async function testModel(modelName, prompt) {
  console.log(`\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${modelName}`);
  console.log(`   –ó–∞–ø–∏—Ç: "${prompt}"`);
  
  try {
    const response = await fetch(`${API_BASE}/chat/completions`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        model: modelName,
        messages: [{ role: 'user', content: prompt }],
        max_tokens: 50
      })
    });

    if (!response.ok) {
      const error = await response.text();
      console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞ ${response.status}: ${error.substring(0, 100)}`);
      return false;
    }

    const data = await response.json();
    const answer = data.choices?.[0]?.message?.content || 'No response';
    const tokens = data.usage?.total_tokens || 0;
    
    console.log(`   ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: "${answer.substring(0, 60)}..."`);
    console.log(`   üìä –¢–æ–∫–µ–Ω—ñ–≤: ${tokens}`);
    return true;
  } catch (error) {
    console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    return false;
  }
}

async function main() {
  console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë     –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è GitHub Copilot Chat Models           ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');

  const tests = [
    { model: 'copilot-gpt-4o', prompt: 'Say hi in Ukrainian' },
    { model: 'copilot-claude-sonnet-4.5', prompt: 'What is 2+2?' },
    { model: 'copilot-gemini-2.5-pro', prompt: 'Name one color' },
  ];

  let passed = 0;
  for (const test of tests) {
    const success = await testModel(test.model, test.prompt);
    if (success) passed++;
    await new Promise(r => setTimeout(r, 1000));
  }

  console.log('\n' + '‚ïê'.repeat(60));
  console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: ${passed}/${tests.length} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
  console.log(passed === tests.length ? '‚úÖ –í–°–Ü –¢–ï–°–¢–ò –£–°–ü–Ü–®–ù–Ü!' : '‚ö†Ô∏è  –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏');
  console.log('‚ïê'.repeat(60) + '\n');
}

main().catch(console.error);
