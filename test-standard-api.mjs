#!/usr/bin/env node

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ OpenAI API
 * –¢–µ—Å—Ç—É—î —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ –ø–æ–ø—É–ª—è—Ä–Ω–∏–º–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
 */

import OpenAI from 'openai';

const API_BASE_URL = 'http://localhost:3010/v1';
const API_KEY = 'dummy-key'; // –ú–æ–∂–µ –±—É—Ç–∏ –±—É–¥—å-—è–∫–∏–º

const client = new OpenAI({
  apiKey: API_KEY,
  baseURL: API_BASE_URL,
});

console.log('üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ OpenAI API\n');

async function testModels() {
  console.log('üìã 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π...');
  try {
    const models = await client.models.list();
    console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${models.data.length} –º–æ–¥–µ–ª–µ–π:`);
    models.data.slice(0, 5).forEach(model => {
      console.log(`   ‚Ä¢ ${model.id} (${model.owned_by})`);
    });
    console.log(`   ... —Ç–∞ —â–µ ${models.data.length - 5} –º–æ–¥–µ–ª–µ–π\n`);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–æ–¥–µ–ª–µ–π:', error.message);
  }
}

async function testChat(modelName, prompt) {
  console.log(`üí¨ –¢–µ—Å—Ç —á–∞—Ç—É –∑ ${modelName}:`);
  console.log(`üë§ –ó–∞–ø–∏—Ç: "${prompt}"`);
  
  try {
    const completion = await client.chat.completions.create({
      model: modelName,
      messages: [
        { role: 'user', content: prompt }
      ],
      max_tokens: 100,
      temperature: 0.7
    });

    const response = completion.choices[0].message.content;
    const usage = completion.usage;
    
    console.log(`ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${response.substring(0, 150)}...`);
    console.log(`üìä –¢–æ–∫–µ–Ω–∏: ${usage.total_tokens} (prompt: ${usage.prompt_tokens}, completion: ${usage.completion_tokens})`);
    console.log(`üè∑Ô∏è  –ú–æ–¥–µ–ª—å: ${completion.model}`);
    console.log('');
    
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ ${modelName}:`, error.message);
    console.log('');
  }
}

async function testMultipleModels() {
  const testCases = [
    ['gpt-4o-mini', '–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?'],
    ['Meta-Llama-3.1-405B-Instruct', 'What makes you special as a large model?'],
    ['microsoft/Phi-3.5-vision-instruct', 'What can you do with images?'],
    ['AI21-Jamba-1.5-Large', 'Tell me about your capabilities'],
    ['Cohere-command-r-plus-08-2024', 'What are your strengths?']
  ];

  for (const [model, prompt] of testCases) {
    await testChat(model, prompt);
    // –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
}

async function testErrorHandling() {
  console.log('üîß 3. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫...');
  try {
    await client.chat.completions.create({
      model: 'non-existent-model',
      messages: [{ role: 'user', content: 'Hello' }]
    });
  } catch (error) {
    console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏: ${error.message}`);
  }
  console.log('');
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
    const response = await fetch(`${API_BASE_URL.replace('/v1', '')}/`);
    const health = await response.json();
    
    if (!health.ok) {
      throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
    }
    
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î: ${health.info}\n`);
    
    // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    await testModels();
    await testMultipleModels();
    await testErrorHandling();
    
    console.log('üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    console.log('\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è:');
    console.log('   ‚Ä¢ STANDARD_OPENAI_API.md - –ø–æ–≤–Ω–∏–π –≥—ñ–¥ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É API');
    console.log('   ‚Ä¢ AVAILABLE_MODELS.md - —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –º–æ–¥–µ–ª–µ–π');
    console.log('   ‚Ä¢ http://localhost:3010/ui/ - –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
    console.log('\nüí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ: npm start');
  }
}

main();
