#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ—Å—Ç—ñ –¥–ª—è API endpoints (–±–µ–∑ UI)
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î OpenAI-—Å—É–º—ñ—Å–Ω—ñ endpoints –Ω–∞ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
 */

import fetch from 'node-fetch';
import { performance } from 'perf_hooks';

const BASE_URL = process.env.BASE_URL || 'http://localhost:3010';
const TEST_MODEL = process.env.TEST_MODEL || 'openai/gpt-4o-mini';
const API_KEY = process.env.GITHUB_TOKEN || 'dummy-key';

class APIConcurrencyTester {
  constructor() {
    this.results = [];
    this.errors = [];
    this.activeRequests = new Set();
  }

  async makeAPIRequest(endpoint, body, id, timeout = 30000) {
    const startTime = performance.now();
    const requestInfo = {
      id,
      endpoint,
      startTime,
      endTime: null,
      duration: null,
      status: null,
      success: false,
      error: null,
      tokens: 0,
      responseSize: 0
    };

    this.activeRequests.add(requestInfo);

    try {
      console.log(`üì° [${id}] ‚Üí ${endpoint}`);
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);

      const response = await fetch(`${BASE_URL}${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${API_KEY}`
        },
        body: JSON.stringify(body),
        signal: controller.signal
      });

      clearTimeout(timeoutId);
      const endTime = performance.now();
      const responseText = await response.text();
      
      requestInfo.endTime = endTime;
      requestInfo.duration = endTime - startTime;
      requestInfo.status = response.status;
      requestInfo.success = response.ok;
      requestInfo.responseSize = responseText.length;

      if (response.ok) {
        try {
          const jsonResponse = JSON.parse(responseText);
          requestInfo.tokens = jsonResponse.usage?.total_tokens || 0;
          console.log(`‚úÖ [${id}] ${requestInfo.duration.toFixed(0)}ms (${requestInfo.tokens} tokens)`);
        } catch (e) {
          console.log(`‚úÖ [${id}] ${requestInfo.duration.toFixed(0)}ms (non-JSON response)`);
        }
      } else {
        requestInfo.error = `HTTP ${response.status}: ${responseText.substring(0, 200)}`;
        console.log(`‚ùå [${id}] ${response.status} - ${responseText.substring(0, 100)}`);
      }

    } catch (error) {
      const endTime = performance.now();
      requestInfo.endTime = endTime;
      requestInfo.duration = endTime - startTime;
      requestInfo.error = error.name === 'AbortError' ? 'Timeout' : error.message;
      console.log(`‚ùå [${id}] ${requestInfo.error}`);
    }

    this.activeRequests.delete(requestInfo);
    this.results.push(requestInfo);
    
    if (!requestInfo.success) {
      this.errors.push(requestInfo);
    }

    return requestInfo;
  }

  async testChatCompletions() {
    console.log('\\nüî• –¢–ï–°–¢: /v1/chat/completions (5 –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤)');
    console.log('='.repeat(60));

    const requests = [];
    for (let i = 1; i <= 5; i++) {
      requests.push(
        this.makeAPIRequest('/v1/chat/completions', {
          model: TEST_MODEL,
          messages: [
            { role: 'system', content: 'You are a helpful assistant.' },
            { role: 'user', content: `API test request #${i}. Give a short response.` }
          ],
          max_tokens: 50,
          temperature: 0.7
        }, `CHAT-${i}`)
      );
    }

    await Promise.allSettled(requests);
    return this.analyzeResults('Chat Completions');
  }

  async testStreamingChatCompletions() {
    console.log('\\nüî• –¢–ï–°–¢: /v1/chat/completions STREAMING (3 –ø–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏)');
    console.log('='.repeat(60));

    const requests = [];
    for (let i = 1; i <= 3; i++) {
      requests.push(
        this.makeStreamingRequest('/v1/chat/completions', {
          model: TEST_MODEL,
          messages: [
            { role: 'user', content: `Streaming test ${i}. Count to 5.` }
          ],
          max_tokens: 30,
          stream: true
        }, `STREAM-${i}`)
      );
    }

    await Promise.allSettled(requests);
    return this.analyzeResults('Streaming Chat Completions');
  }

  async makeStreamingRequest(endpoint, body, id) {
    const startTime = performance.now();
    const requestInfo = {
      id,
      endpoint: endpoint + ' (streaming)',
      startTime,
      endTime: null,
      duration: null,
      status: null,
      success: false,
      error: null,
      chunks: 0
    };

    try {
      console.log(`üì° [${id}] ‚Üí ${endpoint} (streaming)`);
      
      const response = await fetch(`${BASE_URL}${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${API_KEY}`
        },
        body: JSON.stringify(body)
      });

      requestInfo.status = response.status;

      if (response.ok) {
        const reader = response.body.getReader();
        const decoder = new TextDecoder();

        while (true) {
          const { done, value } = await reader.read();
          if (done) break;
          
          const chunk = decoder.decode(value);
          const lines = chunk.split('\\n').filter(line => line.startsWith('data: '));
          requestInfo.chunks += lines.length;
        }

        requestInfo.success = true;
        const endTime = performance.now();
        requestInfo.duration = endTime - startTime;
        console.log(`‚úÖ [${id}] ${requestInfo.duration.toFixed(0)}ms (${requestInfo.chunks} chunks)`);
      } else {
        requestInfo.error = `HTTP ${response.status}`;
        console.log(`‚ùå [${id}] ${response.status}`);
      }

    } catch (error) {
      requestInfo.error = error.message;
      console.log(`‚ùå [${id}] ${error.message}`);
    }

    requestInfo.endTime = performance.now();
    this.results.push(requestInfo);
    
    if (!requestInfo.success) {
      this.errors.push(requestInfo);
    }

    return requestInfo;
  }

  async testCompletions() {
    console.log('\\nüî• –¢–ï–°–¢: /v1/completions (3 –ø–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏)');
    console.log('='.repeat(60));

    const requests = [];
    for (let i = 1; i <= 3; i++) {
      requests.push(
        this.makeAPIRequest('/v1/completions', {
          model: TEST_MODEL,
          prompt: `Complete this sentence about API testing #${i}:`,
          max_tokens: 30,
          temperature: 0.5
        }, `COMPLETION-${i}`)
      );
    }

    await Promise.allSettled(requests);
    return this.analyzeResults('Completions');
  }

  async testEmbeddings() {
    console.log('\\nüî• –¢–ï–°–¢: /v1/embeddings (4 –ø–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏)');
    console.log('='.repeat(60));

    const requests = [];
    const embeddingModel = 'openai/text-embedding-3-small';
    
    for (let i = 1; i <= 4; i++) {
      requests.push(
        this.makeAPIRequest('/v1/embeddings', {
          model: embeddingModel,
          input: `Text for embedding test number ${i}`
        }, `EMBED-${i}`)
      );
    }

    await Promise.allSettled(requests);
    return this.analyzeResults('Embeddings');
  }

  async testMixedAPICalls() {
    console.log('\\nüî• –¢–ï–°–¢: –ó–º—ñ—à–∞–Ω—ñ API –≤–∏–∫–ª–∏–∫–∏ (—Ä—ñ–∑–Ω—ñ endpoints –æ–¥–Ω–æ—á–∞—Å–Ω–æ)');
    console.log('='.repeat(60));

    const requests = [
      // Chat completion
      this.makeAPIRequest('/v1/chat/completions', {
        model: TEST_MODEL,
        messages: [{ role: 'user', content: 'Mixed test 1' }],
        max_tokens: 20
      }, 'MIX-CHAT'),

      // Completion
      this.makeAPIRequest('/v1/completions', {
        model: TEST_MODEL,
        prompt: 'Mixed test prompt',
        max_tokens: 20
      }, 'MIX-COMPLETION'),

      // Embedding
      this.makeAPIRequest('/v1/embeddings', {
        model: 'openai/text-embedding-3-small',
        input: 'Mixed test embedding'
      }, 'MIX-EMBED'),

      // Models list (GET request)
      this.makeGetRequest('/v1/models', 'MIX-MODELS')
    ];

    await Promise.allSettled(requests);
    return this.analyzeResults('Mixed API Calls');
  }

  async makeGetRequest(endpoint, id) {
    const startTime = performance.now();
    const requestInfo = {
      id,
      endpoint,
      startTime,
      endTime: null,
      duration: null,
      status: null,
      success: false,
      error: null
    };

    try {
      console.log(`üì° [${id}] ‚Üí GET ${endpoint}`);
      
      const response = await fetch(`${BASE_URL}${endpoint}`, {
        headers: {
          'Authorization': `Bearer ${API_KEY}`
        }
      });

      const endTime = performance.now();
      requestInfo.endTime = endTime;
      requestInfo.duration = endTime - startTime;
      requestInfo.status = response.status;
      requestInfo.success = response.ok;

      if (response.ok) {
        const data = await response.json();
        console.log(`‚úÖ [${id}] ${requestInfo.duration.toFixed(0)}ms (${data.data?.length || 0} items)`);
      } else {
        requestInfo.error = `HTTP ${response.status}`;
        console.log(`‚ùå [${id}] ${response.status}`);
      }

    } catch (error) {
      requestInfo.error = error.message;
      console.log(`‚ùå [${id}] ${error.message}`);
    }

    this.results.push(requestInfo);
    return requestInfo;
  }

  async testHighConcurrency() {
    console.log('\\nüî• –¢–ï–°–¢: –í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –æ–¥–Ω–æ—á–∞—Å–Ω–æ—Å—Ç—ñ (15 –∑–∞–ø–∏—Ç—ñ–≤)');
    console.log('='.repeat(60));

    const requests = [];
    for (let i = 1; i <= 15; i++) {
      requests.push(
        this.makeAPIRequest('/v1/chat/completions', {
          model: TEST_MODEL,
          messages: [{ role: 'user', content: `High concurrency test ${i}` }],
          max_tokens: 10
        }, `HIGH-${i}`)
      );
    }

    console.log(`üì° –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ 15 –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤...`);
    const startTime = performance.now();
    await Promise.allSettled(requests);
    const totalTime = performance.now() - startTime;

    console.log(`‚è±Ô∏è  –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: ${totalTime.toFixed(0)}ms`);
    return this.analyzeResults('High Concurrency', { totalTime });
  }

  analyzeResults(testName, additionalInfo = {}) {
    const successful = this.results.filter(r => r.success);
    const failed = this.results.filter(r => !r.success);
    
    const results = {
      testName,
      total: this.results.length,
      successful: successful.length,
      failed: failed.length,
      successRate: (successful.length / this.results.length * 100).toFixed(1)
    };

    if (successful.length > 0) {
      const durations = successful.map(r => r.duration);
      const tokens = successful.map(r => r.tokens || 0);
      
      results.metrics = {
        avgResponseTime: (durations.reduce((a, b) => a + b) / durations.length).toFixed(2),
        minResponseTime: Math.min(...durations).toFixed(2),
        maxResponseTime: Math.max(...durations).toFixed(2),
        totalTokens: tokens.reduce((a, b) => a + b),
        avgTokens: tokens.length > 0 ? (tokens.reduce((a, b) => a + b) / tokens.length).toFixed(0) : 0
      };
    }

    // –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    console.log(`\\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò: ${testName}`);
    console.log(`   ‚úÖ –£—Å–ø—ñ—à–Ω—ñ: ${successful.length}/${this.results.length} (${results.successRate}%)`);
    
    if (successful.length > 0) {
      console.log(`   ‚è±Ô∏è  –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: ${results.metrics.avgResponseTime}ms`);
      console.log(`   üìä –î—ñ–∞–ø–∞–∑–æ–Ω: ${results.metrics.minResponseTime}-${results.metrics.maxResponseTime}ms`);
      if (results.metrics.totalTokens > 0) {
        console.log(`   üî¢ –¢–æ–∫–µ–Ω–∏: ${results.metrics.totalTokens} –≤—Å—å–æ–≥–æ (avg: ${results.metrics.avgTokens})`);
      }
    }

    if (failed.length > 0) {
      console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∏: ${failed.length}`);
      failed.forEach(f => console.log(`      [${f.id}] ${f.error}`));
    }

    if (additionalInfo.totalTime) {
      console.log(`   üïê –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: ${additionalInfo.totalTime.toFixed(0)}ms`);
    }

    // –û—á–∏—â–µ–Ω–Ω—è –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
    const testResults = [...this.results];
    this.results = [];
    
    return results;
  }

  async checkAPIHealth() {
    console.log('üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API...');
    
    try {
      // Health check
      const healthResponse = await fetch(`${BASE_URL}/health`);
      const healthData = await healthResponse.json();
      
      // Models check
      const modelsResponse = await fetch(`${BASE_URL}/v1/models`, {
        headers: { 'Authorization': `Bearer ${API_KEY}` }
      });
      const modelsData = await modelsResponse.json();
      
      if (healthResponse.ok && modelsResponse.ok) {
        console.log(`‚úÖ API –ø—Ä–∞—Ü—é—î - ${healthData.models} –º–æ–¥–µ–ª–µ–π, —Å—Ç–∞—Ç—É—Å: ${healthData.status}`);
        console.log(`üìã –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: ${modelsData.data?.length || 0}`);
        return true;
      } else {
        console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ API`);
        return false;
      }
    } catch (error) {
      console.log(`‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ: ${error.message}`);
      return false;
    }
  }

  async runAllAPITests() {
    console.log('üöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø API –ù–ê –û–î–ù–û–ß–ê–°–ù–Ü–°–¢–¨ –¢–ê –ù–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø');
    console.log('='.repeat(80));
    console.log(`üìç API URL: ${BASE_URL}`);
    console.log(`ü§ñ –¢–µ—Å—Ç–æ–≤–∞ –º–æ–¥–µ–ª—å: ${TEST_MODEL}`);
    console.log(`üîë API Key: ${API_KEY.substring(0, 8)}...`);
    console.log('='.repeat(80));

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API
    const isHealthy = await this.checkAPIHealth();
    if (!isHealthy) {
      console.log('\\n‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤.');
      return;
    }

    const allResults = [];

    try {
      // –ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤
      allResults.push(await this.testChatCompletions());
      allResults.push(await this.testStreamingChatCompletions());
      allResults.push(await this.testCompletions());
      allResults.push(await this.testEmbeddings());
      allResults.push(await this.testMixedAPICalls());
      allResults.push(await this.testHighConcurrency());

      // –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç
      console.log('\\n' + '='.repeat(80));
      console.log('üìã –ü–Ü–î–°–£–ú–ö–û–í–ò–ô –ó–í–Ü–¢ API –¢–ï–°–¢–Ü–í');
      console.log('='.repeat(80));

      let totalRequests = 0;
      let totalSuccessful = 0;
      let totalTokens = 0;

      allResults.forEach(result => {
        console.log(`üìä ${result.testName}:`);
        console.log(`   –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${result.successRate}% (${result.successful}/${result.total})`);
        if (result.metrics?.avgResponseTime) {
          console.log(`   –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: ${result.metrics.avgResponseTime}ms`);
        }
        if (result.metrics?.totalTokens) {
          console.log(`   –¢–æ–∫–µ–Ω–∏: ${result.metrics.totalTokens}`);
          totalTokens += parseInt(result.metrics.totalTokens);
        }
        console.log('');
        
        totalRequests += result.total;
        totalSuccessful += result.successful;
      });

      const overallSuccessRate = ((totalSuccessful / totalRequests) * 100).toFixed(1);

      console.log('üéØ –ó–ê–ì–ê–õ–¨–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò:');
      console.log(`   üìà –ó–∞–≥–∞–ª—å–Ω–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${overallSuccessRate}% (${totalSuccessful}/${totalRequests})`);
      console.log(`   üî¢ –í—Å—å–æ–≥–æ —Ç–æ–∫–µ–Ω—ñ–≤: ${totalTokens}`);
      
      if (overallSuccessRate >= 95) {
        console.log('   ‚úÖ API –≤—ñ–¥–º—ñ–Ω–Ω–æ —Å–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –∑ –æ–¥–Ω–æ—á–∞—Å–Ω–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏');
        console.log('   üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
      } else if (overallSuccessRate >= 85) {
        console.log('   ‚ö†Ô∏è  API –∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ –ø—Ä–∞—Ü—é—î –ø—ñ–¥ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º');
        console.log('   üí° –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—ñ–¥ —Ä–µ–∞–ª—å–Ω–∏–º –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º');
      } else {
        console.log('   ‚ùå API –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –æ–¥–Ω–æ—á–∞—Å–Ω—ñ—Å—Ç—é');
        console.log('   üí° –ö—Ä–∏—Ç–∏—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:');
        console.log('      ‚Ä¢ –î–æ–¥–∞–π—Ç–µ rate limiting');
        console.log('      ‚Ä¢ –û–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ –æ–±—Ä–æ–±–∫—É –∑–∞–ø–∏—Ç—ñ–≤');
        console.log('      ‚Ä¢ –†–æ–∑–≥–ª—è–Ω—å—Ç–µ connection pooling');
      }

      console.log('='.repeat(80));

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
    }
  }
}

// –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç
async function quickAPITest() {
  console.log('‚ö° –®–í–ò–î–ö–ò–ô API –¢–ï–°–¢');
  console.log('='.repeat(40));
  
  try {
    const start = performance.now();
    const promises = [];
    
    for (let i = 1; i <= 3; i++) {
      promises.push(
        fetch(`${BASE_URL}/v1/chat/completions`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${API_KEY}`
          },
          body: JSON.stringify({
            model: TEST_MODEL,
            messages: [{ role: 'user', content: `Quick test ${i}` }],
            max_tokens: 10
          })
        })
      );
    }

    const results = await Promise.allSettled(promises);
    const duration = performance.now() - start;
    const successful = results.filter(r => r.value?.ok).length;
    
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${successful}/3 –∑–∞–ø–∏—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω—ñ –∑–∞ ${duration.toFixed(0)}ms`);
    
    if (successful === 3) {
      console.log('‚úÖ API –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑ –æ–¥–Ω–æ—á–∞—Å–Ω–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏');
    } else {
      console.log('‚ö†Ô∏è  –í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø–æ–≤–Ω–∏–π —Ç–µ—Å—Ç: node test-api-concurrency.mjs');
    }
    
  } catch (error) {
    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
  const args = process.argv.slice(2);
  
  if (args.includes('--quick') || args.includes('-q')) {
    quickAPITest().catch(console.error);
  } else {
    const tester = new APIConcurrencyTester();
    tester.runAllAPITests().catch(console.error);
  }
}

export default APIConcurrencyTester;
