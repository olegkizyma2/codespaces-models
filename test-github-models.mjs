#!/usr/bin/env node

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–µ—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GitHub Models API
 * –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
 */

import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const TOKEN = process.env.GITHUB_TOKEN || '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';
const BASE_URL = 'https://models.github.ai/inference';

console.log('\n' + '='.repeat(70));
console.log('ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–†–û–°–Ü–í –î–û GITHUB MODELS API');
console.log('='.repeat(70) + '\n');

const requests = [
  {
    name: 'üìù –ó–∞–ø—Ä–æ—Å 1: Meta Llama 3.2 (Vision –º–æ–¥–µ–ª—å)',
    model: 'meta/llama-3.2-11b-vision-instruct',
    prompt: '–°–∫–∞–∂–∏ –ø—Ä–∏–≤—ñ—Ç –∫–æ—Ä–æ—Ç–∫–æ'
  },
  {
    name: 'üí° –ó–∞–ø—Ä–æ—Å 2: Microsoft Phi-3.5 Mini (–ú–∞–ª–∞ –º–æ–≤–Ω–∞ –º–æ–¥–µ–ª—å)',
    model: 'microsoft/phi-3.5-mini-instruct',
    prompt: 'What is AI?'
  },
  {
    name: 'üéØ –ó–∞–ø—Ä–æ—Å 3: Cohere Command R (–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –º–æ–¥–µ–ª—å)',
    model: 'cohere/cohere-command-r-08-2024',
    prompt: '–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–≤—ñ—Ä –ø—Ä–æ –æ—Å—ñ–Ω—å'
  }
];

async function makeRequest(index, request) {
  console.log(`\n${request.name}`);
  console.log('-'.repeat(70));
  console.log(`Model: ${request.model}`);
  console.log(`Prompt: "${request.prompt}"\n`);
  
  try {
    const response = await fetch(`${BASE_URL}/v1/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${TOKEN}`
      },
      body: JSON.stringify({
        model: request.model,
        messages: [
          {
            role: 'user',
            content: request.prompt
          }
        ],
        max_tokens: 100,
        temperature: 0.7
      })
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${data.error?.message || 'Unknown error'}`);
    }

    const message = data.choices?.[0]?.message?.content || 'No response';
    const tokens = data.usage?.total_tokens || 0;
    
    console.log(`‚úÖ –£—Å–ø—ñ—Ö!`);
    console.log(`Response: "${message.substring(0, 100)}..."`);
    console.log(`Tokens: ${tokens}`);
    
    return true;
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    return false;
  }
}

async function runTests() {
  let successful = 0;
  let failed = 0;

  for (let i = 0; i < requests.length; i++) {
    const success = await makeRequest(i + 1, requests[i]);
    if (success) {
      successful++;
    } else {
      failed++;
    }
    
    // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
    if (i < requests.length - 1) {
      console.log('\n‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ 2 —Å–µ–∫—É–Ω–¥–∏...');
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }

  // –†–µ–∑—é–º–µ
  console.log('\n' + '='.repeat(70));
  console.log('üìä –†–ï–ó–Æ–ú–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø');
  console.log('='.repeat(70));
  console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ: ${successful}/${requests.length}`);
  console.log(`‚ùå –ü–æ–º–∏–ª–∫–∏: ${failed}/${requests.length}`);
  console.log('='.repeat(70) + '\n');

  if (successful === requests.length) {
    console.log('üéâ –í–°–Ü –ó–ê–ü–ò–¢–ò –£–°–ü–Ü–®–ù–Ü!\n');
    process.exit(0);
  } else {
    console.log('‚ö†Ô∏è  –î–µ—è–∫—ñ –∑–∞–ø–∏—Ç–∏ –Ω–µ –≤–¥–∞–ª–∏—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é.\n');
    process.exit(1);
  }
}

// –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
console.log('‚öôÔ∏è  –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:');
console.log(`  Base URL: ${BASE_URL}`);
console.log(`  Token: ${TOKEN.substring(0, 10)}...${TOKEN.substring(TOKEN.length - 5)}`);
console.log('\n' + '='.repeat(70) + '\n');

runTests().catch(error => {
  console.error('Fatal error:', error);
  process.exit(1);
});
