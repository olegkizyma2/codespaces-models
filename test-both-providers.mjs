#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –æ–±–æ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤: Atlas —Ç–∞ GitHub Copilot
 * –í–∏–∫–æ–Ω—É—î –∑–∞–ø–∏—Ç–∏ –¥–æ –æ–±–æ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ –∑ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
 */

import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const BASE_URL = 'http://localhost:4000';

console.log('\n' + '='.repeat(70));
console.log('ü§ñ –¢–ï–°–¢–£–í–ê–ù–ù–Ø ATLAS —Ç–∞ GITHUB COPILOT –ü–†–û–í–ê–ô–î–ï–†–Ü–í');
console.log('='.repeat(70) + '\n');

// –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏ –¥–ª—è –æ–±–æ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤
const tests = [
  {
    name: 'Atlas: Meta Llama 3.2',
    model: 'atlas-meta/llama-3.2-11b-vision-instruct',
    prompt: 'Say Hello in one word'
  },
  {
    name: 'Copilot: Meta Llama 3.2',
    model: 'copilot-meta/llama-3.2-11b-vision-instruct',
    prompt: 'Say Hello in one word'
  },
  {
    name: 'Atlas: Cohere Command R',
    model: 'atlas-cohere/cohere-command-r-08-2024',
    prompt: 'What is AI?'
  },
  {
    name: 'Copilot: Cohere Command R',
    model: 'copilot-cohere/cohere-command-r-08-2024',
    prompt: 'What is AI?'
  }
];

async function testProvider(index, test) {
  console.log(`\n${index}. ${test.name}`);
  console.log('-'.repeat(70));
  console.log(`Model: ${test.model}`);
  console.log(`Prompt: "${test.prompt}"\n`);
  
  try {
    const response = await fetch(`${BASE_URL}/v1/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: test.model,
        messages: [{ role: 'user', content: test.prompt }],
        max_tokens: 100,
        temperature: 0.7
      })
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${data.error?.message || 'Unknown error'}`);
    }

    const message = data.choices?.[0]?.message?.content || 'No response';
    const tokens = data.usage?.total_tokens || 0;
    
    console.log(`‚úÖ –£—Å–ø—ñ—Ö!`);
    console.log(`Response: "${message.substring(0, 80)}..."`);
    console.log(`Tokens: ${tokens}`);
    
    return true;
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    return false;
  }
}

async function runAllTests() {
  let successful = 0;
  let failed = 0;

  for (let i = 0; i < tests.length; i++) {
    const success = await testProvider(i + 1, tests[i]);
    if (success) {
      successful++;
    } else {
      failed++;
    }
    
    // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
    if (i < tests.length - 1) {
      console.log('\n‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ 2 —Å–µ–∫—É–Ω–¥–∏...');
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }

  // –†–µ–∑—é–º–µ
  console.log('\n' + '='.repeat(70));
  console.log('üìä –†–ï–ó–Æ–ú–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø');
  console.log('='.repeat(70));
  console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ: ${successful}/${tests.length}`);
  console.log(`‚ùå –ü–æ–º–∏–ª–∫–∏: ${failed}/${tests.length}`);
  console.log('='.repeat(70) + '\n');

  if (successful === tests.length) {
    console.log('üéâ –í–°–Ü –ó–ê–ü–ò–¢–ò –£–°–ü–Ü–®–ù–Ü!\n');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤:');
    console.log('   Atlas: 2/2 ‚úÖ');
    console.log('   Copilot: 2/2 ‚úÖ');
    console.log('\n‚ú® –û–ë–ò–î–í–ê –ü–†–û–í–ê–ô–î–ï–†–ò –ü–†–ê–¶–Æ–Æ–¢–¨ –Ü–î–ï–ê–õ–¨–ù–û!\n');
    process.exit(0);
  } else {
    console.log(`‚ö†Ô∏è  –î–µ—è–∫—ñ –∑–∞–ø–∏—Ç–∏ –Ω–µ –≤–¥–∞–ª–∏—Å—è.\n`);
    process.exit(1);
  }
}

runAllTests().catch(error => {
  console.error('Fatal error:', error);
  process.exit(1);
});
