#!/usr/bin/env node

/**
 * Test GitHub token validity
 */

import 'dotenv/config';

const tokens = [
  process.env.GITHUB_TOKEN,
  process.env.GITHUB_TOKEN_2,
  process.env.GITHUB_TOKEN_3,
  process.env.GITHUB_TOKEN_4
].filter(Boolean);

console.log('üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ GitHub —Ç–æ–∫–µ–Ω—ñ–≤\n');

async function testToken(token, name) {
  console.log(`\nüìù –¢–µ—Å—Ç: ${name}`);
  console.log('='.repeat(60));
  
  try {
    // Test GitHub API
    const response = await fetch('https://api.github.com/user', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.github+json',
        'X-GitHub-Api-Version': '2022-11-28'
      }
    });
    
    console.log(`–°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π`);
      console.log(`   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${data.login}`);
      console.log(`   ID: ${data.id}`);
    } else {
      const error = await response.text();
      console.log(`‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π`);
      console.log(`   –ü–æ–º–∏–ª–∫–∞: ${error.substring(0, 200)}`);
    }
    
    // Test GitHub Models API
    console.log('\nü§ñ –¢–µ—Å—Ç GitHub Models API:');
    const modelsResponse = await fetch('https://models.inference.ai.azure.com/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [{ role: 'user', content: 'Hi' }],
        max_tokens: 10
      })
    });
    
    console.log(`   –°—Ç–∞—Ç—É—Å: ${modelsResponse.status} ${modelsResponse.statusText}`);
    
    if (modelsResponse.ok) {
      const data = await modelsResponse.json();
      console.log(`   ‚úÖ GitHub Models API –¥–æ—Å—Ç—É–ø–Ω–∏–π`);
      console.log(`   –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${data.choices[0].message.content}`);
    } else {
      const error = await modelsResponse.text();
      console.log(`   ‚ùå GitHub Models API –ø–æ–º–∏–ª–∫–∞`);
      console.log(`   –î–µ—Ç–∞–ª—ñ: ${error.substring(0, 300)}`);
    }
    
    return { success: response.ok, name };
    
  } catch (error) {
    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: ${error.message}`);
    return { success: false, name, error: error.message };
  }
}

async function main() {
  console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω—ñ–≤: ${tokens.length}\n`);
  
  const tokenNames = [
    'GITHUB_TOKEN',
    'GITHUB_TOKEN_2',
    'GITHUB_TOKEN_3',
    'GITHUB_TOKEN_4'
  ];
  
  const results = [];
  
  for (let i = 0; i < tokens.length; i++) {
    const result = await testToken(tokens[i], tokenNames[i]);
    results.push(result);
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üìä –ü–Ü–î–°–£–ú–û–ö');
  console.log('='.repeat(60));
  
  const valid = results.filter(r => r.success);
  const invalid = results.filter(r => !r.success);
  
  console.log(`\n‚úÖ –í–∞–ª—ñ–¥–Ω—ñ —Ç–æ–∫–µ–Ω–∏: ${valid.length}/${results.length}`);
  valid.forEach(r => console.log(`   - ${r.name}`));
  
  if (invalid.length > 0) {
    console.log(`\n‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ —Ç–æ–∫–µ–Ω–∏: ${invalid.length}/${results.length}`);
    invalid.forEach(r => console.log(`   - ${r.name}: ${r.error || 'Unauthorized'}`));
  }
}

main();
