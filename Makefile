# Makefile for AI Chat Server
# –ü—ñ–¥—Ç—Ä–∏–º—É—î –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç—É –∑ 24 AI –º–æ–¥–µ–ª—è–º–∏ –∑ –±—É–¥—å-—è–∫–æ—ó –ø–∞–ø–∫–∏
#
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
#   make chat          # –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —á–∞—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3010
#   make chat PORT=3011 # –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–∞ —ñ–Ω—à–æ–º—É –ø–æ—Ä—Ç—É  
#   make stop          # –∑—É–ø–∏–Ω–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä
#   make restart       # –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä
#   make status        # –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
#   make logs          # –ø–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏
#   make test          # —à–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç API
#   make install       # –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ

# –ó–º—ñ–Ω–Ω—ñ
SCRIPT_DIR := $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))
PORT ?= 3010
LOG_FILE = $(SCRIPT_DIR)/server.log
PID_FILE = $(SCRIPT_DIR)/server.pid
HEALTH_PATH = /health
SIMPLE_CHAT_PATH = /simple.html
MAX_WAIT_KILL = 5
MAX_WAIT_HEALTH = 30
HEALTH_DELAY = 0.5

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
BLUE = \033[0;34m
NC = \033[0m # No Color

.PHONY: chat stop restart status logs test models install clean help openai models-json models-count install-openai install-all install-stop

# –û—Å–Ω–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ - –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —á–∞—Ç
chat: require-deps
	@echo "$(BLUE)üîÑ –ó–∞–ø—É—Å–∫ AI —á–∞—Ç—É –Ω–∞ –ø–æ—Ä—Ç—É $(PORT)...$(NC)"
	@$(MAKE) -s stop-if-running
	@$(MAKE) -s start-server
	@$(MAKE) -s wait-health

# –°—Ç—Ä–æ–≥–∏–π OpenAI API —Ä–µ–∂–∏–º (–±–µ–∑ TTS —Ç–∞ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É)
openai: require-deps
	@echo "$(BLUE)üîÑ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–æ–≥–æ–≥–æ OpenAI API –Ω–∞ –ø–æ—Ä—Ç—É $(PORT)...$(NC)"
	@$(MAKE) -s stop-all-services
	@$(MAKE) -s start-openai-server
	@$(MAKE) -s wait-health

# –ó—É–ø–∏–Ω–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä
stop: stop-if-running
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ$(NC)"

# –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä
restart: stop chat

# –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∑ TTS —Ç–∞ ngrok (—ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)
restart-tts: stop
	@echo "$(BLUE)üîÑ –ó–∞–ø—É—Å–∫ AI —á–∞—Ç—É –∑ TTS –ø—Ä–æ–∫—Å–∏—Ä—É–≤–∞–Ω–Ω—è–º...$(NC)"
	@$(MAKE) -s start-tts-server
	@$(MAKE) -s wait-tts-ready
	@echo ""
	@echo "$(GREEN)üéâ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π –∑ TTS –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é!$(NC)"
	@echo "$(BLUE)üåê –ü—Ä–æ—Å—Ç–∏–π —á–∞—Ç –∑ —É—Å—ñ–º–∞ 24 –º–æ–¥–µ–ª—è–º–∏: http://127.0.0.1:$(PORT)$(NC)"
	@echo "$(BLUE)ü§ñ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ OpenAI, Microsoft, AI21, Cohere, Meta, Mistral$(NC)"
	@echo "$(BLUE)üîä TTS –¥–æ—Å—Ç—É–ø–Ω–∏–π: http://127.0.0.1:$(PORT)/tts?text=–ø—Ä–∏–≤—ñ—Ç$(NC)"
	@echo ""
	@echo "$(YELLOW)üöÄ –ó–∞–ø—É—Å–∫ ngrok –¥–ª—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É...$(NC)"
	@$(MAKE) -s start-ngrok-interactive

start-tts-server:
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä –∑ TTS –ø—Ä–æ–∫—Å–∏—Ä—É–≤–∞–Ω–Ω—è–º –Ω–∞ –ø–æ—Ä—Ç—É $(PORT)...$(NC)"
	@cd "$(SCRIPT_DIR)" && nohup env PORT="$(PORT)" ENABLE_TTS_PROXY=true TTS_PROXY_TARGET="http://127.0.0.1:8080" node server.js >> "$(LOG_FILE)" 2>&1 & echo $$! > "$(PID_FILE)"
	@echo "$(GREEN)‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∑ PID $$(cat $(PID_FILE))$(NC)"

wait-tts-ready:
	@echo "$(BLUE)üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –∑ TTS...$(NC)"
	@for i in $$(seq 1 30); do \
		if curl -fsS --max-time 3 "http://127.0.0.1:$(PORT)$(HEALTH_PATH)" >/dev/null 2>&1; then \
			echo "$(GREEN)‚úÖ Health OK$(NC)"; \
			if curl -fsS --max-time 3 "http://127.0.0.1:$(PORT)/simple.html" >/dev/null 2>&1; then \
				echo "$(GREEN)‚úÖ Simple chat OK$(NC)"; \
			fi; \
			if curl -fsS --max-time 3 "http://127.0.0.1:$(PORT)/tts" >/dev/null 2>&1; then \
				echo "$(GREEN)‚úÖ TTS proxy OK$(NC)"; \
			else \
				echo "$(YELLOW)‚ö†Ô∏è  TTS proxy –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π?)$(NC)"; \
			fi; \
			exit 0; \
		fi; \
		sleep 1; \
	done; \
	echo "$(RED)‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—ñ—Å–ª—è 30 —Å–µ–∫—É–Ω–¥$(NC)"; \
	exit 1

start-ngrok-interactive:
	@echo "$(BLUE)üåê –ó–∞–ø—É—Å–∫ ngrok —Ç—É–Ω–µ–ª—é –¥–ª—è –ø–æ—Ä—Ç—É $(PORT)...$(NC)"
	@pkill -f "ngrok http" 2>/dev/null || true
	@sleep 2
	@echo "$(BLUE)üöÄ –°—Ç–≤–æ—Ä—é—é —Ç—É–Ω–µ–ª—å ngrok...$(NC)"
	@cd "$(SCRIPT_DIR)" && nohup ngrok http $(PORT) --log=stdout > ngrok.log 2>&1 & echo $$! > ngrok.pid
	@sleep 4
	@if curl -s http://127.0.0.1:4040/api/tunnels > /dev/null 2>&1; then \
		url=$$(curl -s http://127.0.0.1:4040/api/tunnels | python3 -c "import json,sys; data=json.load(sys.stdin); print(data['tunnels'][0]['public_url']) if data['tunnels'] else print('')" 2>/dev/null); \
		if [ -n "$$url" ]; then \
			echo "$(GREEN)‚úÖ Ngrok –∑–∞–ø—É—â–µ–Ω–æ!$(NC)"; \
			echo "$(BLUE)üåê –ü—É–±–ª—ñ—á–Ω–∏–π URL: $$url$(NC)"; \
			echo "$(BLUE)üîó API: $$url/v1/chat/completions$(NC)"; \
			echo "$(BLUE)üîä TTS: $$url/tts?text=–ø—Ä–∏–≤—ñ—Ç$(NC)"; \
		fi; \
	fi
	@echo ""
	@echo "$(GREEN)üîç –ü–µ—Ä–µ—Ö–æ–¥–∂—É –≤ —Ä–µ–∂–∏–º –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–ø–∏—Ç—ñ–≤ (Ctrl+C –¥–ª—è –≤–∏—Ö–æ–¥—É):$(NC)"
	@echo "$(YELLOW)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(NC)"
	@echo ""
	@trap 'echo "$(YELLOW)üõë –ó–∞–≤–µ—Ä—à—É—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥...$(NC)"; exit 0' INT; \
	if [ -f "$(LOG_FILE)" ]; then \
		tail -f "$(LOG_FILE)"; \
	else \
		echo "$(YELLOW)‚è≥ –û—á—ñ–∫—É—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–≥—É server.log...$(NC)"; \
		while [ ! -f "$(LOG_FILE)" ]; do sleep 1; done; \
		tail -f "$(LOG_FILE)"; \
	fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
status:
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É $(PORT):$(NC)"
	@if lsof -i :$(PORT) >/dev/null 2>&1; then \
		echo "$(GREEN)‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î$(NC)"; \
		if [ -f "$(PID_FILE)" ]; then \
			echo "üìã PID: $$(cat $(PID_FILE))"; \
		fi; \
		if curl -fsS --max-time 3 "http://127.0.0.1:$(PORT)$(HEALTH_PATH)" >/dev/null 2>&1; then \
			echo "$(GREEN)‚úÖ Health check OK$(NC)"; \
		else \
			echo "$(YELLOW)‚ö†Ô∏è  Health check failed$(NC)"; \
		fi; \
	else \
		echo "$(RED)‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∞—Ü—é—î$(NC)"; \
	fi

# –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏
logs:
	@if [ -f "$(LOG_FILE)" ]; then \
		echo "$(BLUE)üìã –û—Å—Ç–∞–Ω–Ω—ñ 20 —Ä—è–¥–∫—ñ–≤ –ª–æ–≥—É:$(NC)"; \
		tail -n 20 "$(LOG_FILE)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $(LOG_FILE)$(NC)"; \
	fi

# –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç API
test:
	@echo "$(BLUE)üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API...$(NC)"
	@curl -X POST "http://127.0.0.1:$(PORT)/v1/chat/completions" \
		-H 'Content-Type: application/json' \
		-d '{"messages":[{"role":"user","content":"–ü—Ä–∏–≤—ñ—Ç! –¢–µ—Å—Ç —á–∞—Ç—É –∑ —É—Å—ñ–º–∞ –º–æ–¥–µ–ª—è–º–∏."}], "model":"gpt-4o-mini"}' \
		-w "\n$(GREEN)‚úÖ –¢–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π!$(NC)\n" || \
		echo "$(RED)‚ùå –¢–µ—Å—Ç –Ω–µ –≤–¥–∞–≤—Å—è$(NC)"

# –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π
models:
	@echo "$(BLUE)ü§ñ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö AI –º–æ–¥–µ–ª–µ–π:$(NC)"
	@curl -s -X GET "http://127.0.0.1:$(PORT)/v1/models" \
		-H "Authorization: Bearer sk-test" | \
		python3 -c "import json,sys; data=json.load(sys.stdin); [print(f\"  {m['owned_by'].upper()}: {m['id']}\") for m in data['data']]" 2>/dev/null || \
		echo "$(YELLOW)‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ß–∏ –∑–∞–ø—É—â–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä?$(NC)"

# –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–µ–ª—ñ —É JSON —Ñ–æ—Ä–º–∞—Ç—ñ
models-json:
	@echo "$(BLUE)ü§ñ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π (JSON):$(NC)"
	@curl -s -X GET "http://127.0.0.1:$(PORT)/v1/models" \
		-H "Authorization: Bearer dummy-key" | \
		python3 -m json.tool || \
		echo "$(YELLOW)‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ß–∏ –∑–∞–ø—É—â–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä?$(NC)"

# –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π
models-count:
	@echo "$(BLUE)ü§ñ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π:$(NC)"
	@count=$$(curl -s -X GET "http://127.0.0.1:$(PORT)/v1/models" \
		-H "Authorization: Bearer dummy-key" | \
		python3 -c "import json,sys; data=json.load(sys.stdin); print(len(data['data']))" 2>/dev/null); \
	if [ -n "$$count" ]; then \
		echo "$(GREEN)‚úÖ –ó–∞–≥–∞–ª–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ: $$count –º–æ–¥–µ–ª–µ–π$(NC)"; \
		curl -s -X GET "http://127.0.0.1:$(PORT)/v1/models" \
			-H "Authorization: Bearer dummy-key" | \
			python3 -c "import json,sys; data=json.load(sys.stdin); providers={}; [providers.update({m['owned_by']: providers.get(m['owned_by'], 0) + 1}) for m in data['data']]; [print(f\"  üìä {p.upper()}: {c} –º–æ–¥–µ–ª–µ–π\") for p,c in sorted(providers.items())]" 2>/dev/null; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ß–∏ –∑–∞–ø—É—â–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä?$(NC)"; \
	fi

# –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
install:
	@echo "$(BLUE)üîß –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É...$(NC)"
	@if [ ! -d "/usr/local/bin" ]; then \
		echo "$(RED)‚ùå /usr/local/bin –Ω–µ —ñ—Å–Ω—É—î$(NC)"; \
		exit 1; \
	fi
	@echo '#!/usr/bin/env bash' > /tmp/aichat
	@echo 'cd "$(SCRIPT_DIR)" && make chat "$$@"' | sed "s|$(SCRIPT_DIR)|$(SCRIPT_DIR)|" >> /tmp/aichat
	@chmod +x /tmp/aichat
	@sudo mv /tmp/aichat /usr/local/bin/aichat
	@echo "$(GREEN)‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É 'aichat' –∑ –±—É–¥—å-—è–∫–æ—ó –ø–∞–ø–∫–∏$(NC)"

# –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—É –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ OpenAI API
install-openai:
	@echo "$(BLUE)üîß –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ OpenAI API –¥–æ—Å—Ç—É–ø—É...$(NC)"
	@if [ ! -d "/usr/local/bin" ]; then \
		echo "$(RED)‚ùå /usr/local/bin –Ω–µ —ñ—Å–Ω—É—î$(NC)"; \
		exit 1; \
	fi
	@echo '#!/usr/bin/env bash' > /tmp/ai-openai
	@echo 'cd "$(SCRIPT_DIR)" && make openai "$$@"' | sed "s|$(SCRIPT_DIR)|$(SCRIPT_DIR)|" >> /tmp/ai-openai
	@chmod +x /tmp/ai-openai
	@sudo mv /tmp/ai-openai /usr/local/bin/ai-openai
	@echo "$(GREEN)‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É 'ai-openai' –∑ –±—É–¥—å-—è–∫–æ—ó –ø–∞–ø–∫–∏$(NC)"
	@echo "$(BLUE)üìã –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ai-openai$(NC)"
	@echo "$(BLUE)üåê –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–æ–≥–∏–π OpenAI API –Ω–∞ http://127.0.0.1:$(PORT)$(NC)"

# –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—É –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑—É–ø–∏–Ω–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞
install-stop:
	@echo "$(BLUE)üîß –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏ –∑—É–ø–∏–Ω–µ–Ω–Ω—è...$(NC)"
	@if [ ! -d "/usr/local/bin" ]; then \
		echo "$(RED)‚ùå /usr/local/bin –Ω–µ —ñ—Å–Ω—É—î$(NC)"; \
		exit 1; \
	fi
	@echo '#!/usr/bin/env bash' > /tmp/ai-stop
	@echo 'cd "$(SCRIPT_DIR)" && make stop "$$@"' | sed "s|$(SCRIPT_DIR)|$(SCRIPT_DIR)|" >> /tmp/ai-stop
	@chmod +x /tmp/ai-stop
	@sudo mv /tmp/ai-stop /usr/local/bin/ai-stop
	@echo "$(GREEN)‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É 'ai-stop' –∑ –±—É–¥—å-—è–∫–æ—ó –ø–∞–ø–∫–∏$(NC)"

# –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
install-all: install install-openai install-stop
	@echo "$(GREEN)‚úÖ –£—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:$(NC)"
	@echo "  $(BLUE)üé® aichat$(NC) - –ø–æ–≤–Ω–∏–π —á–∞—Ç –∑ TTS —Ç–∞ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"
	@echo "  $(BLUE)ü§ñ ai-openai$(NC) - —Å—Ç—Ä–æ–≥–∏–π OpenAI API –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤"
	@echo "  $(BLUE)üõë ai-stop$(NC) - –∑—É–ø–∏–Ω–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞ –∑ –±—É–¥—å-—è–∫–æ—ó –ø–∞–ø–∫–∏"
	@echo "$(BLUE)üí° –ü—Ä–∏–∫–ª–∞–¥–∏:$(NC)"
	@echo "  aichat            # –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç—É 3010"
	@echo "  aichat PORT=3011  # –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç—É 3011"

# –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
clean:
	@echo "$(BLUE)üßπ –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤...$(NC)"
	@rm -f "$(LOG_FILE)" "$(PID_FILE)"
	@echo "$(GREEN)‚úÖ –û—á–∏—â–µ–Ω–æ$(NC)"

# –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É
help:
	@echo "$(BLUE)ü§ñ AI Chat Server - –ü—Ä–æ—Å—Ç–∏–π —á–∞—Ç –∑ 24 AI –º–æ–¥–µ–ª—è–º–∏$(NC)"
	@echo ""
	@echo "$(YELLOW)–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:$(NC)"
	@echo "  make chat          –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —á–∞—Ç —Å–µ—Ä–≤–µ—Ä (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ—Ä—Ç 3010)"
	@echo "  make chat PORT=N   –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–∞ –≤–∫–∞–∑–∞–Ω–æ–º—É –ø–æ—Ä—Ç—É"
	@echo "  make openai        –°—Ç—Ä–æ–≥–∏–π OpenAI API (–±–µ–∑ TTS —Ç–∞ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É)"
	@echo "  make stop          –ó—É–ø–∏–Ω–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä"
	@echo "  make restart       –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä"
	@echo "  make status        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"
	@echo "  make logs          –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞"
	@echo "  make test          –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç API"
	@echo "  make models        –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö AI –º–æ–¥–µ–ª–µ–π"
	@echo "  make models-json   –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–µ–ª—ñ —É JSON —Ñ–æ—Ä–º–∞—Ç—ñ"
	@echo "  make models-count  –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–¥–µ–ª–µ–π –∑–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏"
	@echo "  make install       –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ 'aichat' –≥–ª–æ–±–∞–ª—å–Ω–æ"
	@echo "  make install-openai –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ 'ai-openai' –≥–ª–æ–±–∞–ª—å–Ω–æ"
	@echo "  make install-all   –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –æ–±–∏–¥–≤—ñ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏"
	@echo "  make clean         –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏"
	@echo "  make watchdog      –ó–∞–ø—É—Å—Ç–∏—Ç–∏ watchdog –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
	@echo "  make help          –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É"
	@echo ""
	@echo "$(YELLOW)–†–µ–∂–∏–º–∏ —Ä–æ–±–æ—Ç–∏:$(NC)"
	@echo "  üåê chat    - –ü–æ–≤–Ω–æ—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –∑ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Ç–∞ TTS"
	@echo "  ü§ñ openai  - –¢—ñ–ª—å–∫–∏ OpenAI API endpoints (/v1/models, /v1/chat/completions)"
	@echo ""
	@echo "$(YELLOW)–ì–ª–æ–±–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ (–ø—ñ—Å–ª—è install):$(NC)"
	@echo "  aichat       - –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —á–∞—Ç—É –∑ –±—É–¥—å-—è–∫–æ—ó –ø–∞–ø–∫–∏"
	@echo "  ai-openai    - –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–æ–≥–æ–≥–æ OpenAI API –∑ –±—É–¥—å-—è–∫–æ—ó –ø–∞–ø–∫–∏"  
	@echo "  ai-stop      - –ó—É–ø–∏–Ω–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞ –∑ –±—É–¥—å-—è–∫–æ—ó –ø–∞–ø–∫–∏"
	@echo ""
	@echo "$(YELLOW)–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–¥–µ–ª—ñ:$(NC)"
	@echo "  ü§ñ OpenAI: gpt-4o, gpt-4o-mini"
	@echo "  üè¢ Microsoft: phi-3-mini-4k, phi-3-medium-4k"
	@echo "  üìö AI21: jamba-instruct"
	@echo "  üîÑ Cohere: command-r, command-r-plus"
	@echo "  ü¶ô Meta: llama-3.1-405b, llama-3.1-70b, llama-3.1-8b"
	@echo "  üåü Mistral: mistral-large, mistral-nemo, mistral-small"
	@echo ""
	@echo "$(GREEN)üåê –í–µ–± —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://127.0.0.1:$(PORT)$(NC)"

# –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
require-deps:
	@command -v lsof >/dev/null 2>&1 || { echo "$(RED)‚ùå lsof –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ$(NC)"; exit 1; }
	@command -v curl >/dev/null 2>&1 || { echo "$(RED)‚ùå curl –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ$(NC)"; exit 1; }
	@command -v node >/dev/null 2>&1 || { echo "$(RED)‚ùå node –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ$(NC)"; exit 1; }
	@if [ ! -f "$(SCRIPT_DIR)/server.js" ]; then \
		echo "$(RED)‚ùå server.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ $(SCRIPT_DIR)$(NC)"; \
		exit 1; \
	fi
	@if [ ! -f "$(SCRIPT_DIR)/public/simple.html" ]; then \
		echo "$(RED)‚ùå public/simple.html –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ$(NC)"; \
		exit 1; \
	fi

stop-if-running:
	@pids=$$(lsof -t -nP -iTCP:$(PORT) -sTCP:LISTEN 2>/dev/null || true); \
	if [ -n "$$pids" ]; then \
		echo "$(YELLOW)üõë –ó—É–ø–∏–Ω—è—é –ø—Ä–æ—Ü–µ—Å(–∏) –Ω–∞ –ø–æ—Ä—Ç—É $(PORT): $$pids$(NC)"; \
		kill $$pids 2>/dev/null || true; \
		waited=0; \
		while [ $$waited -lt $(MAX_WAIT_KILL) ]; do \
			sleep 1; \
			waited=$$((waited+1)); \
			still=$$(lsof -t -nP -iTCP:$(PORT) -sTCP:LISTEN 2>/dev/null || true); \
			if [ -z "$$still" ]; then \
				break; \
			fi; \
		done; \
		still=$$(lsof -t -nP -iTCP:$(PORT) -sTCP:LISTEN 2>/dev/null || true); \
		if [ -n "$$still" ]; then \
			echo "$(YELLOW)‚ö° –ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: $$still$(NC)"; \
			kill -9 $$still 2>/dev/null || true; \
		fi; \
	fi

start-server:
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É $(PORT)...$(NC)"
	@cd "$(SCRIPT_DIR)" && nohup env PORT="$(PORT)" node server.js >> "$(LOG_FILE)" 2>&1 & echo $$! > "$(PID_FILE)"
	@if [ -f "$(PID_FILE)" ]; then \
		echo "$(GREEN)‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∑ PID $$(cat $(PID_FILE))$(NC)"; \
	fi

# –ó—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ (—Å–µ—Ä–≤–µ—Ä, ngrok, TTS)
stop-all-services:
	@echo "$(YELLOW)üõë –ó—É–ø–∏–Ω—è—é –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏...$(NC)"
	@# –ó—É–ø–∏–Ω—è—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
	@$(MAKE) -s stop-if-running
	@# –ó—É–ø–∏–Ω—è—î–º–æ ngrok
	@ngrok_pids=$$(pgrep -f ngrok 2>/dev/null || true); \
	if [ -n "$$ngrok_pids" ]; then \
		echo "$(YELLOW)üîå –ó—É–ø–∏–Ω—è—é ngrok: $$ngrok_pids$(NC)"; \
		kill $$ngrok_pids 2>/dev/null || true; \
		sleep 2; \
	fi
	@# –ó—É–ø–∏–Ω—è—î–º–æ TTS —Å–µ—Ä–≤—ñ—Å (–ø–æ—Ä—Ç 8080)
	@tts_pids=$$(lsof -t -nP -iTCP:8080 -sTCP:LISTEN 2>/dev/null || true); \
	if [ -n "$$tts_pids" ]; then \
		echo "$(YELLOW)üîä –ó—É–ø–∏–Ω—è—é TTS —Å–µ—Ä–≤—ñ—Å: $$tts_pids$(NC)"; \
		kill $$tts_pids 2>/dev/null || true; \
		sleep 2; \
	fi
	@echo "$(GREEN)‚úÖ –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –∑—É–ø–∏–Ω–µ–Ω–æ$(NC)"

# –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä –≤ —Å—Ç—Ä–æ–≥–æ–º—É OpenAI API —Ä–µ–∂–∏–º—ñ
start-openai-server:
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å—Ç—Ä–æ–≥–∏–π OpenAI API —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É $(PORT)...$(NC)"
	@cd "$(SCRIPT_DIR)" && nohup env PORT="$(PORT)" STRICT_OPENAI_API=1 ENABLE_TTS_PROXY=0 node server.js >> "$(LOG_FILE)" 2>&1 & echo $$! > "$(PID_FILE)"
	@if [ -f "$(PID_FILE)" ]; then \
		echo "$(GREEN)‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∑ PID $$(cat $(PID_FILE)) (—Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º)$(NC)"; \
	fi

wait-health:
	@echo "$(BLUE)üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...$(NC)"
	@attempts=$(MAX_WAIT_HEALTH); \
	health_url="http://127.0.0.1:$(PORT)$(HEALTH_PATH)"; \
	simple_url="http://127.0.0.1:$(PORT)$(SIMPLE_CHAT_PATH)"; \
	models_url="http://127.0.0.1:$(PORT)/v1/models"; \
	for i in $$(seq 1 $$attempts); do \
		if curl -fsS --max-time 3 "$$health_url" >/dev/null 2>&1; then \
			echo "$(GREEN)‚úÖ Health OK$(NC)"; \
			if curl -fsS --max-time 3 "$$simple_url" >/dev/null 2>&1; then \
				echo "$(GREEN)‚úÖ Simple chat OK$(NC)"; \
				echo ""; \
				echo "$(GREEN)üéâ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π!$(NC)"; \
				echo "$(BLUE)üåê –ü—Ä–æ—Å—Ç–∏–π —á–∞—Ç –∑ —É—Å—ñ–º–∞ 24 –º–æ–¥–µ–ª—è–º–∏: http://127.0.0.1:$(PORT)$(NC)"; \
			elif curl -fsS --max-time 3 -H "Authorization: Bearer dummy-key" "$$models_url" >/dev/null 2>&1; then \
				echo "$(GREEN)‚úÖ OpenAI API OK$(NC)"; \
				echo ""; \
				echo "$(GREEN)üéâ –°—Ç—Ä–æ–≥–∏–π OpenAI API —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π!$(NC)"; \
				echo "$(BLUE)ü§ñ –î–æ—Å—Ç—É–ø–Ω—ñ endpoint'–∏:$(NC)"; \
				echo "$(BLUE)  ‚Ä¢ GET  /v1/models$(NC)"; \
				echo "$(BLUE)  ‚Ä¢ POST /v1/chat/completions$(NC)"; \
				echo "$(BLUE)  ‚Ä¢ GET  /health$(NC)"; \
				echo "$(YELLOW)‚ö†Ô∏è   TTS —Ç–∞ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ$(NC)"; \
			else \
				echo "$(GREEN)‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π!$(NC)"; \
			fi; \
			echo "$(BLUE)ü§ñ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ OpenAI, Microsoft, AI21, Cohere, Meta, Mistral$(NC)"; \
			exit 0; \
		fi; \
		if [ $$((i % 5)) -eq 0 ]; then \
			echo "$(YELLOW)‚è≥ –û—á—ñ–∫—É—é –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞... ($$i/$$attempts —Å–ø—Ä–æ–±)$(NC)"; \
		fi; \
		sleep $(HEALTH_DELAY); \
	done; \
	echo "$(RED)‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—ñ—Å–ª—è $$attempts —Å–ø—Ä–æ–±$(NC)"; \
	echo "$(BLUE)üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏: make logs$(NC)"; \
	exit 1

# –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É
.DEFAULT_GOAL := help

watchdog:
	@echo "$(BLUE)üõ°Ô∏è –ó–∞–ø—É—Å–∫ watchdog (–∞–≤—Ç–æ–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è)$(NC)"
	@[ -x "$(SCRIPT_DIR)/watchdog.sh" ] || { echo "$(YELLOW)‚ö†Ô∏è watchdog.sh –Ω–µ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π ‚Äî –¥–æ–¥–∞—é –ø—Ä–∞–≤–∞$(NC)"; chmod +x "$(SCRIPT_DIR)/watchdog.sh"; }
	@nohup "$(SCRIPT_DIR)/watchdog.sh" >/dev/null 2>&1 & echo "$(GREEN)‚úÖ Watchdog –∑–∞–ø—É—â–µ–Ω–æ (PID $$!)$(NC)"
