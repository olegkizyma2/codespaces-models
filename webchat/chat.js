// AI Chat –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º OpenAI SDK
class AIChat {
    constructor() {
        this.apiUrl = 'https://8a42c760f69d.ngrok-free.app/v1';
        this.conversationHistory = [];
        this.currentModel = 'microsoft/phi-3-mini-4k-instruct';
        
        this.initializeElements();
        this.attachEventListeners();
        this.setupTextareaAutoResize();
    }

    initializeElements() {
        this.chatMessages = document.getElementById('chatMessages');
        this.messageInput = document.getElementById('messageInput');
        this.sendButton = document.getElementById('sendButton');
        this.modelSelect = document.getElementById('modelSelect');
        this.typingIndicator = document.getElementById('typingIndicator');
    }

    attachEventListeners() {
        this.sendButton.addEventListener('click', () => this.sendMessage());
        
        this.messageInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });

        this.modelSelect.addEventListener('change', (e) => {
            this.currentModel = e.target.value;
            this.showMessage('system', `üîÑ –ú–æ–¥–µ–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${e.target.options[e.target.selectedIndex].text}`);
        });
    }

    setupTextareaAutoResize() {
        this.messageInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 120) + 'px';
        });
    }

    async sendMessage() {
        const message = this.messageInput.value.trim();
        if (!message || this.sendButton.disabled) return;

        // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        this.showMessage('user', message);
        this.messageInput.value = '';
        this.messageInput.style.height = '50px';
        
        // –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.sendButton.disabled = true;
        this.showTypingIndicator();

        try {
            // –î–æ–¥–∞—Ç–∏ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏
            this.conversationHistory.push({
                role: 'user',
                content: message
            });

            // –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –¥–æ API
            const response = await this.callAPI();
            
            if (response.choices && response.choices[0]) {
                const assistantMessage = response.choices[0].message.content;
                
                // –î–æ–¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
                this.conversationHistory.push({
                    role: 'assistant',
                    content: assistantMessage
                });

                // –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
                this.showMessage('assistant', assistantMessage, response.usage);
            } else {
                throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API');
            }

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞:', error);
            this.showError(`–ü–æ–º–∏–ª–∫–∞: ${error.message}`);
            
            // –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            if (this.conversationHistory.length > 0) {
                this.conversationHistory.pop();
            }
        } finally {
            this.hideTypingIndicator();
            this.sendButton.disabled = false;
            this.messageInput.focus();
        }
    }

    async callAPI() {
        const requestBody = {
            model: this.currentModel,
            messages: [
                {
                    role: 'system',
                    content: '–í–∏ –∫–æ—Ä–∏—Å–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ë—É–¥—å—Ç–µ –¥—Ä—É–∂–Ω—ñ–º–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º–∏.'
                },
                ...this.conversationHistory.slice(-10) // –û—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            ],
            temperature: 0.7,
            max_tokens: 1000
        };

        let response;
        try {
            response = await fetch(`${this.apiUrl}/chat/completions`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer dummy-key'
                },
                body: JSON.stringify(requestBody)
            });
        } catch (networkErr) {
            // –¢–∏–ø–æ–≤–∞ –º–µ—Ä–µ–∂–Ω–∞ –ø–æ–º–∏–ª–∫–∞ fetch (TypeError)
            const msg = networkErr?.message || String(networkErr) || 'Network error';
            throw new Error(`Network error: ${msg}`);
        }

        const status = response.status;
        const statusText = response.statusText || '';
        let rawText = '';
        let parsed;
        if (!response.ok) {
            try {
                // –°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –ø–æ–º–∏–ª–∫–∏
                parsed = await response.json();
            } catch (_) {
                // –Ø–∫—â–æ —Ü–µ –Ω–µ JSON, —á–∏—Ç–∞—î–º–æ —è–∫ —Ç–µ–∫—Å—Ç
                try { rawText = await response.text(); } catch (_) { rawText = ''; }
            }

            const serverMsg = parsed?.error?.message || parsed?.message || rawText || 'Unknown server error';
            // –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ–≤–≥—ñ —Ç—ñ–ª–∞, —â–æ–± –Ω–µ –ª–∞–º–∞—Ç–∏ UI
            const snippet = (serverMsg || '').toString().slice(0, 500);
            throw new Error(`HTTP ${status} ${statusText}: ${snippet}`);
        }

        // OK –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è JSON, –∑ —Ñ–æ–ª–±–µ–∫–æ–º –Ω–∞ —Ç–µ–∫—Å—Ç
        try {
            parsed = await response.json();
        } catch (e) {
            try { rawText = await response.text(); } catch (_) { rawText = ''; }
            throw new Error(`Invalid JSON from API. HTTP ${status}. Body: ${rawText.slice(0, 500)}`);
        }

        return parsed;
    }

    showMessage(role, content, usage = null) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${role}`;

        if (role === 'system') {
            messageDiv.innerHTML = `
                <div class="message-content" style="background: #ffc107; color: #000; text-align: center; font-style: italic;">
                    ${content}
                </div>
            `;
        } else {
            const avatar = role === 'user' ? 'üë§' : 'ü§ñ';
            let usageInfo = '';
            
            if (usage) {
                usageInfo = `<div style="font-size: 11px; color: #666; margin-top: 8px; opacity: 0.8;">
                    üìä –¢–æ–∫–µ–Ω–∏: ${usage.total_tokens} (${usage.prompt_tokens}+${usage.completion_tokens})
                </div>`;
            }

            // –î–æ–¥–∞—î–º–æ TTS –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
            let ttsButton = '';
            if (role === 'assistant') {
                ttsButton = `
                    <div style="margin-top: 10px; display: flex; gap: 10px; align-items: center;">
                        <button onclick="playTTS('${this.escapeForTTS(content)}', 'anatol')" 
                                style="padding: 5px 12px; background: #4facfe; color: white; border: none; border-radius: 15px; cursor: pointer; font-size: 12px;">
                            üîä –ê–Ω–∞—Ç–æ–ª—å
                        </button>
                        <button onclick="playTTS('${this.escapeForTTS(content)}', 'natalia')" 
                                style="padding: 5px 12px; background: #ff6b9d; color: white; border: none; border-radius: 15px; cursor: pointer; font-size: 12px;">
                            üé§ –ù–∞—Ç–∞–ª—è
                        </button>
                    </div>
                `;
            }

            messageDiv.innerHTML = `
                <div class="message-avatar">${avatar}</div>
                <div class="message-content">
                    ${this.formatMessage(content)}
                    ${usageInfo}
                    ${ttsButton}
                </div>
            `;
        }

        this.chatMessages.appendChild(messageDiv);
        this.scrollToBottom();
    }

    formatMessage(text) {
        if (text == null) return '';
        if (typeof text !== 'string') {
            try { text = JSON.stringify(text, null, 2); } catch (_) { text = String(text); }
        }
        // –ü—Ä–æ—Å—Ç—ñ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
        return text
            .replace(/\n/g, '<br>')
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/`(.*?)`/g, '<code style="background: #f5f5f5; padding: 2px 4px; border-radius: 3px;">$1</code>');
    }

    showTypingIndicator() {
        this.typingIndicator.style.display = 'flex';
        this.scrollToBottom();
    }

    hideTypingIndicator() {
        this.typingIndicator.style.display = 'none';
    }

    showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.textContent = message;
        
        this.chatMessages.appendChild(errorDiv);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (errorDiv.parentNode) {
                errorDiv.parentNode.removeChild(errorDiv);
            }
        }, 5000);
        
        this.scrollToBottom();
    }

    scrollToBottom() {
        setTimeout(() => {
            this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
        }, 100);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏
    clearHistory() {
        this.conversationHistory = [];
        this.chatMessages.innerHTML = `
            <div class="message assistant">
                <div class="message-avatar">ü§ñ</div>
                <div class="message-content">
                    –Ü—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏ –æ—á–∏—â–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É —Ä–æ–∑–º–æ–≤—É! üòä
                </div>
            </div>
        `;
    }

    escapeForTTS(text) {
        // –û—á–∏—â—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ TTS
        return text
            .replace(/'/g, "\\'")
            .replace(/"/g, '\\"')
            .replace(/\n/g, ' ')
            .replace(/[<>]/g, '')
            .substring(0, 200); // –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
    async testConnection() {
        try {
            const response = await fetch(`${this.apiUrl}/models`, {
                headers: {
                    'Authorization': 'Bearer dummy-key'
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                this.showMessage('system', `‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω–æ ${data.data.length} –º–æ–¥–µ–ª–µ–π.`);
                return true;
            } else {
                throw new Error(`HTTP ${response.status}`);
            }
        } catch (error) {
            this.showError(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: ${error.message}`);
            return false;
        }
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —á–∞—Ç—É –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
let chat;
document.addEventListener('DOMContentLoaded', () => {
    chat = new AIChat();
    
    // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    setTimeout(() => {
        chat.testConnection();
    }, 1000);
});

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ –±—Ä–∞—É–∑–µ—Ä–∞
window.clearChat = () => chat && chat.clearHistory();
window.testAPI = () => chat && chat.testConnection();

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è TTS
window.playTTS = async function(text, voice = 'anatol') {
    try {
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç —É —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—é –¥–ª—è –∫—Ä–∞—â–æ—ó –æ–∑–≤—É—á–∫–∏
    const transliterated = transliterateUkrainian(text);
    const base = `${location.protocol}//${location.host}`;
    const u = new URL('/tts', base);
    u.searchParams.set('text', transliterated);
    if (voice) u.searchParams.set('voice', voice);

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∞—É–¥—ñ–æ –µ–ª–µ–º–µ–Ω—Ç
    const audio = new Audio(u.toString());
        
        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        const button = event.target;
        const originalText = button.textContent;
        button.disabled = true;
        button.textContent = '‚è≥';
        
        audio.oncanplay = () => {
            button.textContent = 'üîä';
            audio.play();
        };
        
        audio.onended = () => {
            button.textContent = originalText;
            button.disabled = false;
        };
        
        audio.onerror = () => {
            button.textContent = '‚ùå';
            setTimeout(() => {
                button.textContent = originalText;
                button.disabled = false;
            }, 2000);
            console.error('–ü–æ–º–∏–ª–∫–∞ TTS:', audio.error);
        };
        
    } catch (error) {
        console.error('TTS Error:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ TTS: ' + error.message);
    }
};

// –§—É–Ω–∫—Ü—ñ—è —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É
function transliterateUkrainian(text) {
    const ukrainianMap = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'h', '“ë': 'g', '–¥': 'd', '–µ': 'e', '—î': 'ye',
        '–∂': 'zh', '–∑': 'z', '–∏': 'y', '—ñ': 'i', '—ó': 'yi', '–π': 'y', '–∫': 'k', '–ª': 'l',
        '–º': 'm', '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'shch', '—é': 'yu',
        '—è': 'ya', '—å': '', "'": '',
        
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'H', '“ê': 'G', '–î': 'D', '–ï': 'E', '–Ñ': 'Ye',
        '–ñ': 'Zh', '–ó': 'Z', '–ò': 'Y', '–Ü': 'I', '–á': 'Yi', '–ô': 'Y', '–ö': 'K', '–õ': 'L',
        '–ú': 'M', '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
        '–§': 'F', '–•': 'Kh', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Shch', '–Æ': 'Yu',
        '–Ø': 'Ya'
    };
    
    return text.split('').map(char => ukrainianMap[char] || char).join('');
}
