#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ—Å—Ç—ñ —Ç–∞ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —è–∫ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–æ–±–ª—è—î –ø–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏
 */

import fetch from 'node-fetch';
import { performance } from 'perf_hooks';

const BASE_URL = process.env.BASE_URL || 'http://localhost:3010';
const TEST_MODEL = process.env.TEST_MODEL || 'openai/gpt-4o-mini';

class ConcurrencyTester {
  constructor() {
    this.results = [];
    this.errors = [];
    this.metrics = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      averageResponseTime: 0,
      minResponseTime: Infinity,
      maxResponseTime: 0,
      concurrentRequestsHandled: 0
    };
  }

  async makeRequest(endpoint, body, id) {
    const startTime = performance.now();
    const requestInfo = {
      id,
      endpoint,
      startTime,
      endTime: null,
      duration: null,
      status: null,
      success: false,
      error: null,
      responseSize: 0
    };

    try {
      console.log(`üì° [${id}] –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–ø–∏—Ç –¥–æ ${endpoint}`);
      
      const response = await fetch(`${BASE_URL}${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer dummy-key'
        },
        body: JSON.stringify(body)
      });

      const endTime = performance.now();
      const responseText = await response.text();
      
      requestInfo.endTime = endTime;
      requestInfo.duration = endTime - startTime;
      requestInfo.status = response.status;
      requestInfo.success = response.ok;
      requestInfo.responseSize = responseText.length;

      if (!response.ok) {
        requestInfo.error = `HTTP ${response.status}: ${responseText}`;
        this.errors.push(requestInfo);
      } else {
        try {
          const jsonResponse = JSON.parse(responseText);
          requestInfo.tokens = jsonResponse.usage?.total_tokens || 0;
        } catch (e) {
          // Response –Ω–µ JSON, —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –¥–µ—è–∫–∏—Ö endpoint'—ñ–≤
        }
      }

      console.log(`‚úÖ [${id}] –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞ –∑–∞ ${requestInfo.duration.toFixed(2)}ms (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
      
    } catch (error) {
      const endTime = performance.now();
      requestInfo.endTime = endTime;
      requestInfo.duration = endTime - startTime;
      requestInfo.error = error.message;
      requestInfo.success = false;
      
      console.log(`‚ùå [${id}] –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
      this.errors.push(requestInfo);
    }

    this.results.push(requestInfo);
    return requestInfo;
  }

  async testSimpleConcurrency() {
    console.log('\\nüî• –¢–ï–°–¢ 1: –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –æ–¥–Ω–æ—á–∞—Å–Ω–æ—Å—Ç—ñ (3 –ø–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏)');
    console.log('='.repeat(60));

    const requests = [
      this.makeRequest('/v1/simple-chat', {
        model: TEST_MODEL,
        message: '–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?'
      }, 'REQ-1'),
      
      this.makeRequest('/v1/simple-chat', {
        model: TEST_MODEL,
        message: '–†–æ–∑–∫–∞–∂–∏ –º–µ–Ω—ñ –ø—Ä–æ Node.js'
      }, 'REQ-2'),
      
      this.makeRequest('/v1/simple-chat', {
        model: TEST_MODEL,
        message: '–©–æ —Ç–∞–∫–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å?'
      }, 'REQ-3')
    ];

    const results = await Promise.allSettled(requests);
    return this.analyzeResults(results, 'Simple Concurrency');
  }

  async testOpenAIConcurrency() {
    console.log('\\nüî• –¢–ï–°–¢ 2: OpenAI API –æ–¥–Ω–æ—á–∞—Å–Ω—ñ—Å—Ç—å (5 –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤)');
    console.log('='.repeat(60));

    const requests = [];
    for (let i = 1; i <= 5; i++) {
      requests.push(
        this.makeRequest('/v1/chat/completions', {
          model: TEST_MODEL,
          messages: [
            { role: 'system', content: 'You are a helpful assistant.' },
            { role: 'user', content: `–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–æ–º–µ—Ä ${i}. –î–∞–π –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.` }
          ],
          max_tokens: 50,
          temperature: 0.7
        }, `OPENAI-${i}`)
      );
    }

    const results = await Promise.allSettled(requests);
    return this.analyzeResults(results, 'OpenAI Concurrency');
  }

  async testMixedEndpoints() {
    console.log('\\nüî• –¢–ï–°–¢ 3: –ó–º—ñ—à–∞–Ω—ñ endpoints (—Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –∑–∞–ø–∏—Ç—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ)');
    console.log('='.repeat(60));

    const requests = [
      // Health check
      this.makeRequest('/health', {}, 'HEALTH'),
      
      // Models list
      fetch(`${BASE_URL}/v1/models`).then(async (res) => ({
        id: 'MODELS',
        success: res.ok,
        status: res.status,
        duration: 0, // –°–ø—Ä–æ—â–µ–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É
        responseSize: (await res.text()).length
      })),
      
      // Simple chat
      this.makeRequest('/v1/simple-chat', {
        model: TEST_MODEL,
        message: '–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ –ø–æ–≥–æ–¥—É'
      }, 'CHAT-1'),
      
      // OpenAI completions
      this.makeRequest('/v1/chat/completions', {
        model: TEST_MODEL,
        messages: [{ role: 'user', content: '–ü—Ä–∏–≤—ñ—Ç' }],
        max_tokens: 20
      }, 'OPENAI-1'),
      
      // Test model
      this.makeRequest('/v1/test-model', {
        model: TEST_MODEL
      }, 'TEST-MODEL')
    ];

    const results = await Promise.allSettled(requests);
    return this.analyzeResults(results, 'Mixed Endpoints');
  }

  async testHighLoad() {
    console.log('\\nüî• –¢–ï–°–¢ 4: –í–∏—Å–æ–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (10 –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤)');
    console.log('='.repeat(60));

    const requests = [];
    for (let i = 1; i <= 10; i++) {
      requests.push(
        this.makeRequest('/v1/simple-chat', {
          model: TEST_MODEL,
          message: `–ó–∞–ø–∏—Ç ‚Ññ${i} - –¥–∞–π –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (1-2 —Å–ª–æ–≤–∞)`
        }, `LOAD-${i}`)
      );
    }

    const startTime = performance.now();
    const results = await Promise.allSettled(requests);
    const totalTime = performance.now() - startTime;

    console.log(`‚è±Ô∏è  –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è 10 –∑–∞–ø–∏—Ç—ñ–≤: ${totalTime.toFixed(2)}ms`);
    
    return this.analyzeResults(results, 'High Load', { totalTime });
  }

  async testSequentialVsParallel() {
    console.log('\\nüî• –¢–ï–°–¢ 5: –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π vs –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π (–ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ)');
    console.log('='.repeat(60));

    const testMessage = '–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ JavaScript';
    
    // –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    console.log('üìä –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è 3 –∑–∞–ø–∏—Ç—ñ–≤...');
    const sequentialStart = performance.now();
    
    await this.makeRequest('/v1/simple-chat', { model: TEST_MODEL, message: testMessage }, 'SEQ-1');
    await this.makeRequest('/v1/simple-chat', { model: TEST_MODEL, message: testMessage }, 'SEQ-2');
    await this.makeRequest('/v1/simple-chat', { model: TEST_MODEL, message: testMessage }, 'SEQ-3');
    
    const sequentialTime = performance.now() - sequentialStart;
    
    // –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    console.log('üìä –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è 3 –∑–∞–ø–∏—Ç—ñ–≤...');
    const parallelStart = performance.now();
    
    await Promise.all([
      this.makeRequest('/v1/simple-chat', { model: TEST_MODEL, message: testMessage }, 'PAR-1'),
      this.makeRequest('/v1/simple-chat', { model: TEST_MODEL, message: testMessage }, 'PAR-2'),
      this.makeRequest('/v1/simple-chat', { model: TEST_MODEL, message: testMessage }, 'PAR-3')
    ]);
    
    const parallelTime = performance.now() - parallelStart;
    
    console.log(`\\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø:`);
    console.log(`   –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–æ: ${sequentialTime.toFixed(2)}ms`);
    console.log(`   –ü–∞—Ä–∞–ª–µ–ª—å–Ω–æ: ${parallelTime.toFixed(2)}ms`);
    console.log(`   –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è: ${(sequentialTime / parallelTime).toFixed(2)}x`);
    
    return {
      sequential: sequentialTime,
      parallel: parallelTime,
      speedup: sequentialTime / parallelTime
    };
  }

  analyzeResults(results, testName, additionalInfo = {}) {
    const successful = this.results.filter(r => r.success);
    const failed = this.results.filter(r => !r.success);
    
    if (successful.length > 0) {
      const durations = successful.map(r => r.duration);
      this.metrics.averageResponseTime = durations.reduce((a, b) => a + b) / durations.length;
      this.metrics.minResponseTime = Math.min(...durations);
      this.metrics.maxResponseTime = Math.max(...durations);
    }
    
    this.metrics.totalRequests = this.results.length;
    this.metrics.successfulRequests = successful.length;
    this.metrics.failedRequests = failed.length;

    console.log(`\\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£: ${testName}`);
    console.log(`   ‚úÖ –£—Å–ø—ñ—à–Ω—ñ –∑–∞–ø–∏—Ç–∏: ${successful.length}/${this.results.length}`);
    console.log(`   ‚ùå –ù–µ–≤–¥–∞–ª—ñ –∑–∞–ø–∏—Ç–∏: ${failed.length}`);
    
    if (successful.length > 0) {
      console.log(`   ‚è±Ô∏è  –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${this.metrics.averageResponseTime.toFixed(2)}ms`);
      console.log(`   ‚ö° –ù–∞–π—à–≤–∏–¥—à–∏–π: ${this.metrics.minResponseTime.toFixed(2)}ms`);
      console.log(`   üêå –ù–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π: ${this.metrics.maxResponseTime.toFixed(2)}ms`);
    }
    
    if (failed.length > 0) {
      console.log(`\\n‚ùå –ü–û–ú–ò–õ–ö–ò:`);
      failed.forEach(f => {
        console.log(`   [${f.id}] ${f.error}`);
      });
    }

    if (additionalInfo.totalTime) {
      console.log(`   üïê –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: ${additionalInfo.totalTime.toFixed(2)}ms`);
    }

    // –û—á–∏—â—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
    const testResults = [...this.results];
    this.results = [];
    
    return {
      testName,
      successful: successful.length,
      failed: failed.length,
      total: testResults.length,
      metrics: { ...this.metrics },
      additionalInfo
    };
  }

  async checkServerHealth() {
    console.log('üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞...');
    
    try {
      const response = await fetch(`${BASE_URL}/health`);
      const data = await response.json();
      
      if (response.ok) {
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î (${data.status}) - ${data.models} –º–æ–¥–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ`);
        return true;
      } else {
        console.log(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: ${response.status}`);
        return false;
      }
    } catch (error) {
      console.log(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
      console.log(`   –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ ${BASE_URL}`);
      return false;
    }
  }

  async runAllTests() {
    console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–Ü–í –û–î–ù–û–ß–ê–°–ù–û–°–¢–Ü –¢–ê –ù–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø');
    console.log('='.repeat(80));
    console.log(`üìç –ë–∞–∑–æ–≤–∏–π URL: ${BASE_URL}`);
    console.log(`ü§ñ –¢–µ—Å—Ç–æ–≤–∞ –º–æ–¥–µ–ª—å: ${TEST_MODEL}`);
    console.log('='.repeat(80));

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
    const isHealthy = await this.checkServerHealth();
    if (!isHealthy) {
      console.log('\\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤.');
      process.exit(1);
    }

    const allResults = [];

    try {
      // –ó–∞–ø—É—Å–∫ —É—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
      allResults.push(await this.testSimpleConcurrency());
      allResults.push(await this.testOpenAIConcurrency());
      allResults.push(await this.testMixedEndpoints());
      allResults.push(await this.testHighLoad());
      
      const performanceComparison = await this.testSequentialVsParallel();

      // –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç
      console.log('\\n' + '='.repeat(80));
      console.log('üìã –ü–Ü–î–°–£–ú–ö–û–í–ò–ô –ó–í–Ü–¢');
      console.log('='.repeat(80));

      allResults.forEach(result => {
        const successRate = ((result.successful / result.total) * 100).toFixed(1);
        console.log(`üìä ${result.testName}:`);
        console.log(`   –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${successRate}% (${result.successful}/${result.total})`);
        if (result.metrics.averageResponseTime > 0) {
          console.log(`   –°–µ—Ä. —á–∞—Å: ${result.metrics.averageResponseTime.toFixed(2)}ms`);
        }
        console.log('');
      });

      console.log(`üèÉ –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø—Ä–∞—Ü—é—î –≤ ${performanceComparison.speedup.toFixed(2)}x —à–≤–∏–¥—à–µ`);

      // –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Å–Ω–æ–≤–∫–∏
      const totalRequests = allResults.reduce((sum, r) => sum + r.total, 0);
      const totalSuccessful = allResults.reduce((sum, r) => sum + r.successful, 0);
      const overallSuccessRate = ((totalSuccessful / totalRequests) * 100).toFixed(1);

      console.log('\\nüéØ –ó–ê–ì–ê–õ–¨–ù–Ü –í–ò–°–ù–û–í–ö–ò:');
      console.log(`   üìà –ó–∞–≥–∞–ª—å–Ω–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${overallSuccessRate}% (${totalSuccessful}/${totalRequests})`);
      
      if (overallSuccessRate >= 95) {
        console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤—ñ–¥–º—ñ–Ω–Ω–æ —Å–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –∑ –æ–¥–Ω–æ—á–∞—Å–Ω–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏');
      } else if (overallSuccessRate >= 80) {
        console.log('   ‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è, –∞–ª–µ —î –º—ñ—Å—Ü–µ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω—å');
      } else {
        console.log('   ‚ùå –°–∏—Å—Ç–µ–º–∞ –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –æ–¥–Ω–æ—á–∞—Å–Ω—ñ—Å—Ç—é, –ø–æ—Ç—Ä—ñ–±–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è');
      }

      if (this.errors.length > 0) {
        console.log(`\\n‚ö†Ô∏è  –í–∏—è–≤–ª–µ–Ω–æ ${this.errors.length} –ø–æ–º–∏–ª–æ–∫. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:`);
        console.log('   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è rate limiting');
        console.log('   ‚Ä¢ –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–µ—Ä–≥–∏ –∑–∞–ø–∏—Ç—ñ–≤');
        console.log('   ‚Ä¢ –û–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫');
      }

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
if (import.meta.url === `file://${process.argv[1]}`) {
  const tester = new ConcurrencyTester();
  tester.runAllTests().catch(console.error);
}

export default ConcurrencyTester;
