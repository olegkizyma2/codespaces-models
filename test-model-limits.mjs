#!/usr/bin/env node

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ –ª—ñ–º—ñ—Ç–∞–º–∏ –º–æ–¥–µ–ª–µ–π
 * –ü–æ–∫–∞–∑—É—î —è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ rate limits —Ç–∞ token limits
 */

import OpenAI from 'openai';

const API_BASE_URL = 'http://localhost:3010/v1';
const client = new OpenAI({
  apiKey: 'dummy-key',
  baseURL: API_BASE_URL,
});

// –¢–µ—Å—Ç —Ä—ñ–∑–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π –∑ —ó—Ö –ª—ñ–º—ñ—Ç–∞–º–∏
const MODEL_TESTS = [
  {
    name: 'gpt-4o-mini',
    description: '–®–≤–∏–¥–∫–∞ –º–æ–¥–µ–ª—å (128K –∫–æ–Ω—Ç–µ–∫—Å—Ç)',
    maxTokens: 1000,
    expectedSpeed: '–î—É–∂–µ —à–≤–∏–¥–∫–æ'
  },
  {
    name: 'Meta-Llama-3.1-405B-Instruct',
    description: '–ù–∞–π–±—ñ–ª—å—à–∞ –º–æ–¥–µ–ª—å (128K –∫–æ–Ω—Ç–µ–∫—Å—Ç)',
    maxTokens: 500, // –ú–µ–Ω—à–µ —Ç–æ–∫–µ–Ω—ñ–≤ —á–µ—Ä–µ–∑ –ª—ñ–º—ñ—Ç–∏
    expectedSpeed: '–ü–æ–≤—ñ–ª—å–Ω–æ'
  },
  {
    name: 'Phi-3-mini-4k-instruct',
    description: '–ï–∫–æ–Ω–æ–º–Ω–∞ –º–æ–¥–µ–ª—å (4K –∫–æ–Ω—Ç–µ–∫—Å—Ç)',
    maxTokens: 800,
    expectedSpeed: '–®–≤–∏–¥–∫–æ'
  },
  {
    name: 'AI21-Jamba-1.5-Large',
    description: '–ù–∞–π–¥–æ–≤—à–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (256K —Ç–æ–∫–µ–Ω—ñ–≤)',
    maxTokens: 1000,
    expectedSpeed: '–ü–æ–≤—ñ–ª—å–Ω–æ'
  },
  {
    name: 'microsoft/Phi-3.5-vision-instruct',
    description: 'Vision –º–æ–¥–µ–ª—å (128K + –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)',
    maxTokens: 600,
    expectedSpeed: '–°–µ—Ä–µ–¥–Ω—å–æ'
  }
];

async function testModelWithLimits(modelConfig) {
  console.log(`\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${modelConfig.name}`);
  console.log(`üìã –û–ø–∏—Å: ${modelConfig.description}`);
  console.log(`‚ö° –û—á—ñ–∫—É–≤–∞–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å: ${modelConfig.expectedSpeed}`);
  
  const startTime = Date.now();
  
  try {
    const response = await client.chat.completions.create({
      model: modelConfig.name,
      messages: [
        {
          role: 'user',
          content: '–ö–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–≤–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è.'
        }
      ],
      max_tokens: modelConfig.maxTokens,
      temperature: 0.7
    });

    const endTime = Date.now();
    const responseTime = endTime - startTime;
    const usage = response.usage;
    
    console.log(`‚úÖ –£—Å–ø—ñ—Ö –∑–∞ ${responseTime}ms`);
    console.log(`üìä –¢–æ–∫–µ–Ω–∏: ${usage.total_tokens} (prompt: ${usage.prompt_tokens}, response: ${usage.completion_tokens})`);
    console.log(`üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${response.choices[0].message.content.substring(0, 100)}...`);
    
    // –ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    const tokensPerSecond = Math.round((usage.total_tokens / responseTime) * 1000);
    console.log(`üöÄ –®–≤–∏–¥–∫—ñ—Å—Ç—å: ${tokensPerSecond} —Ç–æ–∫–µ–Ω—ñ–≤/—Å–µ–∫`);
    
    if (responseTime > 10000) {
      console.log(`‚ö†Ô∏è  –ü–û–í–Ü–õ–¨–ù–ê –ú–û–î–ï–õ–¨: ${Math.round(responseTime/1000)}s - —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∫–µ—à—É–≤–∞–Ω–Ω—è`);
    }
    
    if (usage.total_tokens > 2000) {
      console.log(`‚ö†Ô∏è  –í–ò–°–û–ö–ï –°–ü–û–ñ–ò–í–ê–ù–ù–Ø –¢–û–ö–ï–ù–Ü–í: ${usage.total_tokens} - –æ–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç`);
    }
    
  } catch (error) {
    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    
    if (error.status === 429) {
      console.log(`üö® RATE LIMIT: –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤`);
      console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:`);
      console.log(`   - –î–æ–¥–∞–π—Ç–µ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏`);
      console.log(`   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ exponential backoff`);
      console.log(`   - –í–∏–±–µ—Ä—ñ—Ç—å –º–µ–Ω—à –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—É –º–æ–¥–µ–ª—å`);
    }
    
    if (error.message.includes('context_length')) {
      console.log(`üö® TOKEN LIMIT: –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É`);
      console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:`);
      console.log(`   - –°–∫–æ—Ä–æ—Ç—ñ—Ç—å –ø—Ä–æ–º–ø—Ç`);
      console.log(`   - –†–æ–∑–±–∏–π—Ç–µ –Ω–∞ –º–µ–Ω—à—ñ —á–∞—Å—Ç–∏–Ω–∏`);
      console.log(`   - –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –∑ –±—ñ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º`);
    }
  }
}

async function testRateLimits() {
  console.log('\nüîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è rate limits...');
  
  const quickModel = 'gpt-4o-mini';
  const slowModel = 'Meta-Llama-3.1-405B-Instruct';
  
  console.log(`\n‚ö° –®–≤–∏–¥–∫—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ ${quickModel}:`);
  for (let i = 1; i <= 5; i++) {
    try {
      const start = Date.now();
      await client.chat.completions.create({
        model: quickModel,
        messages: [{role: 'user', content: `–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç ${i}`}],
        max_tokens: 50
      });
      const time = Date.now() - start;
      console.log(`   ${i}/5: ${time}ms ‚úÖ`);
    } catch (error) {
      console.log(`   ${i}/5: ${error.message} ‚ùå`);
    }
  }
  
  console.log(`\nüêå –ü–æ–≤—ñ–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ ${slowModel}:`);
  for (let i = 1; i <= 3; i++) {
    try {
      const start = Date.now();
      await client.chat.completions.create({
        model: slowModel,
        messages: [{role: 'user', content: `–ü–æ–≤—ñ–ª—å–Ω–∏–π —Ç–µ—Å—Ç ${i}`}],
        max_tokens: 30
      });
      const time = Date.now() - start;
      console.log(`   ${i}/3: ${time}ms ‚úÖ`);
    } catch (error) {
      console.log(`   ${i}/3: ${error.message} ‚ùå`);
    }
  }
}

async function demonstrateContextLimits() {
  console.log('\nüìñ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...');
  
  // –ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (4K)
  const shortContextModel = 'Phi-3-mini-4k-instruct';
  // –î–æ–≤–≥–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (256K) 
  const longContextModel = 'AI21-Jamba-1.5-Large';
  
  const shortText = '–ö–æ—Ä–æ—Ç—å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç—É.';
  const longText = '–¶–µ –¥—É–∂–µ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç. '.repeat(500); // ~2500 —Ç–æ–∫–µ–Ω—ñ–≤
  
  console.log(`\nüìù –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç (${shortText.length} —Å–∏–º–≤–æ–ª—ñ–≤):`);
  
  // –¢–µ—Å—Ç –∑ –∫–æ—Ä–æ—Ç–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
  try {
    const response = await client.chat.completions.create({
      model: shortContextModel,
      messages: [{role: 'user', content: shortText + ' –ü—Ä–æ–∫–æ–º–µ–Ω—Ç—É–π —Ü–µ–π —Ç–µ–∫—Å—Ç.'}],
      max_tokens: 100
    });
    console.log(`   ${shortContextModel}: ‚úÖ –£—Å–ø—ñ—Ö`);
  } catch (error) {
    console.log(`   ${shortContextModel}: ‚ùå ${error.message}`);
  }
  
  console.log(`\nüìö –î–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç (${longText.length} —Å–∏–º–≤–æ–ª—ñ–≤):`);
  
  // –¢–µ—Å—Ç –∑ –∫–æ—Ä–æ—Ç–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –¥–æ–≤–≥–æ–º—É —Ç–µ–∫—Å—Ç—ñ
  try {
    const response = await client.chat.completions.create({
      model: shortContextModel,
      messages: [{role: 'user', content: longText + ' –ü—Ä–æ–∫–æ–º–µ–Ω—Ç—É–π —Ü–µ–π —Ç–µ–∫—Å—Ç.'}],
      max_tokens: 100
    });
    console.log(`   ${shortContextModel}: ‚úÖ –ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∏–π —É—Å–ø—ñ—Ö`);
  } catch (error) {
    console.log(`   ${shortContextModel}: ‚ùå ${error.message.substring(0, 100)}...`);
  }
  
  // –¢–µ—Å—Ç –∑ –¥–æ–≤–≥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
  try {
    const response = await client.chat.completions.create({
      model: longContextModel,
      messages: [{role: 'user', content: longText + ' –ü—Ä–æ–∫–æ–º–µ–Ω—Ç—É–π —Ü–µ–π —Ç–µ–∫—Å—Ç.'}],
      max_tokens: 100
    });
    console.log(`   ${longContextModel}: ‚úÖ –£—Å–ø—ñ—Ö –∑ –¥–æ–≤–≥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º`);
  } catch (error) {
    console.log(`   ${longContextModel}: ‚ùå ${error.message}`);
  }
}

async function showBestPractices() {
  console.log('\nüí° –ö—Ä–∞—â—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–æ–±–æ—Ç–∏ –∑ –ª—ñ–º—ñ—Ç–∞–º–∏:\n');
  
  console.log('üöÄ –î–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ:');
  console.log('   ‚Ä¢ gpt-4o-mini - –Ω–∞–π—à–≤–∏–¥—à–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö –∑–∞–≤–¥–∞–Ω—å');
  console.log('   ‚Ä¢ Phi-3.5-mini-instruct - –µ–∫–æ–Ω–æ–º–Ω–∞ —Ç–∞ —à–≤–∏–¥–∫–∞');
  console.log('   ‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤–ª—é–π—Ç–µ –Ω–∏–∑—å–∫–∏–π max_tokens –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π\n');
  
  console.log('üß† –î–ª—è —è–∫–æ—Å—Ç—ñ:');
  console.log('   ‚Ä¢ Meta-Llama-3.1-405B-Instruct - –Ω–∞–π–≤–∏—â–∞ —è–∫—ñ—Å—Ç—å');
  console.log('   ‚Ä¢ gpt-4o - —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –ø–æ—Ç—É–∂–Ω–∞ –º–æ–¥–µ–ª—å');
  console.log('   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ temperature=0 –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ\n');
  
  console.log('üìñ –î–ª—è –¥–æ–≤–≥–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤:');
  console.log('   ‚Ä¢ AI21-Jamba-1.5-Large - 256K –∫–æ–Ω—Ç–µ–∫—Å—Ç');
  console.log('   ‚Ä¢ Phi-3-small-128k-instruct - –µ–∫–æ–Ω–æ–º–Ω–∞ 128K');
  console.log('   ‚Ä¢ –†–æ–∑–±–∏–≤–∞–π—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ —è–∫—â–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ\n');
  
  console.log('üí∞ –î–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó:');
  console.log('   ‚Ä¢ Phi-3-mini-4k-instruct - –Ω–∞–π–¥–µ—à–µ–≤—à–∞');
  console.log('   ‚Ä¢ –ö–µ—à—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤');
  console.log('   ‚Ä¢ –û–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç–∏ - –ø—Ä–∏–±–∏—Ä–∞–π—Ç–µ –∑–∞–π–≤—ñ —Å–ª–æ–≤–∞\n');
  
  console.log('‚ö†Ô∏è  –î–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫:');
  console.log('   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ try/catch –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤');
  console.log('   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ error.status === 429 –¥–ª—è rate limits');
  console.log('   ‚Ä¢ –î–æ–¥–∞–≤–∞–π—Ç–µ exponential backoff –ø—Ä–∏ 429');
  console.log('   ‚Ä¢ –õ–æ–≥—É–π—Ç–µ usage –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è\n');
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  console.log('üìä –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –õ–Ü–ú–Ü–¢–Ü–í –¢–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–ô –ú–û–î–ï–õ–ï–ô\n');
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    const health = await fetch(`${API_BASE_URL.replace('/v1', '')}/`);
    const healthData = await health.json();
    
    if (!healthData.ok) {
      throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
    }
    
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î\n');
    
    // –ü–æ–∫–∞–∑–∞—Ç–∏ –∫—Ä–∞—â—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏
    await showBestPractices();
    
    // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
    console.log('üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –†–Ü–ó–ù–ò–• –ú–û–î–ï–õ–ï–ô:\n');
    for (const modelConfig of MODEL_TESTS) {
      await testModelWithLimits(modelConfig);
      await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
    }
    
    // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è rate limits
    await testRateLimits();
    
    // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏—Ö –ª—ñ–º—ñ—Ç—ñ–≤
    await demonstrateContextLimits();
    
    console.log('\n‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìö –î–µ—Ç–∞–ª—å–Ω—ñ –ª—ñ–º—ñ—Ç–∏ –¥–∏–≤—ñ—Ç—å—Å—è —É —Ñ–∞–π–ª—ñ MODEL_LIMITS_RECOMMENDATIONS.md');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
    console.log('\nüí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ: npm start');
  }
}

main();
