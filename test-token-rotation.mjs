#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Ä–æ—Ç–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—ñ–≤
 */

import axios from 'axios';

const BASE_URL = 'http://localhost:4000';

async function testTokenRotation() {
  console.log('üîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ä–æ—Ç–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω—ñ–≤\n');
  
  try {
    // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω—ñ–≤
    console.log('1Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω—ñ–≤...');
    const statsResponse = await axios.get(`${BASE_URL}/v1/tokens/stats`);
    console.log('‚úÖ –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤:');
    console.log(JSON.stringify(statsResponse.data, null, 2));
    console.log('');

    // 2. –¢–µ—Å—Ç –∑–∞–ø–∏—Ç—É –¥–æ API (–º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ 429)
    console.log('2Ô∏è‚É£  –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É...');
    try {
      const chatResponse = await axios.post(`${BASE_URL}/v1/chat/completions`, {
        model: 'gpt-4o-mini',
        messages: [
          { role: 'user', content: 'Say hello in 5 words' }
        ],
        max_tokens: 50
      }, {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ –ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π:', chatResponse.data.choices[0].message.content);
    } catch (error) {
      if (error.response?.status === 429) {
        console.log('‚ö†Ô∏è  –û—Ç—Ä–∏–º–∞–Ω–æ 429 –ø–æ–º–∏–ª–∫—É (–æ—á—ñ–∫—É–≤–∞–Ω–æ)');
        console.log('‚è≥ –ß–µ–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Ä–æ—Ç–∞—Ü—ñ—é —Ç–æ–∫–µ–Ω–∞...');
        await new Promise(resolve => setTimeout(resolve, 5000));
      } else {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.response?.data || error.message);
      }
    }
    console.log('');

    // 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—ñ—Å–ª—è –∑–∞–ø–∏—Ç—É
    console.log('3Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—ñ—Å–ª—è –∑–∞–ø–∏—Ç—É...');
    const statsAfter = await axios.get(`${BASE_URL}/v1/tokens/stats`);
    console.log('üìä –û–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(JSON.stringify(statsAfter.data, null, 2));
    console.log('');

    // 4. –¢–µ—Å—Ç —Ä—É—á–Ω–æ—ó —Ä–æ—Ç–∞—Ü—ñ—ó
    console.log('4Ô∏è‚É£  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—É—á–Ω–æ—ó —Ä–æ—Ç–∞—Ü—ñ—ó...');
    const rotateResponse = await axios.post(`${BASE_URL}/v1/tokens/rotate`);
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É—á–Ω–æ—ó —Ä–æ—Ç–∞—Ü—ñ—ó:', rotateResponse.data);
    console.log('');

    // 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    console.log('5Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...');
    const finalStats = await axios.get(`${BASE_URL}/v1/tokens/stats`);
    console.log('üîë –ê–∫—Ç–∏–≤–Ω–∏–π —Ç–æ–∫–µ–Ω:', finalStats.data.current_token);
    console.log('');

    // 6. –¢–µ—Å—Ç —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('6Ô∏è‚É£  –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω—ñ–≤...');
    const resetResponse = await axios.post(`${BASE_URL}/v1/tokens/reset-stats`);
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', resetResponse.data);
    console.log('');

    console.log('‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
    if (error.response) {
      console.error('–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    }
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
testTokenRotation();
