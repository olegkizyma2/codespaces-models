#!/usr/bin/env node

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —Ç–µ—Å—Ç—É–≤–∞–ª—å–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–∏ –Ω–∞ –æ–¥–Ω–æ—á–∞—Å–Ω—ñ—Å—Ç—å —Ç–∞ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
 * –ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —Ç–∏–ø–∏ —Ç–µ—Å—Ç—ñ–≤ —Ç–∞ –≥–µ–Ω–µ—Ä—É—î –ø–æ–≤–Ω–∏–π –∑–≤—ñ—Ç
 */

import ConcurrencyTester from './test-concurrency.mjs';
import StressTester from './test-stress.mjs';
import fs from 'fs/promises';
import { performance } from 'perf_hooks';

const BASE_URL = process.env.BASE_URL || 'http://localhost:3010';
const REPORT_FILE = 'load-test-report.json';

class LoadTestSuite {
  constructor() {
    this.testResults = {
      timestamp: new Date().toISOString(),
      baseUrl: BASE_URL,
      environment: {
        nodeVersion: process.version,
        platform: process.platform,
        arch: process.arch
      },
      concurrencyTests: {},
      stressTests: {},
      summary: {},
      recommendations: []
    };
  }

  async runConcurrencyTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ—Å—Ç—ñ...');
    const tester = new ConcurrencyTester();
    
    // –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤
    const originalResults = [];
    const originalLog = tester.analyzeResults;
    tester.analyzeResults = (results, testName, additionalInfo) => {
      const result = originalLog.call(tester, results, testName, additionalInfo);
      originalResults.push(result);
      return result;
    };

    await tester.runAllTests();
    
    this.testResults.concurrencyTests = {
      results: originalResults,
      summary: this.summarizeConcurrencyTests(originalResults)
    };
  }

  async runStressTests() {
    console.log('\\nüî• –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—ñ–≤...');
    const tester = new StressTester();
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç–∏ –∑ –º–µ–Ω—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
    const stressResults = [];
    
    // Burst test
    stressResults.push(await tester.burstTest(8, 150));
    
    // Sustained load test (–∫–æ—Ä–æ—Ç—à–∏–π)
    stressResults.push(await tester.sustainedLoadTest(10000, 1000));
    
    // Ramp-up test
    stressResults.push(await tester.rampUpTest(8, 3));
    
    // Error resilience test
    stressResults.push(await tester.errorResilienceTest());

    this.testResults.stressTests = {
      results: stressResults,
      summary: this.summarizeStressTests(stressResults)
    };
  }

  summarizeConcurrencyTests(results) {
    const totalRequests = results.reduce((sum, r) => sum + r.total, 0);
    const totalSuccessful = results.reduce((sum, r) => sum + r.successful, 0);
    const avgSuccessRate = (totalSuccessful / totalRequests * 100);
    
    return {
      totalTests: results.length,
      totalRequests,
      totalSuccessful,
      successRate: avgSuccessRate.toFixed(1),
      averageResponseTime: results
        .filter(r => r.metrics?.averageResponseTime)
        .reduce((sum, r) => sum + r.metrics.averageResponseTime, 0) / results.length
    };
  }

  summarizeStressTests(results) {
    const totalRequests = results.reduce((sum, r) => sum + r.total, 0);
    const totalSuccessful = results.reduce((sum, r) => sum + r.successful, 0);
    const avgSuccessRate = (totalSuccessful / totalRequests * 100);
    
    const responseTimes = results
      .filter(r => r.metrics?.avgResponseTime)
      .map(r => parseFloat(r.metrics.avgResponseTime));
    
    return {
      totalTests: results.length,
      totalRequests,
      totalSuccessful,
      successRate: avgSuccessRate.toFixed(1),
      averageResponseTime: responseTimes.length > 0 
        ? (responseTimes.reduce((a, b) => a + b) / responseTimes.length).toFixed(2)
        : null,
      timeouts: results.reduce((sum, r) => sum + (r.timedOut || 0), 0)
    };
  }

  generateRecommendations() {
    const concurrencySuccessRate = parseFloat(this.testResults.concurrencyTests.summary.successRate);
    const stressSuccessRate = parseFloat(this.testResults.stressTests.summary.successRate);
    const avgResponseTime = this.testResults.concurrencyTests.summary.averageResponseTime;

    const recommendations = [];

    // –ê–Ω–∞–ª—ñ–∑ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
    if (concurrencySuccessRate < 90) {
      recommendations.push({
        type: 'critical',
        category: 'concurrency',
        issue: '–ù–∏–∑—å–∫–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –ø—Ä–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞—Ö',
        solution: '–î–æ–¥–∞–π—Ç–µ rate limiting, –æ–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ –æ–±—Ä–æ–±–∫—É –∑–∞–ø–∏—Ç—ñ–≤'
      });
    }

    if (stressSuccessRate < 85) {
      recommendations.push({
        type: 'critical',
        category: 'stress',
        issue: '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≤–∏—Ç—Ä–∏–º—É—î –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è',
        solution: '–í–ø—Ä–æ–≤–∞–¥—å—Ç–µ —á–µ—Ä–≥—É –∑–∞–ø–∏—Ç—ñ–≤, —Ä–æ–∑–≥–ª—è–Ω—å—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—é'
      });
    }

    // –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    if (avgResponseTime > 5000) {
      recommendations.push({
        type: 'warning',
        category: 'performance',
        issue: '–ü–æ–≤—ñ–ª—å–Ω–∏–π —á–∞—Å –≤—ñ–¥–≥—É–∫—É',
        solution: '–û–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ –∫–æ–¥, –¥–æ–¥–∞–π—Ç–µ –∫–µ—à—É–≤–∞–Ω–Ω—è, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –º–µ—Ä–µ–∂—É'
      });
    } else if (avgResponseTime > 2000) {
      recommendations.push({
        type: 'info',
        category: 'performance',
        issue: '–ü–æ–º—ñ—Ä–Ω–∏–π —á–∞—Å –≤—ñ–¥–≥—É–∫—É',
        solution: '–†–æ–∑–≥–ª—è–Ω—å—Ç–µ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è UX'
      });
    }

    // –ê–Ω–∞–ª—ñ–∑ timeout'—ñ–≤
    if (this.testResults.stressTests.summary.timeouts > 0) {
      recommendations.push({
        type: 'warning',
        category: 'reliability',
        issue: '–í–∏—è–≤–ª–µ–Ω–æ timeouts',
        solution: '–ó–±—ñ–ª—å—à—Ç–µ timeouts –∞–±–æ –æ–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ –æ–±—Ä–æ–±–∫—É –∑–∞–ø–∏—Ç—ñ–≤'
      });
    }

    // –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    if (concurrencySuccessRate >= 95 && stressSuccessRate >= 90) {
      recommendations.push({
        type: 'success',
        category: 'general',
        issue: '–í—ñ–¥–º—ñ–Ω–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
        solution: '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É'
      });
    }

    this.testResults.recommendations = recommendations;
  }

  generateSummary() {
    const concurrencyScore = Math.min(100, parseFloat(this.testResults.concurrencyTests.summary.successRate));
    const stressScore = Math.min(100, parseFloat(this.testResults.stressTests.summary.successRate));
    const overallScore = ((concurrencyScore + stressScore) / 2).toFixed(1);

    let grade;
    if (overallScore >= 95) grade = 'A';
    else if (overallScore >= 85) grade = 'B';
    else if (overallScore >= 75) grade = 'C';
    else if (overallScore >= 60) grade = 'D';
    else grade = 'F';

    this.testResults.summary = {
      overallScore: overallScore,
      grade,
      concurrencyScore,
      stressScore,
      status: grade === 'A' || grade === 'B' ? 'PASS' : 'NEEDS_IMPROVEMENT'
    };
  }

  async saveReport() {
    try {
      await fs.writeFile(REPORT_FILE, JSON.stringify(this.testResults, null, 2));
      console.log(`\\nüìÑ –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: ${REPORT_FILE}`);
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É:', error.message);
    }
  }

  printFinalReport() {
    const { summary, recommendations } = this.testResults;
    
    console.log('\\n' + '='.repeat(80));
    console.log('üìä –§–Ü–ù–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ù–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø');
    console.log('='.repeat(80));
    
    console.log(`üéØ –ó–ê–ì–ê–õ–¨–ù–ê –û–¶–Ü–ù–ö–ê: ${summary.grade} (${summary.overallScore}%)`);
    console.log(`üìà –û–¥–Ω–æ—á–∞—Å–Ω—ñ—Å—Ç—å: ${summary.concurrencyScore.toFixed(1)}%`);
    console.log(`üî• –°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç–∏: ${summary.stressScore.toFixed(1)}%`);
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${summary.status}`);
    
    console.log('\\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:');
    if (recommendations.length === 0) {
      console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –≤—ñ–¥–º—ñ–Ω–Ω–æ!');
    } else {
      recommendations.forEach((rec, index) => {
        const icon = rec.type === 'critical' ? 'üî¥' : 
                    rec.type === 'warning' ? 'üü°' : 
                    rec.type === 'success' ? 'üü¢' : '‚ÑπÔ∏è';
        console.log(`   ${icon} ${rec.issue}`);
        console.log(`      ‚Üí ${rec.solution}`);
      });
    }

    console.log('\\nüìã –®–í–ò–î–ö–Ü –°–¢–ê–¢–ò–°–¢–ò–ö–ò:');
    const concTests = this.testResults.concurrencyTests.summary;
    const stressTests = this.testResults.stressTests.summary;
    
    console.log(`   üîÑ –¢–µ—Å—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ—Å—Ç—ñ: ${concTests.totalRequests} –∑–∞–ø–∏—Ç—ñ–≤, ${concTests.successRate}% —É—Å–ø—ñ—à–Ω–∏—Ö`);
    console.log(`   üí• –°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç–∏: ${stressTests.totalRequests} –∑–∞–ø–∏—Ç—ñ–≤, ${stressTests.successRate}% —É—Å–ø—ñ—à–Ω–∏—Ö`);
    
    if (concTests.averageResponseTime) {
      console.log(`   ‚è±Ô∏è  –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–≥—É–∫—É: ${concTests.averageResponseTime.toFixed(0)}ms`);
    }
    
    console.log('='.repeat(80));
  }

  async runAllTests() {
    const startTime = performance.now();
    
    console.log('üß™ –ü–û–í–ù–ò–ô –ù–ê–ë–Ü–† –¢–ï–°–¢–Ü–í –ù–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –¢–ê –û–î–ù–û–ß–ê–°–ù–û–°–¢–Ü');
    console.log('='.repeat(80));
    console.log(`üåê URL: ${BASE_URL}`);
    console.log(`üïê –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${new Date().toLocaleString()}`);
    console.log('='.repeat(80));

    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
      const healthCheck = await fetch(`${BASE_URL}/health`);
      if (!healthCheck.ok) {
        throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
      }
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π\\n');

      // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
      await this.runConcurrencyTests();
      await this.runStressTests();

      // –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
      this.generateRecommendations();
      this.generateSummary();

      // –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
      this.printFinalReport();
      
      // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É
      await this.saveReport();

      const totalTime = ((performance.now() - startTime) / 1000).toFixed(1);
      console.log(`\\nüïê –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${totalTime}s`);

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
      console.log('üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞:', BASE_URL);
      process.exit(1);
    }
  }
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —à–≤–∏–¥–∫–∏—Ö —Ç–µ—Å—Ç—ñ–≤
async function quickTest() {
  console.log('‚ö° –®–í–ò–î–ö–ò–ô –¢–ï–°–¢ –û–î–ù–û–ß–ê–°–ù–û–°–¢–Ü (3 –∑–∞–ø–∏—Ç–∏)');
  console.log('='.repeat(50));
  
  const promises = [];
  for (let i = 1; i <= 3; i++) {
    promises.push(
      fetch(`${BASE_URL}/v1/simple-chat`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          model: 'openai/gpt-4o-mini',
          message: `–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç #${i}`
        })
      }).then(async res => ({
        id: i,
        success: res.ok,
        status: res.status,
        response: res.ok ? (await res.json()).message : await res.text()
      }))
    );
  }

  const results = await Promise.allSettled(promises);
  const successful = results.filter(r => r.value?.success).length;
  
  console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${successful}/3 –∑–∞–ø–∏—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω—ñ`);
  
  if (successful === 3) {
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–æ–±–ª—è—î –æ–¥–Ω–æ—á–∞—Å–Ω—ñ –∑–∞–ø–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
  } else {
    console.log('‚ö†Ô∏è  –í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏, –∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø–æ–≤–Ω–∏–π —Ç–µ—Å—Ç: node test-load-suite.mjs');
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--quick') || args.includes('-q')) {
    await quickTest();
  } else {
    const suite = new LoadTestSuite();
    await suite.runAllTests();
  }
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export default LoadTestSuite;
