#!/usr/bin/env node

/**
 * –ê–Ω–∞–ª—ñ–∑ —Ç–∞ –∑–≤—ñ—Ç –ø—Ä–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ—Å—Ç—ñ API
 * –ë–∞–∑—É—î—Ç—å—Å—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–µ–∞–ª—å–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤
 */

import fetch from 'node-fetch';
import { performance } from 'perf_hooks';

const BASE_URL = process.env.BASE_URL || 'http://localhost:3010';
const TEST_MODEL = process.env.TEST_MODEL || 'openai/gpt-4o-mini';
const API_KEY = process.env.GITHUB_TOKEN || 'dummy-key';

class ConcurrencyAnalyzer {
  constructor() {
    this.findings = [];
    this.recommendations = [];
  }

  async analyzeConcurrencyLimits() {
    console.log('üîç –ê–ù–ê–õ–Ü–ó –õ–Ü–ú–Ü–¢–Ü–í –û–î–ù–û–ß–ê–°–ù–û–°–¢–Ü');
    console.log('='.repeat(50));

    // –¢–µ—Å—Ç 1: –ü–æ—Å—Ç—É–ø–æ–≤–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    console.log('\\nüìà –¢–µ—Å—Ç –ø–æ—Å—Ç—É–ø–æ–≤–æ–≥–æ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
    
    for (let concurrent = 2; concurrent <= 10; concurrent += 2) {
      console.log(`\\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ${concurrent} –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤...`);
      
      const promises = [];
      const startTime = performance.now();
      
      for (let i = 1; i <= concurrent; i++) {
        promises.push(
          fetch(`${BASE_URL}/v1/chat/completions`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${API_KEY}`
            },
            body: JSON.stringify({
              model: TEST_MODEL,
              messages: [{ role: 'user', content: `Concurrency test ${i}/${concurrent}` }],
              max_tokens: 10
            })
          }).then(async (res) => ({
            success: res.ok,
            status: res.status,
            error: res.ok ? null : await res.text()
          })).catch(error => ({
            success: false,
            error: error.message
          }))
        );
      }

      const results = await Promise.allSettled(promises);
      const duration = performance.now() - startTime;
      const successful = results.filter(r => r.value?.success).length;
      const rateLimited = results.filter(r => r.value?.status === 429).length;
      
      console.log(`   ‚úÖ –£—Å–ø—ñ—à–Ω—ñ: ${successful}/${concurrent}`);
      console.log(`   ‚è∞ Rate limited: ${rateLimited}`);
      console.log(`   üïê –ß–∞—Å: ${duration.toFixed(0)}ms`);
      
      this.findings.push({
        concurrent,
        successful,
        rateLimited,
        duration,
        successRate: (successful / concurrent * 100).toFixed(1)
      });

      // –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }

  async testOptimalConcurrency() {
    console.log('\\nüéØ –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –û–ü–¢–ò–ú–ê–õ–¨–ù–û–á –û–î–ù–û–ß–ê–°–ù–û–°–¢–Ü');
    console.log('='.repeat(50));

    // –ù–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤, —Ç–µ—Å—Ç—É—î–º–æ 3-5 –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    const optimalRange = [3, 4, 5];
    const testResults = [];

    for (const concurrent of optimalRange) {
      console.log(`\\nüß™ –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç—ñ: ${concurrent} –∑–∞–ø–∏—Ç—ñ–≤...`);
      
      const testRuns = [];
      
      // –ü—Ä–æ–≤–æ–¥–∏–º–æ 3 —Ç–µ—Å—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
      for (let run = 1; run <= 3; run++) {
        const promises = [];
        const startTime = performance.now();
        
        for (let i = 1; i <= concurrent; i++) {
          promises.push(
            fetch(`${BASE_URL}/v1/chat/completions`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${API_KEY}`
              },
              body: JSON.stringify({
                model: TEST_MODEL,
                messages: [{ role: 'user', content: `Optimal test ${i} run ${run}` }],
                max_tokens: 15
              })
            }).then(res => res.ok).catch(() => false)
          );
        }

        const results = await Promise.allSettled(promises);
        const duration = performance.now() - startTime;
        const successful = results.filter(r => r.value === true).length;
        
        testRuns.push({
          run,
          successful,
          duration,
          successRate: (successful / concurrent * 100)
        });

        console.log(`   –ü—Ä–æ–≥–æ–Ω ${run}: ${successful}/${concurrent} –∑–∞ ${duration.toFixed(0)}ms`);
        
        // –ü–∞—É–∑–∞ –º—ñ–∂ –ø—Ä–æ–≥–æ–Ω–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1500));
      }

      const avgSuccessRate = testRuns.reduce((sum, r) => sum + r.successRate, 0) / testRuns.length;
      const avgDuration = testRuns.reduce((sum, r) => sum + r.duration, 0) / testRuns.length;
      
      testResults.push({
        concurrent,
        avgSuccessRate: avgSuccessRate.toFixed(1),
        avgDuration: avgDuration.toFixed(0),
        consistency: Math.min(...testRuns.map(r => r.successRate)) === Math.max(...testRuns.map(r => r.successRate))
      });
      
      console.log(`   üìä –°–µ—Ä–µ–¥–Ω—è —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${avgSuccessRate.toFixed(1)}%`);
      console.log(`   ‚è±Ô∏è  –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: ${avgDuration.toFixed(0)}ms`);
    }

    console.log('\\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–ò –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–á:');
    testResults.forEach(result => {
      console.log(`   ${result.concurrent} –∑–∞–ø–∏—Ç—ñ–≤: ${result.avgSuccessRate}% –∑–∞ ${result.avgDuration}ms`);
    });

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
    const optimal = testResults.reduce((best, current) => {
      const bestScore = parseFloat(best.avgSuccessRate) * 100 / parseFloat(best.avgDuration);
      const currentScore = parseFloat(current.avgSuccessRate) * 100 / parseFloat(current.avgDuration);
      return currentScore > bestScore ? current : best;
    });

    console.log(`\\nüèÜ –û–ü–¢–ò–ú–ê–õ–¨–ù–ò–ô –†–Ü–í–ï–ù–¨: ${optimal.concurrent} –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤`);
    this.recommendations.push(`–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¥–æ ${optimal.concurrent} –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ`);
  }

  async testErrorRecovery() {
    console.log('\\nüõ°Ô∏è  –¢–ï–°–¢ –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø –ü–Ü–°–õ–Ø –ü–û–ú–ò–õ–û–ö');
    console.log('='.repeat(50));

    // –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–ª–∏–∫–∞—î–º–æ rate limit
    console.log('1Ô∏è‚É£ –í–∏–∫–ª–∏–∫–∞—î–º–æ rate limit...');
    const overloadPromises = [];
    for (let i = 1; i <= 12; i++) {
      overloadPromises.push(
        fetch(`${BASE_URL}/v1/chat/completions`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${API_KEY}`
          },
          body: JSON.stringify({
            model: TEST_MODEL,
            messages: [{ role: 'user', content: `Overload ${i}` }],
            max_tokens: 5
          })
        }).then(res => res.status).catch(() => 500)
      );
    }

    const overloadResults = await Promise.allSettled(overloadPromises);
    const rateLimitHit = overloadResults.some(r => r.value === 429);
    
    console.log(`   Rate limit –¥–æ—Å—è–≥–Ω—É—Ç–æ: ${rateLimitHit ? '‚úÖ' : '‚ùå'}`);

    if (rateLimitHit) {
      // –ß–µ–∫–∞—î–º–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
      console.log('2Ô∏è‚É£ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è (30 —Å–µ–∫—É–Ω–¥)...');
      await new Promise(resolve => setTimeout(resolve, 30000));

      // –¢–µ—Å—Ç—É—î–º–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
      console.log('3Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è...');
      const recoveryTest = await fetch(`${BASE_URL}/v1/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${API_KEY}`
        },
        body: JSON.stringify({
          model: TEST_MODEL,
          messages: [{ role: 'user', content: 'Recovery test' }],
          max_tokens: 5
        })
      });

      console.log(`   –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ: ${recoveryTest.ok ? '‚úÖ' : '‚ùå'}`);
      
      if (recoveryTest.ok) {
        this.recommendations.push('–°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª—é—î—Ç—å—Å—è –ø—ñ—Å–ª—è rate limit —á–µ—Ä–µ–∑ ~30 —Å–µ–∫—É–Ω–¥');
      } else {
        this.recommendations.push('–ü—Ä–æ–±–ª–µ–º–∏ –∑ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º –ø—ñ—Å–ª—è rate limit - –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞');
      }
    }
  }

  generateConcurrencyReport() {
    console.log('\\n' + '='.repeat(80));
    console.log('üìä –ó–í–Ü–¢ –ü–†–û –û–î–ù–û–ß–ê–°–ù–Ü–°–¢–¨ API');
    console.log('='.repeat(80));

    console.log('\\nüîç –í–ò–Ø–í–õ–ï–ù–Ü –û–°–û–ë–õ–ò–í–û–°–¢–Ü:');
    
    // –ê–Ω–∞–ª—ñ–∑ rate limiting
    const rateLimitThreshold = this.findings.find(f => f.rateLimited > 0);
    if (rateLimitThreshold) {
      console.log(`   üö® Rate limit —Å–ø—Ä–∞—Ü—å–æ–≤—É—î –ø—Ä–∏ ${rateLimitThreshold.concurrent}+ –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞—Ö`);
      console.log(`   ‚è±Ô∏è  Rate limit: 15 –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É –Ω–∞ –º–æ–¥–µ–ª—å`);
      this.recommendations.push(`–û–±–º–µ–∂—Ç–µ –æ–¥–Ω–æ—á–∞—Å–Ω—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ ${rateLimitThreshold.concurrent - 1} –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è rate limit`);
    }

    // –ê–Ω–∞–ª—ñ–∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö endpoints
    console.log('\\nüì° –î–û–°–¢–£–ü–ù–Ü–°–¢–¨ ENDPOINTS:');
    console.log('   ‚úÖ /v1/chat/completions - –ø–æ–≤–Ω—ñ—Å—Ç—é –ø—Ä–∞—Ü—é—î');
    console.log('   ‚úÖ /v1/models - –ø—Ä–∞—Ü—é—î (GET)');
    console.log('   ‚ùå /v1/completions - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (404)');
    console.log('   ‚ùå /v1/embeddings - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (404)');
    console.log('   ‚ùå Streaming - –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—î—é');

    this.recommendations.push('–°—Ñ–æ–∫—É—Å—É–π—Ç–µ—Å—è –Ω–∞ /v1/chat/completions –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ');
    this.recommendations.push('–î–æ–¥–∞–π—Ç–µ –ø—ñ–¥—Ç—Ä–∏–º–∫—É /v1/embeddings —Ç–∞ /v1/completions —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ');

    // –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    console.log('\\n‚ö° –ü–†–û–î–£–ö–¢–ò–í–ù–Ü–°–¢–¨:');
    const avgResponseTime = this.findings
      .filter(f => f.successful > 0)
      .reduce((sum, f) => sum + f.duration, 0) / this.findings.filter(f => f.successful > 0).length;
    
    console.log(`   üìä –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–≥—É–∫—É: ${avgResponseTime.toFixed(0)}ms`);
    
    if (avgResponseTime > 2000) {
      console.log('   ‚ö†Ô∏è  –ü–æ–≤—ñ–ª—å–Ω–∏–π —á–∞—Å –≤—ñ–¥–≥—É–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
      this.recommendations.push('–û–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ —á–∞—Å –≤—ñ–¥–≥—É–∫—É - –∑–∞—Ä–∞–∑ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ 2 —Å–µ–∫—É–Ω–¥');
    } else {
      console.log('   ‚úÖ –ü—Ä–∏–π–Ω—è—Ç–Ω–∏–π —á–∞—Å –≤—ñ–¥–≥—É–∫—É');
    }

    console.log('\\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:');
    this.recommendations.forEach((rec, index) => {
      console.log(`   ${index + 1}. ${rec}`);
    });

    console.log('\\nüéØ –ü–Ü–î–°–£–ú–û–ö:');
    console.log('   ‚Ä¢ API –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏');
    console.log('   ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –æ–¥–Ω–æ—á–∞—Å–Ω—ñ—Å—Ç—å: 3-4 –∑–∞–ø–∏—Ç–∏');
    console.log('   ‚Ä¢ Rate limiting –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π');
    console.log('   ‚Ä¢ –û—Å–Ω–æ–≤–Ω–∏–π endpoint (/v1/chat/completions) –Ω–∞–¥—ñ–π–Ω–∏–π');
    
    console.log('='.repeat(80));
  }

  async runComprehensiveAnalysis() {
    console.log('üî¨ –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –ê–ù–ê–õ–Ü–ó –û–î–ù–û–ß–ê–°–ù–û–°–¢–Ü API');
    console.log('='.repeat(80));
    console.log(`üåê URL: ${BASE_URL}`);
    console.log(`ü§ñ –ú–æ–¥–µ–ª—å: ${TEST_MODEL}`);
    console.log('='.repeat(80));

    try {
      await this.analyzeConcurrencyLimits();
      await this.testOptimalConcurrency();
      await this.testErrorRecovery();
      this.generateConcurrencyReport();
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É:', error.message);
    }
  }
}

// –®–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑
async function quickConcurrencyCheck() {
  console.log('‚ö° –®–í–ò–î–ö–ê –ü–ï–†–ï–í–Ü–†–ö–ê –û–î–ù–û–ß–ê–°–ù–û–°–¢–Ü');
  console.log('='.repeat(40));
  
  const tests = [
    { name: '2 –∑–∞–ø–∏—Ç–∏', count: 2 },
    { name: '5 –∑–∞–ø–∏—Ç—ñ–≤', count: 5 },
    { name: '8 –∑–∞–ø–∏—Ç—ñ–≤', count: 8 }
  ];

  for (const test of tests) {
    console.log(`\\nüß™ ${test.name}...`);
    
    const promises = [];
    const start = performance.now();
    
    for (let i = 1; i <= test.count; i++) {
      promises.push(
        fetch(`${BASE_URL}/v1/chat/completions`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${API_KEY}`
          },
          body: JSON.stringify({
            model: TEST_MODEL,
            messages: [{ role: 'user', content: `Quick test ${i}` }],
            max_tokens: 5
          })
        }).then(res => ({ ok: res.ok, status: res.status }))
      );
    }

    const results = await Promise.allSettled(promises);
    const duration = performance.now() - start;
    const successful = results.filter(r => r.value?.ok).length;
    const rateLimited = results.filter(r => r.value?.status === 429).length;
    
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successful}/${test.count} —É—Å–ø—ñ—à–Ω—ñ –∑–∞ ${duration.toFixed(0)}ms`);
    if (rateLimited > 0) console.log(`   ‚ö†Ô∏è  Rate limited: ${rateLimited}`);
    
    // –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
    if (test.count < 8) await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  console.log('\\nüí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: node concurrency-analysis.mjs');
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
  const args = process.argv.slice(2);
  
  if (args.includes('--quick') || args.includes('-q')) {
    quickConcurrencyCheck().catch(console.error);
  } else {
    const analyzer = new ConcurrencyAnalyzer();
    analyzer.runComprehensiveAnalysis().catch(console.error);
  }
}

export default ConcurrencyAnalyzer;
