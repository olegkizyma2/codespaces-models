<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">
    <title>–ì–æ–ª–æ—Å–æ–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç - –ü—Ä–æ—Å—Ç–∏–π</title>
    <meta name="theme-color" content="#000000">
    <style>
        :root {
            --bg: #000000;
            --bg-soft: #0a0a0a;
            --card: #111111;
            --ink: #ffffff;
            --muted: #888888;
            --line: rgba(255,255,255,0.08);
            --accent: #00ff88;
            --accent2: #00cc66;
        }
        
        * { box-sizing: border-box; }
        
        html, body {
            height: 100%;
            margin: 0;
            background: var(--bg);
            color: var(--ink);
            font-family: -apple-system, BlinkMacSystemFont, Inter, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            -webkit-font-smoothing: antialiased;
            overflow: hidden;
        }
        
        .app {
            height: 100vh;
            height: 100svh; /* Safari support for small viewport height */
            display: flex;
            flex-direction: column;
            background: var(--bg);
            overflow: hidden;
        }
        
        .header {
            padding: 12px 16px;
            background: rgba(0,0,0,0.95);
            border-bottom: 1px solid var(--line);
            backdrop-filter: blur(10px);
        }
        
        .voice-controls {
            display: flex;
            gap: 8px;
            align-items: center;
            margin-left: 12px;
        }
        
        .voice-control-btn {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            border: 2px solid var(--line);
            background: var(--card);
            color: var(--muted);
            cursor: pointer;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }
        
        .voice-control-btn.active {
            background: var(--accent);
            color: #000000;
            border-color: var(--accent);
        }
        
        .voice-control-btn.pending {
            animation: pulse-small 1.5s infinite;
            border-color: #ff9900;
            color: #ff9900;
        }
        
        .voice-control-btn.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .voice-control-btn:hover:not(.disabled) {
            background: rgba(0,255,136,0.1);
            border-color: var(--accent);
        }
        
        @keyframes pulse-small {
            0% { box-shadow: 0 0 0 0 rgba(255,153,0,0.4); }
            70% { box-shadow: 0 0 0 6px rgba(255,153,0,0); }
            100% { box-shadow: 0 0 0 0 rgba(255,153,0,0); }
        }
        
        .header {
            background: var(--card);
            padding: 12px 16px;
            border-bottom: 1px solid var(--line);
            flex-shrink: 0;
        }
        
        .header-row {
            display: flex;
            align-items: center;
            gap: 8px;
            justify-content: space-between;
        }
        
        .header h1 {
            margin: 0;
            font-size: 14px;
            display: flex;
            align-items: center;
            white-space: nowrap;
            color: var(--accent);
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            padding: 4px 8px;
            border-radius: 6px;
        }
        
        .header h1.connected {
            color: #00ff88;
            text-shadow: 0 0 8px rgba(0, 255, 136, 0.6);
        }
        
        .header h1.connecting {
            color: #ffaa00;
            text-shadow: 0 0 8px rgba(255, 170, 0, 0.6);
            animation: pulse 1.5s infinite;
        }
        
        .header h1.disconnected {
            color: #ff4444;
            text-shadow: 0 0 8px rgba(255, 68, 68, 0.6);
        }
        
        .dot {
            display: none; /* Remove the dot */
        }
        
        select, button {
            background: var(--card);
            border: 1px solid var(--line);
            color: var(--ink);
            padding: 6px 10px;
            border-radius: 6px;
            font-size: 12px;
            font-family: inherit;
        }
        
        #modelSelect {
            flex: 1;
            min-width: 120px;
            max-width: 200px;
        }
        
        .voice-controls {
            display: flex;
            gap: 4px;
            align-items: center;
        }
        
        .chat {
            flex: 1;
            overflow-y: auto;
            overflow-x: hidden;
            padding: 16px;
            display: flex;
            flex-direction: column;
            gap: 12px;
            min-height: 0;
            -webkit-overflow-scrolling: touch;
        }
        
        /* Hide scrollbar but keep scrolling */
        .chat::-webkit-scrollbar {
            display: none;
        }
        
        .chat {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }
        
        .message {
            padding: 12px 16px;
            border-radius: 12px;
            max-width: 85%;
            word-wrap: break-word;
        }
        
        .message.user {
            background: var(--accent);
            color: #000000;
            align-self: flex-end;
            margin-left: auto;
        }
        
        .message.assistant {
            background: var(--card);
            color: var(--ink);
            align-self: flex-start;
            border: 1px solid var(--line);
        }
        
        .message.error {
            background: rgba(255,68,68,0.1);
            color: #ff4444;
            border: 1px solid #ff4444;
            align-self: center;
            text-align: center;
        }
        
        .input-area {
            padding: 16px;
            background: rgba(0,0,0,0.95);
            border-top: 1px solid var(--line);
        }
        
        .input-container {
            position: relative;
            display: flex;
            gap: 8px;
            align-items: center;
        }
        
        .input {
            flex: 1;
            background: var(--card);
            border: 1px solid var(--line);
            color: var(--ink);
            padding: 12px 16px;
            border-radius: 12px;
            font-size: 16px;
            font-family: inherit;
            outline: none;
        }
        
        .input:focus {
            border-color: var(--accent);
            box-shadow: 0 0 0 2px rgba(0,255,136,0.1);
        }
        
        .input.has-text {
            background: linear-gradient(90deg, rgba(0,255,136,0.05), var(--card));
            border-color: rgba(0,255,136,0.3);
        }
        
        .send-btn {
            background: var(--accent);
            color: #000000;
            border: none;
            width: 44px;
            height: 44px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 18px;
        }
        
        .send-btn:hover {
            background: var(--accent2);
        }
        
        .send-btn:disabled {
            background: var(--muted);
            cursor: not-allowed;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            color: var(--muted);
        }
        
        .voice-btn {
            background: var(--accent);
            color: #000000;
            border: none;
            width: 44px;
            height: 44px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 18px;
            margin-left: 8px;
        }
        
        .voice-btn.active {
            animation: pulse 1.5s infinite;
            background: #ff4444;
        }
        
        .voice-btn.listening {
            animation: pulse 1.2s infinite;
            background: #44ff44;
            box-shadow: 0 0 15px rgba(68, 255, 68, 0.6);
        }
        
        .voice-btn.speaking {
            animation: pulse 0.8s infinite;
            background: #4444ff;
            box-shadow: 0 0 15px rgba(68, 68, 255, 0.6);
        }
        
        .voice-btn.ready {
            background: #666;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        }
        
        .voice-btn.ready:hover {
            background: #777;
        }
        
        .stop-dialog-btn {
            background: #ff4444;
            color: white;
            border: none;
            border-radius: 50%;
            width: 45px;
            height: 45px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 16px;
            margin-left: 8px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 8px rgba(255, 68, 68, 0.3);
        }
        
        .stop-dialog-btn:hover {
            background: #ff6666;
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(255, 68, 68, 0.5);
        }
        
        .stop-dialog-btn:active {
            transform: scale(0.95);
        }
        
        /* üåä Streaming Animation Styles */
        .message-text.streaming {
            position: relative;
        }
        
        .message-text.streaming::after {
            content: '‚ñã';
            animation: cursor-blink 1.2s infinite;
            color: var(--accent);
            font-weight: bold;
            margin-left: 1px;
        }
        
        @keyframes cursor-blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }
        
        .streaming-indicator {
            display: inline-flex;
            align-items: center;
            gap: 4px;
            color: var(--muted);
            font-size: 14px;
            margin-left: 4px;
        }
        
        .streaming-dots {
            display: inline-flex;
            gap: 2px;
        }
        
        .streaming-dots span {
            width: 4px;
            height: 4px;
            border-radius: 50%;
            background: var(--accent);
            animation: streaming-pulse 1.4s infinite;
        }
        
        .streaming-dots span:nth-child(1) { animation-delay: 0s; }
        .streaming-dots span:nth-child(2) { animation-delay: 0.2s; }
        .streaming-dots span:nth-child(3) { animation-delay: 0.4s; }
        
        @keyframes streaming-pulse {
            0%, 20% { opacity: 0.3; transform: scale(1); }
            50% { opacity: 1; transform: scale(1.2); }
            100% { opacity: 0.3; transform: scale(1); }
        }
        
        /* –ü–ª–∞–≤–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏ —Ç–µ–∫—Å—Ç—É */
        .message-text {
            transition: all 0.1s ease-out;
        }
        
        .message.assistant .message-text.streaming {
            background: linear-gradient(90deg, transparent 0%, rgba(0, 255, 136, 0.1) 50%, transparent 100%);
            background-size: 200% 100%;
            animation: streaming-highlight 2s infinite;
        }
        
        @keyframes streaming-highlight {
            0% { background-position: -200% 0; }
            100% { background-position: 200% 0; }
        }
        
        .volume-indicator {
            position: fixed;
            bottom: 90px; /* –ü—ñ–¥–Ω—è—Ç–æ –≤–∏—â–µ —â–æ–± –Ω–µ –ª—è–≥–∞–ª–æ –Ω–∞ –∫–Ω–æ–ø–∫–∏ */
            right: 20px;
            width: 60px;
            height: 60px;
            background: rgba(0, 0, 0, 0.8);
            border-radius: 50%;
            display: none;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: var(--accent);
            border: 2px solid var(--accent);
            z-index: 1000;
            transition: all 0.2s ease;
        }
        
        .volume-indicator.active {
            display: flex;
            animation: volumePulse 0.5s ease-in-out;
        }
        
        @keyframes volumePulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        .big-stop-voice-btn {
            background: rgba(255, 68, 68, 0.08); /* –î—É–∂–µ –ª–µ–≥–∫–∞ —á–µ—Ä–≤–æ–Ω–∞ –¥–∏–º–∫–∞ */
            color: rgba(255, 255, 255, 0.9);
            border: 1px solid rgba(255, 68, 68, 0.2); /* –¢–æ–Ω—à–∞ —Ä–∞–º–∫–∞ */
            border-radius: 12px;
            width: 100%;
            height: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 16px;
            font-weight: 400; /* –ú–µ–Ω—à –∂–∏—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç */
            margin: 8px 0;
            display: block;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(1px); /* –ú–µ–Ω—à–µ —Ä–æ–∑–º–∏—Ç—Ç—è */
            text-shadow: 0 1px 2px rgba(0,0,0,0.3);
        }
        
        .big-stop-voice-btn:hover {
            background: rgba(255, 68, 68, 0.12);
            border-color: rgba(255, 68, 68, 0.3);
            color: rgba(255, 255, 255, 1);
        }
        
        .big-stop-voice-btn:active {
            background: rgba(255, 68, 68, 0.15);
        }
        
        .tts-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.9);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            backdrop-filter: blur(4px);
        }
        
        .tts-content {
            background: var(--card);
            padding: 24px;
            border-radius: 16px;
            text-align: center;
            border: 1px solid var(--line);
            max-width: 300px;
        }
        
        .tts-content h3 {
            margin: 0 0 16px 0;
            color: var(--accent);
        }
        
        .tts-content p {
            margin: 0 0 20px 0;
            color: var(--muted);
            font-size: 14px;
        }
        
        .tts-btn {
            background: var(--accent);
            color: #000000;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            margin: 0 8px;
        }
        
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(255,68,68,0.4); }
            70% { box-shadow: 0 0 0 10px rgba(255,68,68,0); }
            100% { box-shadow: 0 0 0 0 rgba(255,68,68,0); }
        }
        
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(0,255,136,0.4); }
            70% { box-shadow: 0 0 0 10px rgba(0,255,136,0); }
            100% { box-shadow: 0 0 0 0 rgba(0,255,136,0); }
        }
        
        .model-info {
            display: none;
            position: absolute;
            bottom: 60px;
            left: 16px;
            right: 16px;
            background: var(--card);
            border: 1px solid var(--line);
            border-radius: 12px;
            padding: 16px;
            font-size: 14px;
            color: var(--muted);
            z-index: 100;
            max-height: 120px;
            overflow-y: auto;
            transition: opacity 0.3s ease;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            backdrop-filter: blur(10px);
        }
        
        .model-info::-webkit-scrollbar {
            display: none;
        }
        
        .model-info {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }
        
        @media (max-width: 768px) {
            .header-row {
                gap: 4px;
                justify-content: space-between;
            }
            
            .header h1 {
                font-size: 12px;
                padding: 2px 6px;
            }
            
            #modelSelect {
                flex: 1;
                min-width: 100px;
                max-width: 150px;
                font-size: 11px;
                padding: 4px 6px;
            }
            
            .voice-controls {
                gap: 2px;
            }
            
            .voice-control-btn {
                width: 24px;
                height: 24px;
                font-size: 10px;
            }
            
            .model-info {
                left: 8px;
                right: 8px;
                margin: 0;
            }
            
            .input-area {
                padding: 8px;
            }
        }
    </style>
</head>
<body>
    <div class="app">
        <div class="header">
            <div class="header-row">
                <h1 class="connected">
                    ATLAS
                </h1>
                <select id="modelSelect">
                    <option value="">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π...</option>
                </select>
                <div class="voice-controls">
                    <div class="voice-control-btn pending" id="ttsControlBtn" title="–£–≤—ñ–º–∫–Ω—É—Ç–∏ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è">üîä</div>
                    <div class="voice-control-btn pending" id="sttControlBtn" title="–£–≤—ñ–º–∫–Ω—É—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω">üé§</div>
                    <div class="voice-control-btn disabled" id="voiceOnlyBtn" title="–ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º">üé≠</div>
                </div>
            </div>
        </div>
        
        <div class="model-info" id="modelInfo">
            <div id="modelDescription">–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó</div>
        </div>
        
        <div class="chat" id="chat"></div>
        
        <div class="input-area">
            <div class="input-container">
                <input 
                    type="text" 
                    class="input" 
                    id="messageInput"
                    placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
                    autocomplete="off"
                >
                <button class="send-btn" id="sendBtn">üì§</button>
                <button class="voice-btn" id="voiceBtn">üé§</button>
            </div>
        </div>
        
        <!-- Volume indicator -->
        <div class="volume-indicator" id="volumeIndicator">üé§</div>
    </div>

    <script>
        class SimpleChat {
            constructor() {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ DOM –≥–æ—Ç–æ–≤–∏–π
                if (document.readyState === 'loading') {
                    document.addEventListener('DOMContentLoaded', () => this.init());
                    return;
                }
                this.init();
            }
            
            init() {
                // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
                this.chat = document.getElementById('chat');
                this.input = document.getElementById('messageInput');
                this.sendBtn = document.getElementById('sendBtn');
                this.voiceBtn = document.getElementById('voiceBtn');
                this.modelSelect = document.getElementById('modelSelect');
                this.modelInfo = document.getElementById('modelInfo');
                this.modelDescription = document.getElementById('modelDescription');
                this.atlasTitle = document.querySelector('.header h1');
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ
                if (!this.chat || !this.input || !this.sendBtn || !this.modelSelect) {
                    console.error('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ DOM –µ–ª–µ–º–µ–Ω—Ç–∏');
                    return;
                }
                
                // Connection status
                this.connectionStatus = 'connected'; // connected, connecting, disconnected
                
                // Voice control buttons
                this.ttsControlBtn = document.getElementById('ttsControlBtn');
                this.sttControlBtn = document.getElementById('sttControlBtn');
                this.voiceOnlyBtn = document.getElementById('voiceOnlyBtn');
                this.volumeIndicator = document.getElementById('volumeIndicator');
                
                this.messages = [];
                this.isLoading = false;
                this.isListening = false;
                this.ttsEnabled = false;
                this.sttEnabled = false;
                this.voiceOnlyMode = false;
                this.isContinuousListening = false;
                this.isTTSSpeaking = false;
                this.isCollectingSpeech = false;
                this.speechCollectionTimer = null;
                this.speechDetectionCount = 0;
                this.speechDetectionThreshold = 1;
                this.modelInfoTimeout = null;
                this.currentTranscript = '';
                this.speechStartTime = null;
                this.minimumInterruptDuration = 2000; // 2 seconds in milliseconds (–∑–º—ñ–Ω–µ–Ω–æ –∑ 3 –Ω–∞ 2)
                this.audioContext = null;
                this.analyser = null;
                this.microphone = null;
                this.voiceActivated = false;
                this.volumeThreshold = 30; // Volume threshold for voice activation
                this.vadCheckInterval = null;
                this.volumeHideTimer = null;
                this.sttStateBeforeVoiceMode = false; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω STT –ø–µ—Ä–µ–¥ –≥–æ–ª–æ—Å–æ–≤–∏–º —Ä–µ–∂–∏–º–æ–º
                
                this.modelDescriptions = {
                    // OpenAI models
                    'openai/gpt-4o-mini': 'OpenAI GPT-4o Mini - —à–≤–∏–¥–∫–∞ –π –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –º–æ–¥–µ–ª—å. –û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–ª—è –±—ñ–ª—å—à–æ—Å—Ç—ñ –∑–∞–≤–¥–∞–Ω—å.',
                    'openai/gpt-4o': 'OpenAI GPT-4o - –Ω–∞–π–ø–æ—Ç—É–∂–Ω—ñ—à–∞ –º–æ–¥–µ–ª—å OpenAI. –ù–∞–π–∫—Ä–∞—â–∞ –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å —ñ –º—ñ—Ä–∫—É–≤–∞–Ω—å.',
                    'gpt-4o-mini': 'GPT-4o Mini (–∫–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞) - —à–≤–∏–¥–∫–∞ –π –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –º–æ–¥–µ–ª—å OpenAI.',
                    'gpt-4o': 'GPT-4o (–∫–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞) - –Ω–∞–π–ø–æ—Ç—É–∂–Ω—ñ—à–∞ –º–æ–¥–µ–ª—å OpenAI –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.',
                    
                    // Microsoft Phi models
                    'microsoft/Phi-3.5-mini-instruct': 'Phi-3.5 Mini - –Ω–∞–π–Ω–æ–≤—ñ—à–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–∞ –º–æ–¥–µ–ª—å Microsoft –∑ –≤—ñ–¥–º—ñ–Ω–Ω–∏–º —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è–º —à–≤–∏–¥–∫–æ—Å—Ç—ñ —Ç–∞ —è–∫–æ—Å—Ç—ñ.',
                    'microsoft/Phi-3-mini-4k-instruct': 'Phi-3 Mini 4K - –±–∞–∑–æ–≤–∞ –º—ñ–Ω—ñ-–º–æ–¥–µ–ª—å Microsoft –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º 4K —Ç–æ–∫–µ–Ω—ñ–≤.',
                    'Phi-3.5-mini-instruct': 'Phi-3.5 Mini (–∫–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞) - –Ω–∞–π–Ω–æ–≤—ñ—à–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–∞ –º–æ–¥–µ–ª—å Microsoft.',
                    'Phi-3-mini-4k-instruct': 'Phi-3 Mini 4K (–∫–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞) - –±–∞–∑–æ–≤–∞ –º—ñ–Ω—ñ-–º–æ–¥–µ–ª—å –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º 4K.',
                    'Phi-3-medium-4k-instruct': 'Phi-3 Medium (–∫–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞) - —Å–µ—Ä–µ–¥–Ω—è –º–æ–¥–µ–ª—å Microsoft –∑ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.',
                    'microsoft/Phi-3.5-MoE-instruct': 'Phi-3.5 MoE - –º–æ–¥–µ–ª—å –∑ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–º–∏ –±–ª–æ–∫–∞–º–∏ (Mixture of Experts) –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.',
                    'microsoft/Phi-3.5-vision-instruct': 'Phi-3.5 Vision - –º–æ–¥–µ–ª—å –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∑–æ–±—Ä–∞–∂–µ–Ω—å. –ú–æ–∂–µ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–∞ —Ñ–æ—Ç–æ.',
                    'microsoft/Phi-3-small-8k-instruct': 'Phi-3 Small 8K - –º–∞–ª–∞ –º–æ–¥–µ–ª—å –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º 8K —Ç–æ–∫–µ–Ω—ñ–≤.',
                    'microsoft/Phi-3-small-128k-instruct': 'Phi-3 Small 128K - –º–∞–ª–∞ –º–æ–¥–µ–ª—å –∑ –¥—É–∂–µ –¥–æ–≤–≥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º 128K —Ç–æ–∫–µ–Ω—ñ–≤. –Ü–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è –¥–æ–≤–≥–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.',
                    'microsoft/Phi-3-medium-4k-instruct': 'Phi-3 Medium 4K - —Å–µ—Ä–µ–¥–Ω—è –º–æ–¥–µ–ª—å Microsoft –∑ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.',
                    'microsoft/Phi-3-medium-128k-instruct': 'Phi-3 Medium 128K - —Å–µ—Ä–µ–¥–Ω—è –º–æ–¥–µ–ª—å –∑ –¥—É–∂–µ –¥–æ–≤–≥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º 128K —Ç–æ–∫–µ–Ω—ñ–≤. –ü–æ—Ç—É–∂–Ω–∞ –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.',
                    'Phi-3-small-8k-instruct': 'Phi-3 Small 8K (–∫–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞) - –º–∞–ª–∞ –º–æ–¥–µ–ª—å –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º 8K —Ç–æ–∫–µ–Ω—ñ–≤.',
                    'Phi-3-small-128k-instruct': 'Phi-3 Small 128K (–∫–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞) - –º–∞–ª–∞ –º–æ–¥–µ–ª—å –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º 128K —Ç–æ–∫–µ–Ω—ñ–≤.',
                    'Phi-3-medium-128k-instruct': 'Phi-3 Medium 128K (–∫–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞) - —Å–µ—Ä–µ–¥–Ω—è –º–æ–¥–µ–ª—å –∑ –¥–æ–≤–≥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º 128K —Ç–æ–∫–µ–Ω—ñ–≤.',
                    
                    // AI21 Jamba models
                    'AI21-Jamba-1.5-Large': 'Jamba 1.5 Large - –≤–µ–ª–∏–∫–∞ –º–æ–¥–µ–ª—å AI21 Labs –∑ –ø–æ—Ç—É–∂–Ω–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏.',
                    'AI21-Jamba-1.5-Mini': 'Jamba 1.5 Mini - –∫–æ–º–ø–∞–∫—Ç–Ω–∞ –º–æ–¥–µ–ª—å AI21 Labs –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.',
                    
                    // Cohere Command models
                    'Cohere-command-r-08-2024': 'Command R - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –º–æ–¥–µ–ª—å –≤—ñ–¥ Cohere –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–µ–∫—Å—Ç–æ–º.',
                    'Cohere-command-r-plus-08-2024': 'Command R+ - –ø–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è Command R –∑ –∫—Ä–∞—â–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏.',
                    
                    // Meta Llama models
                    'Meta-Llama-3.1-8B-Instruct': 'Llama 3.1 8B - –º–æ–¥–µ–ª—å Meta –∑ 8 –º—ñ–ª—å—è—Ä–¥—ñ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤. –®–≤–∏–¥–∫–∞ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞.',
                    'Meta-Llama-3.1-405B-Instruct': 'Llama 3.1 405B - –ù–ê–ô–ë–Ü–õ–¨–®–ê –º–æ–¥–µ–ª—å –∑ 405 –º—ñ–ª—å—è—Ä–¥—ñ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤! –ù–∞–π—Ä–æ–∑—É–º–Ω—ñ—à–∞, –∞–ª–µ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–∞.',
                    
                    // Mistral models
                    'Mistral-Nemo': 'Mistral Nemo - –º–æ–¥–µ–ª—å –≤—ñ–¥ Mistral AI –∑ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —è–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.'
                };
                
                this.initEventListeners();
                this.initSpeech();
                this.initVoiceControls();
                this.loadAvailableModels(); // –î–æ–¥–∞—é –¥–∏–Ω–∞–º—ñ—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
                
                this.addMessage('assistant', '–ü—Ä–∏–≤—ñ—Ç! –Ø –ê–¢–õ–ê–° - –≤–∞—à AI –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π...');
            }
            
            initEventListeners() {
                this.sendBtn.addEventListener('click', () => this.sendMessage());
                this.input.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') this.sendMessage();
                });
                this.input.addEventListener('input', () => {
                    this.input.classList.toggle('has-text', this.input.value.trim().length > 0);
                });
                this.voiceBtn.addEventListener('click', () => this.toggleVoice());
                this.modelSelect.addEventListener('change', () => {
                    this.updateModelInfo();
                    this.showModelInfoTemporary();
                });
                
                // Initialize model info
                this.updateModelInfo();
                
                // Initialize connection status
                this.updateConnectionStatus('connected');
                this.checkConnectionStatus();
                
                // Check connection every 30 seconds
                setInterval(() => this.checkConnectionStatus(), 30000);
            }
            
            initVoiceControls() {
                // TTS Control Button
                this.ttsControlBtn.addEventListener('click', () => {
                    if (this.ttsControlBtn.classList.contains('pending')) {
                        this.enableTTS();
                    } else {
                        this.toggleTTS();
                    }
                });
                
                // STT Control Button  
                this.sttControlBtn.addEventListener('click', () => {
                    if (this.sttControlBtn.classList.contains('pending')) {
                        this.enableSTT();
                    } else {
                        this.toggleSTT();
                    }
                });
                
                // Voice Only Button
                this.voiceOnlyBtn.addEventListener('click', () => {
                    if (!this.voiceOnlyBtn.classList.contains('disabled')) {
                        this.toggleVoiceOnlyMode();
                    }
                });
                
                // ATLAS title click - adjust VAD sensitivity
                this.atlasTitle.addEventListener('click', () => {
                    this.adjustVADSensitivity();
                });
                
                // Update voice only button state
                this.updateVoiceOnlyButton();
            }
            
            initSpeech() {
                // Mobile-specific Speech Recognition setup
                this.setupSpeechRecognition();
                
                // Speech Synthesis with mobile fixes
                this.synthesis = window.speechSynthesis;
                
                // Fix for mobile TTS - load voices
                if (this.synthesis) {
                    this.loadVoices();
                    if (speechSynthesis.onvoiceschanged !== undefined) {
                        speechSynthesis.onvoiceschanged = () => this.loadVoices();
                    }
                }
            }
            
            loadVoices() {
                this.voices = this.synthesis.getVoices();
                console.log('üîä Available voices:', this.voices.length);
                
                // Find Ukrainian or English voice
                this.ukrainianVoice = this.voices.find(voice => 
                    voice.lang.includes('uk') || voice.lang.includes('UA')
                );
                this.englishVoice = this.voices.find(voice => 
                    voice.lang.includes('en') && voice.lang.includes('US')
                );
                
                console.log('üîä Ukrainian voice:', this.ukrainianVoice?.name);
                console.log('üîä English voice:', this.englishVoice?.name);
            }
            
            setupSpeechRecognition() {
                const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                if (!SpeechRecognition) {
                    console.log('üé§ Speech Recognition not supported');
                    return;
                }
                
                this.recognition = new SpeechRecognition();
                
                // Mobile-optimized settings
                this.recognition.continuous = false;
                this.recognition.interimResults = true; // Enable interim results for mobile
                this.recognition.lang = 'uk-UA';
                
                // Additional mobile settings
                try {
                    this.recognition.maxAlternatives = 1;
                    this.recognition.serviceURI = ''; // Use default service
                } catch (e) {
                    console.log('üé§ Advanced settings not supported:', e.message);
                }
                
                this.recognition.onstart = () => {
                    console.log('üé§ Speech recognition started');
                    this.isListening = true;
                    this.voiceBtn.classList.add('active');
                    this.voiceBtn.textContent = 'üî¥';
                    
                    // Mobile vibration feedback if available
                    if ('vibrate' in navigator) {
                        navigator.vibrate(100);
                    }
                };
                
                this.recognition.onresult = (event) => {
                    console.log('üé§ Speech recognition result received');
                    
                    // Additional self-listening prevention - ignore very short results during TTS
                    if (this.isTTSSpeaking && this.synthesis && this.synthesis.speaking) {
                        let totalLength = 0;
                        for (let i = event.resultIndex; i < event.results.length; i++) {
                            totalLength += event.results[i][0].transcript.length;
                        }
                        
                        // Ignore very short recognition results during TTS (likely echo)
                        if (totalLength < 3) {
                            console.log('üé§ Ignoring very short result during TTS (likely echo)');
                            return;
                        }
                    }
                    
                    let finalTranscript = '';
                    let interimTranscript = '';
                    
                    for (let i = event.resultIndex; i < event.results.length; i++) {
                        const transcript = event.results[i][0].transcript;
                        if (event.results[i].isFinal) {
                            finalTranscript += transcript;
                        } else {
                            interimTranscript += transcript;
                        }
                    }
                    
                    // Check if TTS is currently speaking - route to interruption logic
                    if (this.isTTSSpeaking && this.synthesis && this.synthesis.speaking) {
                        // If TTS is actively speaking, route through our new detection logic
                        console.log('üé§ Processing speech during TTS (potential interruption)');
                        this.handleSpeechDetected(finalTranscript, interimTranscript);
                        return;
                    }
                    
                    // Show interim results (normal mode - no TTS active)
                    if (interimTranscript) {
                        this.input.value = interimTranscript;
                        this.input.style.fontStyle = 'italic';
                        this.input.style.opacity = '0.7';
                    }
                    
                    // Use final result (normal mode - no TTS active)
                    if (finalTranscript) {
                        console.log('üé§ Final transcript:', finalTranscript);
                        this.input.value = finalTranscript;
                        this.input.style.fontStyle = 'normal';
                        this.input.style.opacity = '1';
                        this.input.classList.add('has-text');
                        
                        // Mobile vibration feedback
                        if ('vibrate' in navigator) {
                            navigator.vibrate(200);
                        }
                        
                        // Auto-send in voice-only mode or desktop, manual on mobile chat mode
                        if (this.voiceOnlyMode || (!this.isMobile() && !this.voiceOnlyMode)) {
                            setTimeout(() => this.sendMessage(), 500);
                        }
                    }
                };
                
                this.recognition.onend = () => {
                    console.log('üé§ Speech recognition ended');
                    this.isListening = false;
                    this.voiceBtn.classList.remove('active');
                    this.voiceBtn.textContent = 'üé§';
                    
                    // Reset input style
                    this.input.style.fontStyle = 'normal';
                    this.input.style.opacity = '1';
                };
                
                this.recognition.onerror = (event) => {
                    console.error('üé§ Speech recognition error:', event.error, event);
                    this.isListening = false;
                    this.voiceBtn.classList.remove('active');
                    this.voiceBtn.textContent = 'üé§';
                    
                    // Reset input style
                    this.input.style.fontStyle = 'normal';
                    this.input.style.opacity = '1';
                    
                    let errorMsg = '–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É';
                    switch (event.error) {
                        case 'not-allowed':
                        case 'permission-denied':
                            errorMsg = '–î–æ—Å—Ç—É–ø –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∑–∞–º–æ–∫ –±—ñ–ª—è –∞–¥—Ä–µ—Å–Ω–æ–≥–æ —Ä—è–¥–∫–∞ —Ç–∞ –¥–æ–∑–≤–æ–ª—å—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞.';
                            break;
                        case 'no-speech':
                            errorMsg = '–ú–æ–≤–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç–∏ –≥–æ–ª–æ—Å–Ω—ñ—à–µ —Ç–∞ —á—ñ—Ç–∫—ñ—à–µ.';
                            break;
                        case 'network':
                            errorMsg = '–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑\'—î–¥–Ω–∞–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.';
                            break;
                        case 'audio-capture':
                            errorMsg = '–ú—ñ–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞.';
                            break;
                        case 'aborted':
                            return; // Don't show error for user-initiated stop
                    }
                    this.addMessage('error', errorMsg);
                };
            }
            
            isMobile() {
                return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            }
            
            async toggleVoice() {
                if (!this.sttEnabled) {
                    this.addMessage('error', '–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–º–∫–Ω—ñ—Ç—å –º—ñ–∫—Ä–æ—Ñ–æ–Ω –∫–Ω–æ–ø–∫–æ—é üé§ –≤–≥–æ—Ä—ñ');
                    return;
                }
                
                if (!this.recognition) {
                    this.addMessage('error', '–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ Chrome, Edge –∞–±–æ Safari.');
                    return;
                }
                
                if (this.isListening) {
                    console.log('üé§ Stopping speech recognition...');
                    this.recognition.stop();
                    return;
                }
                
                try {
                    console.log('üé§ Starting speech recognition...');
                    
                    // Clear any previous input styling
                    this.input.style.fontStyle = 'normal';
                    this.input.style.opacity = '1';
                    
                    this.recognition.start();
                    
                } catch (error) {
                    console.error('üé§ Error starting recognition:', error);
                    
                    let errorMsg = '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É.';
                    if (error.message && error.message.includes('already started')) {
                        errorMsg = '–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–µ. –ó–∞—á–µ–∫–∞–π—Ç–µ –∞–±–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É.';
                    }
                    
                    this.addMessage('error', errorMsg);
                }
            }
            
            speak(text) {
                if (!this.synthesis || !this.ttsEnabled || !text || text.trim().length === 0) {
                    return;
                }
                
                console.log('üîä Starting TTS for:', text.substring(0, 50) + '...');
                
                // Cancel any ongoing speech
                this.synthesis.cancel();
                
                // Mobile fix: small delay to ensure cancel worked
                setTimeout(() => {
                    const utterance = new SpeechSynthesisUtterance(text);
                    
                    // Set language and voice
                    const isUkrainian = /[–∞-—è—ó—ñ—î“ë]/i.test(text);
                    if (isUkrainian && this.ukrainianVoice) {
                        utterance.voice = this.ukrainianVoice;
                        utterance.lang = 'uk-UA';
                    } else if (!isUkrainian && this.englishVoice) {
                        utterance.voice = this.englishVoice;
                        utterance.lang = 'en-US';
                    } else {
                        utterance.lang = isUkrainian ? 'uk-UA' : 'en-US';
                    }
                    
                    // Mobile-optimized settings
                    utterance.rate = this.isMobile() ? 0.8 : 0.9;  // Slower on mobile
                    utterance.volume = 0.8;
                    utterance.pitch = 1.0;
                    
                    // Event handlers for debugging and voice mode
                    utterance.onstart = () => {
                        console.log('üîä TTS started:', utterance.lang, utterance.voice?.name);
                        this.isTTSSpeaking = true;
                        
                        if (this.voiceOnlyMode) {
                            // In pure voice mode, allow interruption but ignore TTS self-speech
                            // Don't completely disable mic - just mark TTS as speaking for filtering
                            this.disableInputDuringTTS();
                            this.updateSingleVoiceButton();
                            console.log('üé§ TTS started - mic active but filtering TTS speech, allowing interruption');
                        }
                    };
                    
                    utterance.onend = () => {
                        console.log('üîä TTS ended');
                        this.isTTSSpeaking = false;
                        this.speechStartTime = null; // Reset speech timing when TTS ends
                        
                        if (this.voiceOnlyMode) {
                            // In pure voice mode, continue listening after TTS ends
                            this.enableInputAfterTTS();
                            this.updateSingleVoiceButton();
                            console.log('üé§ TTS ended - mic continues listening in voice mode');
                        }
                    };
                    
                    utterance.onerror = (event) => {
                        console.error('üîä TTS error:', event.error, event);
                        
                        // Try fallback without specific voice on error
                        if (event.error === 'voice-unavailable' && utterance.voice) {
                            console.log('üîä Retrying TTS without specific voice...');
                            const fallbackUtterance = new SpeechSynthesisUtterance(text);
                            fallbackUtterance.lang = utterance.lang;
                            fallbackUtterance.rate = utterance.rate;
                            fallbackUtterance.volume = utterance.volume;
                            this.synthesis.speak(fallbackUtterance);
                        }
                    };
                    
                    utterance.onboundary = (event) => {
                        if (event.name === 'sentence') {
                            console.log('üîä TTS sentence boundary');
                        }
                    };
                    
                    try {
                        this.synthesis.speak(utterance);
                        
                        // Mobile fix: check if synthesis started
                        if (this.isMobile()) {
                            setTimeout(() => {
                                if (this.synthesis.pending === false && this.synthesis.speaking === false) {
                                    console.log('üîä TTS failed to start on mobile, retrying...');
                                    this.synthesis.speak(utterance);
                                }
                            }, 100);
                        }
                        
                    } catch (error) {
                        console.error('üîä TTS speak error:', error);
                    }
                    
                }, this.isMobile() ? 200 : 50);
            }
            
            // Voice Control Methods
            async enableTTS() {
                console.log('üîä Enabling TTS...');
                
                if (!this.synthesis) {
                    this.addMessage('error', '–°–∏–Ω—Ç–µ–∑ –º–æ–≤–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ');
                    return;
                }
                
                // First mark as pending while we test
                this.ttsControlBtn.classList.remove('pending');
                this.ttsControlBtn.classList.add('active');
                this.ttsControlBtn.style.opacity = '0.5';
                this.ttsControlBtn.title = '–ê–∫—Ç–∏–≤–∞—Ü—ñ—è TTS...';
                
                // Load voices if not loaded
                if (!this.voices || this.voices.length === 0) {
                    this.loadVoices();
                }
                
                // Test TTS activation - this is crucial for mobile browsers
                const testUtterance = new SpeechSynthesisUtterance('TTS –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ');
                testUtterance.volume = 0.5;
                testUtterance.rate = 1.2;
                testUtterance.pitch = 1.0;
                
                // Set language
                const isUkrainian = true;
                if (isUkrainian && this.ukrainianVoice) {
                    testUtterance.voice = this.ukrainianVoice;
                    testUtterance.lang = 'uk-UA';
                } else if (!isUkrainian && this.englishVoice) {
                    testUtterance.voice = this.englishVoice;
                    testUtterance.lang = 'en-US';
                } else {
                    testUtterance.lang = 'uk-UA';
                }
                
                testUtterance.onstart = () => {
                    console.log('üîä TTS activation test started');
                    this.ttsEnabled = true;
                    this.ttsControlBtn.style.opacity = '1';
                    this.ttsControlBtn.title = '–í–∏–º–∫–Ω—É—Ç–∏ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è';
                };
                
                testUtterance.onend = () => {
                    console.log('üîä TTS successfully activated and tested');
                    this.addMessage('assistant', 'üîä –û–∑–≤—É—á—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ç–∞ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ');
                    this.updateVoiceOnlyButton();
                };
                
                testUtterance.onerror = (event) => {
                    console.error('üîä TTS activation failed:', event);
                    this.ttsControlBtn.classList.remove('active');
                    this.ttsControlBtn.classList.add('pending');
                    this.ttsControlBtn.style.opacity = '1';
                    this.ttsControlBtn.title = '–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É';
                    this.ttsEnabled = false;
                    
                    this.addMessage('error', `–ù–µ –≤–¥–∞–ª–æ—Å—è –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ TTS: ${event.error}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.`);
                };
                
                try {
                    console.log('üîä Starting TTS test utterance...');
                    this.synthesis.speak(testUtterance);
                    
                    // Fallback check for mobile browsers that don't fire events properly
                    setTimeout(() => {
                        if (!this.synthesis.speaking && !this.synthesis.pending) {
                            console.log('üîä TTS seems to have failed silently, enabling anyway...');
                            this.ttsEnabled = true;
                            this.ttsControlBtn.style.opacity = '1';
                            this.ttsControlBtn.title = '–í–∏–º–∫–Ω—É—Ç–∏ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è';
                            this.addMessage('assistant', 'üîä TTS —É–≤—ñ–º–∫–Ω–µ–Ω–æ (–º–æ–∂–µ –ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó –Ω–∞ –º–æ–±—ñ–ª—å–Ω–æ–º—É)');
                            this.updateVoiceOnlyButton();
                        }
                    }, 2000);
                    
                } catch (error) {
                    console.error('üîä TTS activation error:', error);
                    this.ttsControlBtn.classList.remove('active');
                    this.ttsControlBtn.classList.add('pending');
                    this.ttsControlBtn.style.opacity = '1';
                    this.ttsEnabled = false;
                    this.addMessage('error', `–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó TTS: ${error.message}`);
                }
            }
            
            toggleTTS() {
                this.ttsEnabled = !this.ttsEnabled;
                
                if (this.ttsEnabled) {
                    this.ttsControlBtn.classList.add('active');
                    this.ttsControlBtn.title = '–í–∏–º–∫–Ω—É—Ç–∏ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è';
                } else {
                    this.ttsControlBtn.classList.remove('active');
                    this.ttsControlBtn.title = '–£–≤—ñ–º–∫–Ω—É—Ç–∏ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è';
                    // Stop any ongoing speech
                    if (this.synthesis) {
                        this.synthesis.cancel();
                    }
                }
                
                this.updateVoiceOnlyButton();
            }
            
            async enableSTT() {
                console.log('üé§ Enabling STT...');
                
                if (!this.recognition) {
                    this.addMessage('error', '–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ');
                    return;
                }
                
                try {
                    // Request microphone permission
                    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                        stream.getTracks().forEach(track => track.stop());
                        
                        // Initialize Voice Activity Detection
                        const vadInitialized = await this.initVoiceActivation();
                        
                        this.sttEnabled = true;
                        this.sttControlBtn.classList.remove('pending');
                        this.sttControlBtn.classList.add('active');
                        this.sttControlBtn.title = '–í–∏–º–∫–Ω—É—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω';
                        
                        console.log('üé§ STT enabled successfully');
                        
                        if (vadInitialized) {
                            console.log('üé§ Voice Activity Detection initialized');
                            this.startVoiceActivationDetection();
                        }
                        
                        this.updateVoiceOnlyButton();
                        
                    } else {
                        throw new Error('getUserMedia not supported');
                    }
                } catch (error) {
                    console.error('üé§ STT permission error:', error);
                    
                    let errorMsg = '–ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–º–∫–Ω—É—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω.';
                    if (error.name === 'NotAllowedError') {
                        errorMsg = '–î–æ—Å—Ç—É–ø –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∑–∞–º–æ–∫ –±—ñ–ª—è –∞–¥—Ä–µ—Å–∏ —Ç–∞ –¥–æ–∑–≤–æ–ª—å—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞.';
                    }
                    
                    this.addMessage('error', errorMsg);
                }
            }
            
            toggleSTT() {
                this.sttEnabled = !this.sttEnabled;
                
                if (this.sttEnabled) {
                    this.sttControlBtn.classList.add('active');
                    this.sttControlBtn.title = '–í–∏–º–∫–Ω—É—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω';
                    this.startVoiceActivationDetection();
                } else {
                    this.sttControlBtn.classList.remove('active');
                    this.sttControlBtn.title = '–£–≤—ñ–º–∫–Ω—É—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω';
                    this.stopVoiceActivationDetection();
                    // Stop any ongoing recognition
                    if (this.isListening) {
                        this.recognition.stop();
                    }
                }
                
                this.updateVoiceOnlyButton();
            }
            
            toggleVoiceOnly() {
                this.voiceOnlyMode = !this.voiceOnlyMode;
                
                if (this.voiceOnlyMode) {
                    this.voiceOnlyBtn.classList.add('active');
                    this.voiceOnlyBtn.title = '–í–∏–º–∫–Ω—É—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º';
                    this.addMessage('assistant', 'üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –ì–æ–≤–æ—Ä—ñ—Ç—å –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.');
                } else {
                    this.voiceOnlyBtn.classList.remove('active');
                    this.voiceOnlyBtn.title = '–£–≤—ñ–º–∫–Ω—É—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º';
                    this.addMessage('assistant', 'üí¨ –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º. –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –∞–±–æ –≥–æ–≤–æ—Ä–∏—Ç–∏.');
                }
            }
            
            updateVoiceOnlyButton() {
                if (this.ttsEnabled && this.sttEnabled) {
                    this.voiceOnlyBtn.classList.remove('disabled');
                    this.voiceOnlyBtn.title = '–ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º';
                } else {
                    this.voiceOnlyBtn.classList.add('disabled');
                    this.voiceOnlyBtn.classList.remove('active');
                    this.voiceOnlyMode = false;
                    this.voiceOnlyBtn.title = '–ü–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–º–∫–Ω—É—Ç–∏ TTS —ñ STT';
                }
            }

            toggleVoiceOnlyMode() {
                if (!this.sttEnabled || !this.ttsEnabled) {
                    this.addMessage('error', '–î–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–º–∫–Ω—É—Ç–∏ STT —Ç–∞ TTS');
                    return;
                }

                this.voiceOnlyMode = !this.voiceOnlyMode;
                
                if (this.voiceOnlyMode) {
                    this.startVoiceOnlyMode();
                } else {
                    this.stopVoiceOnlyMode();
                }
                
                this.updateChatControls();
            }

            startVoiceOnlyMode() {
                console.log('üé§ Starting Voice Only Mode');
                this.voiceOnlyMode = true;
                this.isContinuousListening = true;
                
                // Save STT state before entering voice-only mode
                this.sttStateBeforeVoiceMode = this.sttEnabled;
                
                // Initialize Voice Activity Detection if not already done
                if (!this.audioContext) {
                    this.initVoiceActivation().then(success => {
                        if (success) {
                            console.log('üé§ VAD initialized for voice-only mode');
                            this.startVoiceActivationDetection();
                        }
                    });
                } else {
                    this.startVoiceActivationDetection();
                }
                
                // Update voice only button
                this.voiceOnlyBtn.classList.add('active');
                this.voiceOnlyBtn.innerHTML = 'üé§';
                this.voiceOnlyBtn.title = '–†–µ–∂–∏–º –¥—ñ–∞–ª–æ–≥—É –∞–∫—Ç–∏–≤–Ω–∏–π - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –∑—É–ø–∏–Ω–∫–∏';
                
                this.addMessage('system', 'üé§ –ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –ì–æ–≤–æ—Ä—ñ—Ç—å –ø—Ä–∏—Ä–æ–¥–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ –≤–∞—Å —Å–ª—É—Ö–∞—î.');
                
                // Start continuous listening
                this.startContinuousListening();
            }

            stopVoiceOnlyMode() {
                console.log('üé§ Stopping Voice Only Mode');
                this.voiceOnlyMode = false;
                this.isContinuousListening = false;
                this.isCollectingSpeech = false;
                this.currentTranscript = '';
                this.speechStartTime = null;
                
                // Clear any pending timers
                if (this.speechCollectionTimer) {
                    clearTimeout(this.speechCollectionTimer);
                    this.speechCollectionTimer = null;
                }
                
                // Stop voice activation detection
                this.stopVoiceActivationDetection();
                
                // Stop continuous listening and clear all timers
                this.stopContinuousListening();
                this.stopCurrentTTS();
                
                // Stop any active recognition and reset listening state
                if (this.recognition && this.isListening) {
                    try {
                        this.recognition.stop();
                    } catch (error) {
                        console.log('üé§ Recognition already stopped');
                    }
                }
                this.isListening = false;
                
                // Restore STT state to what it was before voice-only mode
                if (this.sttStateBeforeVoiceMode && !this.sttEnabled) {
                    console.log('üé§ Restoring STT state after voice-only mode');
                    this.sttEnabled = true;
                    this.sttControlBtn.classList.remove('pending');
                    this.sttControlBtn.classList.add('active');
                    this.sttControlBtn.title = '–í–∏–º–∫–Ω—É—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω';
                    this.startVoiceActivationDetection();
                }
                
                // Reset voice only button (in header controls)
                this.voiceOnlyBtn.classList.remove('active');
                this.voiceOnlyBtn.innerHTML = 'üé≠';
                this.voiceOnlyBtn.title = '–£–≤—ñ–º–∫–Ω—É—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º';
                
                // Update chat controls to show normal input again
                this.updateChatControls();
                
                // Update voice and STT button states after exiting voice mode
                this.updateVoiceButtonState();
                
                this.addMessage('system', 'üé§ –ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º –≤–∏–º–∫–Ω–µ–Ω–æ');
            }

            updateChatControls() {
                const sendBtn = document.getElementById('sendBtn');
                const voiceBtn = document.getElementById('voiceBtn');
                const chatControls = document.querySelector('.chat-controls');
                const messageInput = document.getElementById('messageInput');
                const inputContainer = document.querySelector('.input-container');
                
                if (this.voiceOnlyMode) {
                    // Hide send and voice buttons
                    if (sendBtn) sendBtn.style.display = 'none';
                    if (voiceBtn) voiceBtn.style.display = 'none';
                    
                    // Hide message input completely
                    if (messageInput) messageInput.style.display = 'none';
                    
                    // Create or show big stop button instead of input
                    let bigStopBtn = document.getElementById('bigStopVoiceBtn');
                    if (!bigStopBtn) {
                        bigStopBtn = document.createElement('button');
                        bigStopBtn.id = 'bigStopVoiceBtn';
                        bigStopBtn.className = 'big-stop-voice-btn';
                        bigStopBtn.innerHTML = '–í–∏–π—Ç–∏ –∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É';
                        bigStopBtn.onclick = () => this.stopVoiceOnlyMode();
                        inputContainer.appendChild(bigStopBtn);
                    }
                    bigStopBtn.style.display = 'block';
                    
                    // Create or update single voice control button in controls area
                    let singleVoiceBtn = document.getElementById('singleVoiceBtn');
                    if (!singleVoiceBtn) {
                        singleVoiceBtn = document.createElement('button');
                        singleVoiceBtn.id = 'singleVoiceBtn';
                        singleVoiceBtn.className = 'voice-btn listening';
                        singleVoiceBtn.innerHTML = 'üé§';
                        singleVoiceBtn.title = '–°–ª—É—Ö–∞—é...';
                        chatControls.appendChild(singleVoiceBtn);
                    }
                    
                    // Add stop dialog button in controls
                    let stopDialogBtn = document.getElementById('stopDialogBtn');
                    if (!stopDialogBtn) {
                        stopDialogBtn = document.createElement('button');
                        stopDialogBtn.id = 'stopDialogBtn';
                        stopDialogBtn.className = 'stop-dialog-btn';
                        stopDialogBtn.innerHTML = '‚ùå';
                        stopDialogBtn.title = '–í–∏–π—Ç–∏ –∑ –¥—ñ–∞–ª–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É';
                        stopDialogBtn.onclick = () => this.stopVoiceOnlyMode();
                        chatControls.appendChild(stopDialogBtn);
                    }
                    
                    this.updateSingleVoiceButton();
                    singleVoiceBtn.style.display = 'inline-flex';
                    stopDialogBtn.style.display = 'inline-flex';
                    
                } else {
                    // Show normal controls
                    if (sendBtn) sendBtn.style.display = 'inline-flex';
                    if (voiceBtn) {
                        voiceBtn.style.display = 'inline-flex';
                        // Reset voice button to normal microphone state - will be properly updated by updateVoiceButtonState
                        voiceBtn.classList.remove('listening', 'speaking', 'ready');
                    }
                    
                    // Show message input
                    if (messageInput) {
                        messageInput.style.display = 'block';
                        messageInput.disabled = false;
                        messageInput.placeholder = '–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...';
                        messageInput.style.opacity = '1';
                    }
                    
                    // Hide big stop button
                    const bigStopBtn = document.getElementById('bigStopVoiceBtn');
                    if (bigStopBtn) bigStopBtn.style.display = 'none';
                    
                    // Hide small voice controls
                    const singleVoiceBtn = document.getElementById('singleVoiceBtn');
                    const stopDialogBtn = document.getElementById('stopDialogBtn');
                    if (singleVoiceBtn) singleVoiceBtn.style.display = 'none';
                    if (stopDialogBtn) stopDialogBtn.style.display = 'none';
                    
                    // Update button states after showing normal controls
                    setTimeout(() => {
                        this.updateVoiceButtonState();
                    }, 50);
                }
            }

            updateSingleVoiceButton() {
                const button = document.getElementById('singleVoiceBtn');
                if (!button) return;
                
                if (this.isTTSSpeaking) {
                    button.innerHTML = '‚èπÔ∏è';
                    button.title = '–ó—É–ø–∏–Ω–∏—Ç–∏ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è';
                    button.className = 'voice-btn speaking';
                    button.onclick = () => this.stopCurrentTTS();
                } else if (this.isContinuousListening) {
                    button.innerHTML = 'üé§';
                    button.title = '–°–ª—É—Ö–∞—é... (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —á–µ—Ä–≤–æ–Ω—É –∫–Ω–æ–ø–∫—É ‚ùå –¥–ª—è –≤–∏—Ö–æ–¥—É)';
                    button.className = 'voice-btn listening';
                    button.onclick = () => {
                        // In listening mode, clicking the mic should not stop the mode
                        // Use the X button to stop the mode
                        this.addMessage('system', '–î–ª—è –≤–∏—Ö–æ–¥—É –∑ –¥—ñ–∞–ª–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å —á–µ—Ä–≤–æ–Ω—É –∫–Ω–æ–ø–∫—É ‚ùå');
                    };
                } else {
                    button.innerHTML = 'üé§';
                    button.title = '–ü–æ—á–∞—Ç–∏ —Å–ª—É—Ö–∞—Ç–∏';
                    button.className = 'voice-btn ready';
                    button.onclick = () => this.startContinuousListening();
                }
            }
            
            
            // Continuous Voice Mode Methods - –ù–û–í–ò–ô –ú–ï–•–ê–ù–Ü–ó–ú
            startContinuousListening() {
                if (!this.recognition || !this.sttEnabled || this.isTTSSpeaking) {
                    console.log('üé§ Cannot start continuous listening - STT not available');
                    return;
                }
                
                console.log('üé§ Starting NEW continuous listening mode');
                this.isContinuousListening = true;
                this.currentTranscript = '';
                this.isCollectingSpeech = false;
                
                // Reset speech collection timer
                if (this.speechCollectionTimer) {
                    clearTimeout(this.speechCollectionTimer);
                    this.speechCollectionTimer = null;
                }
                
                this.setupContinuousRecognition();
                this.startRecognition();
            }
            
            setupContinuousRecognition() {
                this.recognition.continuous = true;
                this.recognition.interimResults = true;
                
                // Store speech detection variables for TTS interruption
                this.speechDetectionCount = 0;
                this.speechDetectionThreshold = this.isTTSSpeaking ? 3 : 1; // Higher threshold during TTS
                
                this.recognition.onresult = (event) => {
                    if (!this.isContinuousListening) return;
                    
                    let finalTranscript = '';
                    let interimTranscript = '';
                    
                    // Extract final and interim results
                    for (let i = event.resultIndex; i < event.results.length; i++) {
                        const transcript = event.results[i][0].transcript.trim();
                        if (event.results[i].isFinal) {
                            finalTranscript += transcript + ' ';
                        } else {
                            interimTranscript += transcript;
                        }
                    }
                    
                    // Handle speech detection with threshold
                    if (finalTranscript || interimTranscript) {
                        this.handleSpeechDetected(finalTranscript, interimTranscript);
                    }
                };
                
                this.recognition.onend = () => {
                    if (this.isContinuousListening && this.voiceOnlyMode) {
                        // Reset speech detection count
                        this.speechDetectionCount = 0;
                        // Restart recognition automatically
                        setTimeout(() => {
                            if (this.isContinuousListening) {
                                this.startRecognition();
                            }
                        }, 100);
                    }
                };
                
                this.recognition.onerror = (event) => {
                    console.error('üé§ Recognition error:', event.error);
                    if (this.isContinuousListening) {
                        // Reset speech detection count on error
                        this.speechDetectionCount = 0;
                        // Retry after error
                        setTimeout(() => {
                            if (this.isContinuousListening) {
                                this.startRecognition();
                            }
                        }, 500);
                    }
                };
            }
            
            handleSpeechDetected(finalText, interimText) {
                console.log('üé§ Speech detected - Final:', finalText, 'Interim:', interimText);
                
                // In voice-only mode during TTS, apply interruption logic
                if (this.isTTSSpeaking) {
                    // Start timing if not already started
                    if (!this.speechStartTime) {
                        this.speechStartTime = Date.now();
                        console.log('üé§ Started recording user speech during TTS (will record from first second)');
                    }
                    
                    const speechDuration = Date.now() - this.speechStartTime;
                    console.log(`üé§ User speech duration: ${speechDuration}ms (need ${this.minimumInterruptDuration}ms to interrupt)`);
                    
                    // Always start collecting speech immediately (from first second)
                    if (!this.isCollectingSpeech) {
                        this.isCollectingSpeech = true;
                        console.log('üé§ Started collecting speech from first second');
                    }
                    
                    // Update accumulated transcript (recording from first second)
                    if (finalText) {
                        this.currentTranscript += finalText;
                    }
                    
                    // Show current text in transparent button (accumulated + current interim)
                    const displayText = this.currentTranscript + interimText;
                    if (displayText.trim()) {
                        this.input.value = displayText;
                        this.input.style.fontStyle = 'italic';
                        this.input.style.opacity = '0.8';
                        
                        // Also show in voice mode exit button if in voice mode
                        if (this.voiceOnlyMode) {
                            const bigStopBtn = document.getElementById('bigStopVoiceBtn');
                            if (bigStopBtn) {
                                bigStopBtn.innerHTML = displayText.trim() || '–í–∏–π—Ç–∏ –∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É';
                                bigStopBtn.style.fontSize = displayText.trim() ? '14px' : '16px';
                            }
                        }
                    }
                    
                    // If speech ended (finalText present), check duration
                    if (finalText) {
                        if (speechDuration < this.minimumInterruptDuration) {
                            // Less than 2 seconds - clear recording but don't interrupt TTS
                            console.log('üé§ Short speech (<2s) - clearing recording, TTS continues');
                            this.currentTranscript = '';
                            this.isCollectingSpeech = false;
                            this.speechStartTime = null;
                            this.input.value = '';
                            this.input.style.fontStyle = 'normal';
                            this.input.style.opacity = '1';
                            
                            // Clear any pending timer
                            if (this.speechCollectionTimer) {
                                clearTimeout(this.speechCollectionTimer);
                                this.speechCollectionTimer = null;
                            }
                            
                            // Reset voice mode button text if in voice mode
                            if (this.voiceOnlyMode) {
                                const bigStopBtn = document.getElementById('bigStopVoiceBtn');
                                if (bigStopBtn) {
                                    bigStopBtn.innerHTML = '–í–∏–π—Ç–∏ –∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É';
                                    bigStopBtn.style.fontSize = '16px';
                                }
                            }
                            return;
                        } else {
                            // 2+ seconds - interrupt TTS and process speech
                            console.log('üé§ Long speech (2+ seconds) - interrupting TTS and processing');
                            this.stopCurrentTTS();
                            this.speechStartTime = null;
                            // Continue to normal processing below
                        }
                    }
                    
                    // If still speaking during TTS, don't set timer yet
                    return;
                }
                
                // Normal mode (no TTS) - start collecting speech if not already
                if (!this.isCollectingSpeech) {
                    this.isCollectingSpeech = true;
                    console.log('üé§ Started collecting speech (normal mode)');
                }
                
                // Update accumulated transcript
                if (finalText) {
                    this.currentTranscript += finalText;
                }
                
                // Show current text in transparent button (accumulated + current interim)
                const displayText = this.currentTranscript + interimText;
                if (displayText.trim()) {
                    this.input.value = displayText;
                    this.input.style.fontStyle = 'italic';
                    this.input.style.opacity = '0.8';
                    
                    // Also show in voice mode exit button if in voice mode
                    if (this.voiceOnlyMode) {
                        const bigStopBtn = document.getElementById('bigStopVoiceBtn');
                        if (bigStopBtn) {
                            bigStopBtn.innerHTML = displayText.trim() || '–í–∏–π—Ç–∏ –∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É';
                            bigStopBtn.style.fontSize = displayText.trim() ? '14px' : '16px';
                        }
                    }
                }
                
                // Reset timer for speech collection
                this.resetSpeechTimer();
            }
            
            resetSpeechTimer() {
                // Clear existing timer
                if (this.speechCollectionTimer) {
                    clearTimeout(this.speechCollectionTimer);
                }
                
                // Set shorter timer for voice-only mode, longer for mixed mode
                const timerDuration = this.voiceOnlyMode ? 2000 : 3000; // 2s for voice-only, 3s for mixed
                this.speechCollectionTimer = setTimeout(() => {
                    this.processSpeechCollection();
                }, timerDuration);
                
                console.log(`üé§ Speech timer reset - ${timerDuration/1000}s to send (voice-only: ${this.voiceOnlyMode})`);
            }
            
            processSpeechCollection() {
                if (!this.currentTranscript.trim()) {
                    console.log('üé§ No speech to process');
                    this.isCollectingSpeech = false;
                    this.speechStartTime = null;
                    return;
                }
                
                console.log('üé§ Processing collected speech:', this.currentTranscript);
                
                // Clear input styling and set final text
                this.input.style.fontStyle = 'normal';
                this.input.style.opacity = '1';
                this.input.value = this.currentTranscript.trim();
                
                // Send the message
                this.sendMessage();
                
                // Reset for next collection
                this.currentTranscript = '';
                this.isCollectingSpeech = false;
                this.speechStartTime = null;
                this.input.value = '';
                
                // Reset voice mode button text if in voice mode
                if (this.voiceOnlyMode) {
                    const bigStopBtn = document.getElementById('bigStopVoiceBtn');
                    if (bigStopBtn) {
                        bigStopBtn.innerHTML = '–í–∏–π—Ç–∏ –∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É';
                        bigStopBtn.style.fontSize = '16px';
                    }
                }
                
                // Clear timer
                if (this.speechCollectionTimer) {
                    clearTimeout(this.speechCollectionTimer);
                    this.speechCollectionTimer = null;
                }
            }
            
            startRecognition() {
                try {
                    this.recognition.start();
                    this.updateSingleVoiceButton();
                } catch (error) {
                    if (error.name === 'InvalidStateError') {
                        // Recognition already started, ignore
                        console.log('üé§ Recognition already active');
                    } else {
                        console.error('üé§ Error starting recognition:', error);
                    }
                }
            }
            
            stopContinuousListening() {
                console.log('üé§ Stopping NEW continuous listening mode');
                this.isContinuousListening = false;
                this.isCollectingSpeech = false;
                
                // Clear timers
                if (this.speechCollectionTimer) {
                    clearTimeout(this.speechCollectionTimer);
                    this.speechCollectionTimer = null;
                }
                
                // Reset speech timing
                this.speechStartTime = null;
                
                // Stop recognition
                try {
                    this.recognition.stop();
                } catch (error) {
                    console.log('üé§ Recognition already stopped');
                }
                
                // Reset text
                this.currentTranscript = '';
                this.input.value = '';
                this.input.style.fontStyle = 'normal';
                this.input.style.opacity = '1';
                
                this.updateSingleVoiceButton();
            }
            
            // Override old methods with new logic
            stopCurrentTTS() {
                if (this.synthesis) {
                    this.synthesis.cancel();
                    console.log('üîä TTS stopped by user');
                }
                this.isTTSSpeaking = false;
                
                // Reset speech timing when stopping TTS
                this.speechStartTime = null;
                
                // Resume microphone if it was paused for TTS
                
                // In voice mode, microphone continues listening automatically
                // No need to restart - the continuous mechanism handles this
                if (this.voiceOnlyMode) {
                    this.enableInputAfterTTS();
                    this.updateSingleVoiceButton();
                    console.log('üé§ Microphone continues listening after TTS stop');
                }
            }
            
            disableInputDuringTTS() {
                const messageInput = document.getElementById('messageInput');
                const sendBtn = document.getElementById('sendBtn');
                const voiceBtn = document.getElementById('voiceBtn');
                
                // Disable visual input controls during TTS in voice mode
                if (messageInput) {
                    messageInput.disabled = true;
                    messageInput.style.opacity = '0.3';
                    messageInput.placeholder = '–°–∏—Å—Ç–µ–º–∞ –≥–æ–≤–æ—Ä–∏—Ç—å... (–≥–æ–≤–æ—Ä—ñ—Ç—å –¥–ª—è –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è)';
                }
                
                if (sendBtn) sendBtn.disabled = true;
                if (voiceBtn) voiceBtn.disabled = true;
            }
            
            enableInputAfterTTS() {
                const messageInput = document.getElementById('messageInput');
                const sendBtn = document.getElementById('sendBtn');
                const voiceBtn = document.getElementById('voiceBtn');
                
                if (this.voiceOnlyMode) {
                    // In voice mode, keep input disabled but change placeholder
                    if (messageInput) {
                        messageInput.disabled = true;
                        messageInput.style.opacity = '0.5';
                        messageInput.placeholder = '–ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º - –≥–æ–≤–æ—Ä—ñ—Ç—å –≤ –º—ñ–∫—Ä–æ—Ñ–æ–Ω (—á–µ—Ä–≤–æ–Ω–∞ ‚ùå –¥–ª—è –≤–∏—Ö–æ–¥—É)';
                    }
                } else {
                    // In normal mode, enable all controls
                    if (messageInput) {
                        messageInput.disabled = false;
                        messageInput.style.opacity = '1';
                        messageInput.placeholder = '–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...';
                    }
                    
                    if (sendBtn) sendBtn.disabled = false;
                    if (voiceBtn) voiceBtn.disabled = false;
                }
            }

            showModelInfoTemporary() {
                // Show model info for 3 seconds when model is changed
                this.modelInfo.style.display = 'block';
                this.modelInfo.style.opacity = '1';
                
                // Clear any existing timeout
                if (this.modelInfoTimeout) {
                    clearTimeout(this.modelInfoTimeout);
                }
                
                // Hide after 3 seconds
                this.modelInfoTimeout = setTimeout(() => {
                    this.modelInfo.style.opacity = '0';
                    setTimeout(() => {
                        this.modelInfo.style.display = 'none';
                    }, 300); // Wait for opacity transition
                }, 3000);
            }
            
            updateModelInfo() {
                const selectedModel = this.modelSelect.value;
                const description = this.modelDescriptions[selectedModel] || '–û–ø–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π';
                this.modelDescription.textContent = description;
            }
            
            updateConnectionStatus(status) {
                this.connectionStatus = status;
                this.atlasTitle.className = `${status}`;
                
                switch(status) {
                    case 'connected':
                        this.atlasTitle.title = 'ATLAS - –ó\'—î–¥–Ω–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ';
                        break;
                    case 'connecting':
                        this.atlasTitle.title = 'ATLAS - –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...';
                        break;
                    case 'disconnected':
                        this.atlasTitle.title = 'ATLAS - –ù–µ–º–∞—î –∑\'—î–¥–Ω–∞–Ω–Ω—è';
                        break;
                }
                console.log(`üì° Connection status: ${status}`);
            }
            
            checkConnectionStatus() {
                // Check server health
                fetch('/health')
                    .then(response => {
                        if (response.ok) {
                            this.updateConnectionStatus('connected');
                        } else {
                            this.updateConnectionStatus('connecting');
                        }
                    })
                    .catch(() => {
                        this.updateConnectionStatus('disconnected');
                    });
            }
            
            async sendMessage() {
                const message = this.input.value.trim();
                if (!message || this.isLoading) return;
                
                this.addMessage('user', message);
                this.input.value = '';
                this.input.classList.remove('has-text');
                this.setLoading(true);
                
                // Set connecting status during request
                this.updateConnectionStatus('connecting');
                
                try {
                    const response = await fetch('/v1/chat/completions', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            model: this.modelSelect.value,
                            messages: [
                                { role: 'system', content: '–í–∏ –∫–æ—Ä–∏—Å–Ω–∏–π –∞—Å—ñ—Å—Ç–µ–Ω—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ.' },
                                { role: 'user', content: message }
                            ],
                            stream: true // –£–≤—ñ–º–∫–Ω—É–ª–∏ streaming!
                        })
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData?.error?.message || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É');
                    }
                    
                    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è streaming
                    const messageEl = this.addMessage('assistant', '');
                    const contentEl = messageEl.querySelector('.message-text');
                    
                    let fullResponse = '';
                    let isFirstChunk = true;
                    
                    // –ß–∏—Ç–∞—î–º–æ streaming –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                    const reader = response.body.getReader();
                    const decoder = new TextDecoder();
                    
                    this.setLoading(false); // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ª–æ–∞–¥–µ—Ä
                    this.addStreamingIndicator(contentEl); // –î–æ–¥–∞—î–º–æ streaming —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    
                    while (true) {
                        const { done, value } = await reader.read();
                        if (done) break;
                        
                        const chunk = decoder.decode(value);
                        const lines = chunk.split('\n');
                        
                        for (const line of lines) {
                            if (line.startsWith('data: ')) {
                                const data = line.slice(6);
                                if (data === '[DONE]') break;
                                
                                try {
                                    const parsed = JSON.parse(data);
                                    const content = parsed?.choices?.[0]?.delta?.content;
                                    
                                    if (content) {
                                        if (isFirstChunk) {
                                            this.removeStreamingIndicator(contentEl);
                                            isFirstChunk = false;
                                        }
                                        
                                        fullResponse += content;
                                        contentEl.textContent = fullResponse;
                                        
                                        // –î–æ–¥–∞—î–º–æ typing –µ—Ñ–µ–∫—Ç
                                        contentEl.classList.add('streaming');
                                        
                                        // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª
                                        this.chat.scrollTop = this.chat.scrollHeight;
                                    }
                                } catch (e) {
                                    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –æ–∫—Ä–µ–º–∏—Ö —á–∞–Ω–∫—ñ–≤
                                }
                            }
                        }
                    }
                    
                    // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è streaming
                    contentEl.classList.remove('streaming');
                    this.updateConnectionStatus('connected');
                    
                    // Auto-speak —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è streaming
                    const shouldSpeak = this.voiceOnlyMode || this.ttsEnabled;
                    if (shouldSpeak && fullResponse) {
                        this.speak(fullResponse);
                    }
                    
                } catch (error) {
                    console.error('Error:', error);
                    this.addMessage('error', `–ü–æ–º–∏–ª–∫–∞: ${error.message}`);
                    // Set disconnected status on error
                    this.updateConnectionStatus('disconnected');
                } finally {
                    this.setLoading(false);
                }
            }
            
            addMessage(role, content) {
                const messageEl = document.createElement('div');
                messageEl.className = `message ${role}`;
                messageEl.textContent = content;
                
                this.chat.appendChild(messageEl);
                this.chat.scrollTop = this.chat.scrollHeight;
                
                this.messages.push({ role, content });
            }
            
            // Voice Activity Detection Methods
            async initVoiceActivation() {
                try {
                    // Get microphone access for voice activation
                    const stream = await navigator.mediaDevices.getUserMedia({ 
                        audio: {
                            echoCancellation: true,
                            noiseSuppression: true,
                            autoGainControl: true
                        } 
                    });
                    
                    // Create audio context and analyser
                    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                    this.analyser = this.audioContext.createAnalyser();
                    this.microphone = this.audioContext.createMediaStreamSource(stream);
                    
                    // Configure analyser
                    this.analyser.fftSize = 512;
                    this.microphone.connect(this.analyser);
                    
                    console.log('üé§ Voice activation initialized');
                    return true;
                } catch (error) {
                    console.error('üé§ Voice activation setup failed:', error);
                    return false;
                }
            }
            
            startVoiceActivationDetection() {
                if (!this.analyser || this.vadCheckInterval) {
                    return;
                }
                
                console.log('üé§ Starting voice activation detection');
                
                this.vadCheckInterval = setInterval(() => {
                    this.checkVoiceActivity();
                }, 100); // Check every 100ms
            }
            
            stopVoiceActivationDetection() {
                if (this.vadCheckInterval) {
                    clearInterval(this.vadCheckInterval);
                    this.vadCheckInterval = null;
                    console.log('üé§ Stopped voice activation detection');
                }
            }
            
            checkVoiceActivity() {
                if (!this.analyser) return;
                
                const dataArray = new Uint8Array(this.analyser.frequencyBinCount);
                this.analyser.getByteFrequencyData(dataArray);
                
                // Calculate average volume
                let sum = 0;
                for (let i = 0; i < dataArray.length; i++) {
                    sum += dataArray[i];
                }
                const average = sum / dataArray.length;
                
                // Update volume indicator
                this.updateVolumeIndicator(average);
                
                // Check if voice is detected
                const wasActivated = this.voiceActivated;
                this.voiceActivated = average > this.volumeThreshold;
                
                // Log voice activation changes
                if (this.voiceActivated && !wasActivated) {
                    console.log(`üé§ Voice activated! Volume: ${average.toFixed(1)} (threshold: ${this.volumeThreshold})`);
                    this.onVoiceActivated();
                } else if (!this.voiceActivated && wasActivated) {
                    console.log(`üé§ Voice deactivated. Volume: ${average.toFixed(1)}`);
                    this.onVoiceDeactivated();
                }
            }
            
            updateVolumeIndicator(volume) {
                if (!this.volumeIndicator) return;
                
                // Show indicator only when lower voice button is active and volume is significant
                if (this.isListening && volume > 5) {
                    this.volumeIndicator.classList.add('active');
                    
                    // Change color based on volume level
                    const intensity = Math.min(volume / 100, 1); // Normalize to 0-1
                    if (volume > this.volumeThreshold) {
                        // Voice detected - green
                        this.volumeIndicator.style.borderColor = '#00ff88';
                        this.volumeIndicator.style.color = '#00ff88';
                        this.volumeIndicator.style.backgroundColor = `rgba(0, 255, 136, ${0.2 + intensity * 0.3})`;
                    } else {
                        // Below threshold - yellow
                        this.volumeIndicator.style.borderColor = '#ffaa00';
                        this.volumeIndicator.style.color = '#ffaa00';
                        this.volumeIndicator.style.backgroundColor = `rgba(255, 170, 0, ${0.1 + intensity * 0.2})`;
                    }
                    
                    // Auto-hide after 1 second of low volume
                    clearTimeout(this.volumeHideTimer);
                    this.volumeHideTimer = setTimeout(() => {
                        if (this.volumeIndicator) {
                            this.volumeIndicator.classList.remove('active');
                        }
                    }, 1000);
                }
            }
            
            onVoiceActivated() {
                // Voice was detected - but activation only works when lower mic button is pressed
                // The actual recognition is triggered by the lower mic button press, not VAD
                console.log('üé§ Voice detected via VAD (but needs lower mic button press to activate)');
            }
            
            onVoiceDeactivated() {
                // Voice stopped - could be used for additional logic if needed
                // For now, let the existing 5-second timer handle speech collection
            }
            
            adjustVADSensitivity() {
                // Cycle through sensitivity levels: 20 (high) -> 30 (medium) -> 50 (low) -> 20...
                const levels = [20, 30, 50];
                const currentIndex = levels.indexOf(this.volumeThreshold);
                const nextIndex = (currentIndex + 1) % levels.length;
                
                this.volumeThreshold = levels[nextIndex];
                
                // Update ATLAS title with sensitivity info
                const sensitivity = this.volumeThreshold === 20 ? '–í' : 
                                   this.volumeThreshold === 30 ? '–°' : '–ù';
                
                this.atlasTitle.title = `ATLAS - –ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å: ${sensitivity === '–í' ? '–í–∏—Å–æ–∫–∞' : sensitivity === '–°' ? '–°–µ—Ä–µ–¥–Ω—è' : '–ù–∏–∑—å–∫–∞'} (${this.volumeThreshold})`;
                
                console.log(`üé§ VAD sensitivity adjusted via ATLAS click: ${sensitivity} (${this.volumeThreshold})`);
                this.addMessage('system', `üéöÔ∏è –ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞: ${sensitivity === '–í' ? '–í–∏—Å–æ–∫–∞' : sensitivity === '–°' ? '–°–µ—Ä–µ–¥–Ω—è' : '–ù–∏–∑—å–∫–∞'}`);
            }
            
            // Microphone control methods for TTS self-listening prevention
            // TTS microphone handling methods removed - now using filter-based approach
            // Microphone stays active during TTS to allow interruption detection
            // Self-listening is prevented by checking isTTSSpeaking flag in speech recognition
            
            async loadAvailableModels() {
                try {
                    console.log('üì° –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∑ API...');
                    
                    const response = await fetch('/v1/models');
                    if (!response.ok) throw new Error(`HTTP ${response.status}`);
                    
                    const data = await response.json();
                    const models = data.data || [];
                    
                    console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π`);
                    
                    // –û—á–∏—â–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ –æ–ø—Ü—ñ—ó
                    this.modelSelect.innerHTML = '';
                    
                    // –ì—Ä—É–ø—É—î–º–æ –º–æ–¥–µ–ª—ñ –∑–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
                    const modelGroups = {
                        'openai': { label: 'ü§ñ OpenAI', models: [] },
                        'microsoft': { label: 'üß† Microsoft', models: [] },
                        'meta': { label: 'ü¶ô Meta', models: [] },
                        'ai21-labs': { label: 'üöÄ AI21 Labs', models: [] },
                        'cohere': { label: 'üí¨ Cohere', models: [] },
                        'mistral-ai': { label: 'üåä Mistral AI', models: [] },
                        'deepseek': { label: 'üî¨ DeepSeek', models: [] },
                        'xai': { label: 'ü§ñ xAI', models: [] },
                        'core42': { label: 'üèõÔ∏è Core42', models: [] }
                    };
                    
                    // –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –º–æ–¥–µ–ª—ñ –ø–æ –≥—Ä—É–ø–∞—Ö
                    models.forEach(model => {
                        const provider = model.owned_by;
                        if (modelGroups[provider]) {
                            modelGroups[provider].models.push(model);
                        } else {
                            // –Ø–∫—â–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–≤—ñ–¥–æ–º–∏–π, –¥–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≥—Ä—É–ø–∏
                            if (!modelGroups.other) {
                                modelGroups.other = { label: 'üîß –Ü–Ω—à—ñ', models: [] };
                            }
                            modelGroups.other.models.push(model);
                        }
                    });
                    
                    // –°—Ç–≤–æ—Ä—é—î–º–æ optgroups —Ç–∞ –æ–ø—Ü—ñ—ó
                    Object.entries(modelGroups).forEach(([provider, group]) => {
                        if (group.models.length === 0) return;
                        
                        const optgroup = document.createElement('optgroup');
                        optgroup.label = `${group.label} (${group.models.length})`;
                        
                        group.models
                            .sort((a, b) => a.id.localeCompare(b.id))
                            .forEach(model => {
                                const option = document.createElement('option');
                                option.value = model.id;
                                option.textContent = this.getModelDisplayName(model.id);
                                optgroup.appendChild(option);
                            });
                        
                        this.modelSelect.appendChild(optgroup);
                    });
                    
                    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–æ–¥–µ–ª—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                    if (models.length > 0) {
                        const defaultModel = models.find(m => m.id === 'openai/gpt-4o-mini') || models[0];
                        this.modelSelect.value = defaultModel.id;
                        this.updateModelInfo();
                    }
                    
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    this.addMessage('assistant', `‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π! –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –∑—ñ —Å–ø–∏—Å–∫—É –≤–≥–æ—Ä—ñ.`);
                    
                } catch (error) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π:', error);
                    this.modelSelect.innerHTML = '<option value="openai/gpt-4o-mini">OpenAI GPT-4o Mini (—Ä–µ–∑–µ—Ä–≤–Ω–∞)</option>';
                    this.addMessage('system', '‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É –º–æ–¥–µ–ª—å.');
                }
            }
            
            getModelDisplayName(modelId) {
                // –°—Ç–≤–æ—Ä—é—î–º–æ –∑—Ä–æ–∑—É–º—ñ–ª—ñ –Ω–∞–∑–≤–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π
                const nameMap = {
                    'openai/gpt-4o-mini': 'GPT-4o Mini',
                    'openai/gpt-4o': 'GPT-4o',
                    'openai/gpt-4.1': 'GPT-4.1',
                    'openai/gpt-4.1-mini': 'GPT-4.1 Mini',
                    'openai/gpt-4.1-nano': 'GPT-4.1 Nano',
                    'openai/gpt-5': 'GPT-5',
                    'openai/gpt-5-chat': 'GPT-5 Chat',
                    'openai/gpt-5-mini': 'GPT-5 Mini',
                    'openai/gpt-5-nano': 'GPT-5 Nano',
                    'openai/o1': 'O1 Reasoning',
                    'openai/o1-mini': 'O1 Mini',
                    'openai/o1-preview': 'O1 Preview',
                    'openai/o3': 'O3 Reasoning',
                    'openai/o3-mini': 'O3 Mini',
                    'openai/o4-mini': 'O4 Mini',
                    'xai/grok-3': 'Grok-3',
                    'xai/grok-3-mini': 'Grok-3 Mini',
                    'deepseek/deepseek-r1': 'DeepSeek R1',
                    'deepseek/deepseek-r1-0528': 'DeepSeek R1 (May)',
                    'deepseek/deepseek-v3-0324': 'DeepSeek v3',
                    'microsoft/phi-4': 'Phi-4',
                    'microsoft/phi-4-mini-instruct': 'Phi-4 Mini',
                    'microsoft/phi-4-mini-reasoning': 'Phi-4 Mini Reasoning',
                    'microsoft/phi-4-multimodal-instruct': 'Phi-4 Multimodal',
                    'microsoft/phi-4-reasoning': 'Phi-4 Reasoning'
                };
                
                return nameMap[modelId] || modelId.replace(/^[^\/]+\//, '').replace(/-/g, ' ');
            }
            
            // üåä Streaming Animation Functions
            addStreamingIndicator(contentEl) {
                const indicator = document.createElement('span');
                indicator.className = 'streaming-indicator';
                indicator.innerHTML = `
                    <span style="opacity: 0.7;">–ì–µ–Ω–µ—Ä—É—é</span>
                    <div class="streaming-dots">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                `;
                contentEl.appendChild(indicator);
            }
            
            removeStreamingIndicator(contentEl) {
                const indicator = contentEl.querySelector('.streaming-indicator');
                if (indicator) {
                    indicator.remove();
                }
            }
            
            setLoading(loading) {
                this.isLoading = loading;
                this.sendBtn.disabled = loading;
                this.sendBtn.textContent = loading ? '‚è≥' : 'üì§';
                
                if (loading) {
                    const loadingEl = document.createElement('div');
                    loadingEl.className = 'loading';
                    loadingEl.textContent = '‚è≥ –î—É–º–∞—é...';
                    loadingEl.id = 'loading';
                    this.chat.appendChild(loadingEl);
                } else {
                    const loadingEl = document.getElementById('loading');
                    if (loadingEl) loadingEl.remove();
                }
                
                this.chat.scrollTop = this.chat.scrollHeight;
            }
        }
        
        // Initialize app when DOM is ready
        document.addEventListener('DOMContentLoaded', () => {
            console.log('üöÄ –ü—Ä–æ—Å—Ç–∏–π —á–∞—Ç –∑–∞–ø—É—â–µ–Ω–∏–π');
            new SimpleChat();
        });
    </script>
</body>
</html>
