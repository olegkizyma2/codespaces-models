<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –õ—ñ–º—ñ—Ç—ñ–≤ –ú–æ–¥–µ–ª–µ–π</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(90deg, #4f46e5, #7c3aed);
            color: white;
            padding: 30px 40px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .tabs {
            display: flex;
            background: #f8fafc;
            border-bottom: 2px solid #e2e8f0;
        }
        
        .tab {
            flex: 1;
            background: none;
            border: none;
            padding: 20px;
            font-size: 1.1em;
            cursor: pointer;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
        }
        
        .tab:hover {
            background: #e2e8f0;
        }
        
        .tab.active {
            background: white;
            border-bottom-color: #4f46e5;
            font-weight: bold;
            color: #4f46e5;
        }
        
        .content {
            padding: 40px;
            min-height: 600px;
        }
        
        .recommendation-form {
            background: #f8fafc;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            border: 2px solid #e2e8f0;
        }
        
        .form-row {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .form-group {
            flex: 1;
            min-width: 200px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #374151;
        }
        
        select, input, button {
            width: 100%;
            padding: 12px;
            border: 2px solid #d1d5db;
            border-radius: 8px;
            font-size: 1em;
            transition: border-color 0.3s ease;
        }
        
        select:focus, input:focus {
            outline: none;
            border-color: #4f46e5;
        }
        
        .btn {
            background: linear-gradient(90deg, #4f46e5, #7c3aed);
            color: white;
            border: none;
            cursor: pointer;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: transform 0.2s ease;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(79, 70, 229, 0.3);
        }
        
        .recommendations {
            margin-top: 30px;
        }
        
        .model-card {
            background: white;
            border: 2px solid #e2e8f0;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            transition: transform 0.3s ease;
        }
        
        .model-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.15);
        }
        
        .model-name {
            font-size: 1.4em;
            font-weight: bold;
            color: #1f2937;
            margin-bottom: 10px;
        }
        
        .model-score {
            background: linear-gradient(90deg, #10b981, #059669);
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            display: inline-block;
            font-weight: bold;
            margin-bottom: 15px;
        }
        
        .model-specs {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }
        
        .spec {
            text-align: center;
            background: #f8fafc;
            padding: 15px;
            border-radius: 10px;
            border: 1px solid #e2e8f0;
        }
        
        .spec-value {
            font-size: 1.2em;
            font-weight: bold;
            color: #4f46e5;
        }
        
        .spec-label {
            font-size: 0.9em;
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .context-checker {
            background: #f0f9ff;
            border: 2px solid #0ea5e9;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
        }
        
        .context-result {
            margin-top: 20px;
            padding: 20px;
            border-radius: 10px;
            font-family: 'Monaco', 'Menlo', monospace;
        }
        
        .context-ok {
            background: #dcfce7;
            border: 2px solid #16a34a;
            color: #166534;
        }
        
        .context-warning {
            background: #fef3c7;
            border: 2px solid #d97706;
            color: #92400e;
        }
        
        .context-error {
            background: #fee2e2;
            border: 2px solid #dc2626;
            color: #991b1b;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            border: 2px solid #e2e8f0;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }
        
        .stat-title {
            font-size: 1.3em;
            font-weight: bold;
            margin-bottom: 15px;
            color: #1f2937;
        }
        
        .stat-value {
            font-size: 2em;
            font-weight: bold;
            color: #4f46e5;
            margin-bottom: 5px;
        }
        
        .stat-label {
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 0.9em;
        }
        
        .loading {
            text-align: center;
            padding: 50px;
            color: #6b7280;
            font-size: 1.2em;
        }
        
        .loading::after {
            content: "‚è≥";
            animation: spin 2s linear infinite;
            display: inline-block;
            margin-left: 10px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .error {
            background: #fee2e2;
            color: #dc2626;
            padding: 20px;
            border-radius: 10px;
            border: 2px solid #dc2626;
            margin: 20px 0;
        }
        
        .model-tasks {
            margin-top: 15px;
        }
        
        .task-tag {
            background: #e0e7ff;
            color: #3730a3;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.8em;
            margin: 2px;
            display: inline-block;
        }
        
        .performance-meter {
            background: #f3f4f6;
            height: 10px;
            border-radius: 5px;
            overflow: hidden;
            margin: 10px 0;
        }
        
        .performance-bar {
            height: 100%;
            background: linear-gradient(90deg, #dc2626, #f59e0b, #10b981);
            transition: width 0.5s ease;
        }
        
        @media (max-width: 768px) {
            .form-row {
                flex-direction: column;
            }
            
            .tabs {
                flex-direction: column;
            }
            
            .content {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –õ—ñ–º—ñ—Ç—ñ–≤ –ú–æ–¥–µ–ª–µ–π</h1>
            <p>–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</p>
        </div>
        
        <div class="tabs">
            <button class="tab active" onclick="switchTab('recommendations')">üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</button>
            <button class="tab" onclick="switchTab('context')">üìñ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É</button>
            <button class="tab" onclick="switchTab('stats')">üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>
        </div>
        
        <div class="content">
            <!-- Recommendations Tab -->
            <div id="recommendations" class="tab-content active">
                <div class="recommendation-form">
                    <h2>üîç –ó–Ω–∞–π—Ç–∏ –ù–∞–π–∫—Ä–∞—â—É –ú–æ–¥–µ–ª—å</h2>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="speed">–®–≤–∏–¥–∫—ñ—Å—Ç—å</label>
                            <select id="speed">
                                <option value="medium">–°–µ—Ä–µ–¥–Ω—è</option>
                                <option value="high">–í–∏—Å–æ–∫–∞</option>
                                <option value="low">–ù–∏–∑—å–∫–∞</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="quality">–Ø–∫—ñ—Å—Ç—å</label>
                            <select id="quality">
                                <option value="medium">–°–µ—Ä–µ–¥–Ω—è</option>
                                <option value="high">–í–∏—Å–æ–∫–∞</option>
                                <option value="low">–ù–∏–∑—å–∫–∞</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="contextSize">–†–æ–∑–º—ñ—Ä –ö–æ–Ω—Ç–µ–∫—Å—Ç—É</label>
                            <select id="contextSize">
                                <option value="medium">–°–µ—Ä–µ–¥–Ω—ñ–π</option>
                                <option value="large">–í–µ–ª–∏–∫–∏–π</option>
                                <option value="small">–ú–∞–ª–∏–π</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="cost">–í–∞—Ä—Ç—ñ—Å—Ç—å</label>
                            <select id="cost">
                                <option value="medium">–°–µ—Ä–µ–¥–Ω—è</option>
                                <option value="low">–ù–∏–∑—å–∫–∞</option>
                                <option value="high">–í–∏—Å–æ–∫–∞</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="task">–¢–∏–ø –ó–∞–≤–¥–∞–Ω–Ω—è</label>
                            <select id="task">
                                <option value="general">–ó–∞–≥–∞–ª—å–Ω–µ</option>
                                <option value="quick">–®–≤–∏–¥–∫–µ</option>
                                <option value="complex">–°–∫–ª–∞–¥–Ω–µ</option>
                                <option value="long-context">–î–æ–≤–≥–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç</option>
                                <option value="vision">–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è</option>
                                <option value="budget">–ï–∫–æ–Ω–æ–º–Ω–µ</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <button class="btn" onclick="getRecommendations()">
                                üîç –ó–Ω–∞–π—Ç–∏ –ú–æ–¥–µ–ª—å
                            </button>
                        </div>
                    </div>
                </div>
                
                <div id="recommendationResults" class="recommendations"></div>
            </div>
            
            <!-- Context Checker Tab -->
            <div id="context" class="tab-content">
                <div class="context-checker">
                    <h2>üìñ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –õ—ñ–º—ñ—Ç—ñ–≤ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É</h2>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="contextModel">–ú–æ–¥–µ–ª—å</label>
                            <select id="contextModel">
                                <option value="gpt-4o">GPT-4o (128K)</option>
                                <option value="gpt-4o-mini">GPT-4o Mini (128K)</option>
                                <option value="Phi-3-mini-4k-instruct">Phi-3 Mini (4K)</option>
                                <option value="Phi-3-small-128k-instruct">Phi-3 Small (128K)</option>
                                <option value="AI21-Jamba-1.5-Large">AI21 Jamba (256K)</option>
                                <option value="Meta-Llama-3.1-405B-Instruct">Llama 405B (128K)</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="contextText">–¢–µ–∫—Å—Ç –¥–ª—è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏</label>
                        <textarea id="contextText" rows="8" placeholder="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª—ñ–º—ñ—Ç—ñ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É..." style="resize: vertical; height: 150px;"></textarea>
                    </div>
                    
                    <button class="btn" onclick="checkContext()">
                        ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ö–æ–Ω—Ç–µ–∫—Å—Ç
                    </button>
                    
                    <div id="contextResult"></div>
                </div>
            </div>
            
            <!-- Stats Tab -->
            <div id="stats" class="tab-content">
                <div class="stats-section">
                    <h2>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</h2>
                    <button class="btn" onclick="loadStats()" style="margin-bottom: 20px;">
                        üîÑ –û–Ω–æ–≤–∏—Ç–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    </button>
                    
                    <div id="statsResults"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        function switchTab(tabName) {
            // Remove active class from all tabs and content
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
                content.style.display = 'none';
            });
            
            // Add active class to clicked tab and show content
            event.target.classList.add('active');
            const content = document.getElementById(tabName);
            content.classList.add('active');
            content.style.display = 'block';
        }

        async function getRecommendations() {
            const requirements = {
                speed: document.getElementById('speed').value,
                quality: document.getElementById('quality').value,
                contextSize: document.getElementById('contextSize').value,
                cost: document.getElementById('cost').value,
                task: document.getElementById('task').value
            };

            const resultsDiv = document.getElementById('recommendationResults');
            resultsDiv.innerHTML = '<div class="loading">–ü–æ—à—É–∫ –Ω–∞–π–∫—Ä–∞—â–∏—Ö –º–æ–¥–µ–ª–µ–π...</div>';

            try {
                const response = await fetch('/v1/recommend-model', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requirements)
                });

                if (!response.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                
                const data = await response.json();
                displayRecommendations(data.recommendations);
                
            } catch (error) {
                resultsDiv.innerHTML = `<div class="error">‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}</div>`;
            }
        }

        function displayRecommendations(recommendations) {
            const resultsDiv = document.getElementById('recommendationResults');
            
            if (!recommendations || recommendations.length === 0) {
                resultsDiv.innerHTML = '<div class="error">‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</div>';
                return;
            }

            let html = '<h2>üèÜ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –ú–æ–¥–µ–ª—ñ</h2>';
            
            recommendations.forEach((model, index) => {
                const rank = ['ü•á', 'ü•à', 'ü•â'][index] || `${index + 1}.`;
                const scorePercent = Math.min(100, (model.score / 20) * 100);
                
                html += `
                    <div class="model-card">
                        <div class="model-name">${rank} ${model.name}</div>
                        <div class="model-score">–†–µ–π—Ç–∏–Ω–≥: ${model.score}/20</div>
                        
                        <div class="performance-meter">
                            <div class="performance-bar" style="width: ${scorePercent}%"></div>
                        </div>
                        
                        <div class="model-specs">
                            <div class="spec">
                                <div class="spec-value">${model.speed}/5</div>
                                <div class="spec-label">–®–≤–∏–¥–∫—ñ—Å—Ç—å</div>
                            </div>
                            <div class="spec">
                                <div class="spec-value">${model.quality}/5</div>
                                <div class="spec-label">–Ø–∫—ñ—Å—Ç—å</div>
                            </div>
                            <div class="spec">
                                <div class="spec-value">${model.context}/5</div>
                                <div class="spec-label">–ö–æ–Ω—Ç–µ–∫—Å—Ç</div>
                            </div>
                            <div class="spec">
                                <div class="spec-value">${model.cost}/5</div>
                                <div class="spec-label">–ï–∫–æ–Ω–æ–º–Ω—ñ—Å—Ç—å</div>
                            </div>
                        </div>
                        
                        <div class="model-tasks">
                            <strong>–ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è:</strong>
                            ${model.tasks.map(task => `<span class="task-tag">${getTaskName(task)}</span>`).join('')}
                        </div>
                    </div>
                `;
            });
            
            resultsDiv.innerHTML = html;
        }

        function getTaskName(task) {
            const taskNames = {
                'general': '–ó–∞–≥–∞–ª—å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è',
                'quick': '–®–≤–∏–¥–∫—ñ –∑–∞–ø–∏—Ç–∏',
                'complex': '–°–∫–ª–∞–¥–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è',
                'simple': '–ü—Ä–æ—Å—Ç—ñ –∑–∞–≤–¥–∞–Ω–Ω—è',
                'long-context': '–î–æ–≤–≥—ñ —Ç–µ–∫—Å—Ç–∏',
                'documents': '–î–æ–∫—É–º–µ–Ω—Ç–∏',
                'analysis': '–ê–Ω–∞–ª—ñ–∑',
                'vision': '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è',
                'budget': '–ï–∫–æ–Ω–æ–º–Ω—ñ',
                'research': '–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è'
            };
            return taskNames[task] || task;
        }

        async function checkContext() {
            const model = document.getElementById('contextModel').value;
            const text = document.getElementById('contextText').value;
            
            if (!text.trim()) {
                alert('–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏');
                return;
            }

            const resultDiv = document.getElementById('contextResult');
            resultDiv.innerHTML = '<div class="loading">–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—ñ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...</div>';

            try {
                const response = await fetch('/v1/check-context', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ model, text })
                });

                if (!response.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                
                const data = await response.json();
                displayContextResult(data);
                
            } catch (error) {
                resultDiv.innerHTML = `<div class="error">‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}</div>`;
            }
        }

        function displayContextResult(result) {
            const resultDiv = document.getElementById('contextResult');
            const { estimatedTokens, limit, fits, usage } = result;
            
            let className = 'context-ok';
            let icon = '‚úÖ';
            let message = '–¢–µ–∫—Å—Ç –≤–º—ñ—â—É—î—Ç—å—Å—è –≤ –ª—ñ–º—ñ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É';
            
            if (usage > 80) {
                className = 'context-warning';
                icon = '‚ö†Ô∏è';
                message = '–ë–ª–∏–∑—å–∫–æ –¥–æ –ª—ñ–º—ñ—Ç—É - —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ —Ç–µ–∫—Å—Ç';
            }
            
            if (!fits) {
                className = 'context-error';
                icon = '‚ùå';
                message = '–¢–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–∏—â—É—î –ª—ñ–º—ñ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É';
            }

            resultDiv.innerHTML = `
                <div class="context-result ${className}">
                    <h3>${icon} ${message}</h3>
                    <p><strong>–ü—Ä–∏–±–ª–∏–∑–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤:</strong> ${estimatedTokens.toLocaleString()}</p>
                    <p><strong>–õ—ñ–º—ñ—Ç –º–æ–¥–µ–ª—ñ:</strong> ${limit.toLocaleString()}</p>
                    <p><strong>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ:</strong> ${usage}%</p>
                    ${!fits ? '<p><strong>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</strong> –†–æ–∑–±–∏–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –∑ –±—ñ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º</p>' : ''}
                </div>
            `;
        }

        async function loadStats() {
            const resultsDiv = document.getElementById('statsResults');
            resultsDiv.innerHTML = '<div class="loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>';

            try {
                const response = await fetch('/v1/stats');
                if (!response.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                
                const data = await response.json();
                displayStats(data);
                
            } catch (error) {
                resultsDiv.innerHTML = `<div class="error">‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}</div>`;
            }
        }

        function displayStats(data) {
            const resultsDiv = document.getElementById('statsResults');
            const { usage, report } = data;
            
            let html = '<div class="stats-grid">';
            
            // Summary stats
            if (report.summary) {
                html += `
                    <div class="stat-card">
                        <div class="stat-title">üìä –ó–∞–≥–∞–ª—å–Ω–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
                        <div class="stat-value">${report.summary.totalModels}</div>
                        <div class="stat-label">–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ –º–æ–¥–µ–ª—ñ</div>
                        <hr style="margin: 15px 0;">
                        <div>üì® –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—ñ–≤: <strong>${report.summary.totalRequests}</strong></div>
                        <div>‚ùå –ü–æ–º–∏–ª–æ–∫: <strong>${report.summary.totalErrors}</strong></div>
                    </div>
                `;
            }
            
            html += '</div>';
            
            // Model stats
            if (Object.keys(usage).length > 0) {
                html += '<h3>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ú–æ–¥–µ–ª—è—Ö</h3>';
                
                Object.entries(usage).forEach(([model, stats]) => {
                    const efficiency = stats.efficiency || 0;
                    const efficiencyColor = efficiency > 80 ? '#10b981' : efficiency > 60 ? '#f59e0b' : '#dc2626';
                    
                    html += `
                        <div class="model-card">
                            <div class="model-name">${model}</div>
                            
                            <div class="model-specs">
                                <div class="spec">
                                    <div class="spec-value">${stats.totalRequests}</div>
                                    <div class="spec-label">–ó–∞–ø–∏—Ç—ñ–≤</div>
                                </div>
                                <div class="spec">
                                    <div class="spec-value">${Math.round(stats.avgResponseTime)}ms</div>
                                    <div class="spec-label">–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å</div>
                                </div>
                                <div class="spec">
                                    <div class="spec-value">${stats.tokensPerSecond}</div>
                                    <div class="spec-label">–¢–æ–∫–µ–Ω—ñ–≤/—Å–µ–∫</div>
                                </div>
                                <div class="spec">
                                    <div class="spec-value" style="color: ${efficiencyColor}">${efficiency}%</div>
                                    <div class="spec-label">–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</div>
                                </div>
                            </div>
                            
                            <div style="margin-top: 15px;">
                                <div>üìä –°–µ—Ä–µ–¥–Ω—å–æ —Ç–æ–∫–µ–Ω—ñ–≤: <strong>${Math.round(stats.avgTokensPerRequest)}</strong></div>
                                <div>‚ùå –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–º–∏–ª–æ–∫: <strong>${stats.errorRate}</strong></div>
                            </div>
                        </div>
                    `;
                });
            } else {
                html += '<div class="stat-card"><div class="stat-title">‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω—è</div><div>–ü–æ–∫–∏ —â–æ –Ω–µ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–æ –º–æ–¥–µ–ª–µ–π</div></div>';
            }
            
            // Recommendations
            if (report.recommendations && report.recommendations.length > 0) {
                html += '<h3>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</h3>';
                report.recommendations.forEach(rec => {
                    const iconMap = {
                        'PERFORMANCE': 'üöÄ',
                        'RATE_LIMIT': '‚è±Ô∏è',
                        'EFFICIENCY': 'üìà'
                    };
                    
                    html += `
                        <div class="stat-card">
                            <div class="stat-title">${iconMap[rec.type] || 'üí°'} ${rec.type}</div>
                            <div>${rec.message}</div>
                        </div>
                    `;
                });
            }
            
            resultsDiv.innerHTML = html;
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', () => {
            // Show only the active tab content
            document.querySelectorAll('.tab-content').forEach((content, index) => {
                content.style.display = index === 0 ? 'block' : 'none';
            });
        });
    </script>
</body>
</html>
