#!/usr/bin/env node

/**
 * –†–æ–∑—à–∏—Ä–µ–Ω—ñ —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –ø—ñ–¥ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
 * –°–∏–º—É–ª—é—î —Ä–µ–∞–ª—å–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è API
 */

import fetch from 'node-fetch';
import { performance } from 'perf_hooks';

const BASE_URL = process.env.BASE_URL || 'http://localhost:3010';
const TEST_MODEL = process.env.TEST_MODEL || 'openai/gpt-4o-mini';

class StressTester {
  constructor() {
    this.activeRequests = new Set();
    this.completedRequests = [];
    this.errors = [];
    this.startTime = null;
  }

  async makeTimedRequest(endpoint, body, id, timeout = 30000) {
    const requestStart = performance.now();
    const requestInfo = {
      id,
      endpoint,
      startTime: requestStart,
      endTime: null,
      duration: null,
      status: null,
      success: false,
      error: null,
      timeout: false
    };

    this.activeRequests.add(requestInfo);

    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort();
        requestInfo.timeout = true;
      }, timeout);

      const response = await fetch(`${BASE_URL}${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer dummy-key'
        },
        body: JSON.stringify(body),
        signal: controller.signal
      });

      clearTimeout(timeoutId);
      
      const endTime = performance.now();
      requestInfo.endTime = endTime;
      requestInfo.duration = endTime - requestStart;
      requestInfo.status = response.status;
      requestInfo.success = response.ok;

      if (!response.ok) {
        const errorText = await response.text();
        requestInfo.error = `HTTP ${response.status}: ${errorText}`;
      }

    } catch (error) {
      const endTime = performance.now();
      requestInfo.endTime = endTime;
      requestInfo.duration = endTime - requestStart;
      
      if (error.name === 'AbortError' || requestInfo.timeout) {
        requestInfo.error = `Timeout after ${timeout}ms`;
        requestInfo.timeout = true;
      } else {
        requestInfo.error = error.message;
      }
    }

    this.activeRequests.delete(requestInfo);
    this.completedRequests.push(requestInfo);
    
    if (!requestInfo.success) {
      this.errors.push(requestInfo);
    }

    return requestInfo;
  }

  async burstTest(requestCount = 20, burstDelay = 100) {
    console.log(`\\nüí• BURST TEST: ${requestCount} –∑–∞–ø–∏—Ç—ñ–≤ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${burstDelay}ms`);
    console.log('='.repeat(60));

    const promises = [];
    this.startTime = performance.now();

    for (let i = 1; i <= requestCount; i++) {
      const promise = this.makeTimedRequest('/v1/simple-chat', {
        model: TEST_MODEL,
        message: `Burst –∑–∞–ø–∏—Ç #${i} - –¥–∞–π –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å`
      }, `BURST-${i}`);
      
      promises.push(promise);
      
      // –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
      if (i < requestCount) {
        await new Promise(resolve => setTimeout(resolve, burstDelay));
      }
    }

    console.log(`üì° –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ${requestCount} –∑–∞–ø–∏—Ç—ñ–≤. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è...`);
    await Promise.allSettled(promises);

    return this.analyzeResults('Burst Test');
  }

  async sustainedLoadTest(duration = 30000, requestInterval = 2000) {
    console.log(`\\n‚ö° SUSTAINED LOAD TEST: ${duration/1000}s –∑ –∑–∞–ø–∏—Ç–æ–º –∫–æ–∂–Ω—ñ ${requestInterval}ms`);
    console.log('='.repeat(60));

    this.startTime = performance.now();
    const endTime = this.startTime + duration;
    let requestCounter = 1;

    const promises = [];

    while (performance.now() < endTime) {
      const promise = this.makeTimedRequest('/v1/simple-chat', {
        model: TEST_MODEL,
        message: `Sustained –∑–∞–ø–∏—Ç #${requestCounter}`
      }, `SUSTAINED-${requestCounter}`);
      
      promises.push(promise);
      requestCounter++;
      
      console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏: ${this.activeRequests.size}, –ó–∞–≤–µ—Ä—à–µ–Ω—ñ: ${this.completedRequests.length}`);
      
      await new Promise(resolve => setTimeout(resolve, requestInterval));
    }

    console.log(`üïí –ß–∞—Å –≤–∏–π—à–æ–≤. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è ${this.activeRequests.size} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤...`);
    await Promise.allSettled(promises);

    return this.analyzeResults('Sustained Load Test');
  }

  async rampUpTest(maxConcurrency = 15, rampSteps = 5) {
    console.log(`\\nüìà RAMP-UP TEST: –ø–æ—Å—Ç—É–ø–æ–≤–æ –¥–æ ${maxConcurrency} –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤`);
    console.log('='.repeat(60));

    const stepSize = Math.ceil(maxConcurrency / rampSteps);
    this.startTime = performance.now();

    for (let step = 1; step <= rampSteps; step++) {
      const concurrency = Math.min(step * stepSize, maxConcurrency);
      console.log(`\\nüöÄ –ö—Ä–æ–∫ ${step}: ${concurrency} –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤`);

      const promises = [];
      for (let i = 1; i <= concurrency; i++) {
        promises.push(
          this.makeTimedRequest('/v1/simple-chat', {
            model: TEST_MODEL,
            message: `Ramp-up –∑–∞–ø–∏—Ç, –∫—Ä–æ–∫ ${step}, –∑–∞–ø–∏—Ç ${i}`
          }, `RAMP-${step}-${i}`)
        );
      }

      await Promise.allSettled(promises);
      
      // –ü–∞—É–∑–∞ –º—ñ–∂ –∫—Ä–æ–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
    }

    return this.analyzeResults('Ramp-up Test');
  }

  async errorResilienceTest() {
    console.log(`\\nüõ°Ô∏è  ERROR RESILIENCE TEST: —Ç–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫`);
    console.log('='.repeat(60));

    this.startTime = performance.now();
    const promises = [];

    // –ù–µ–≤—ñ—Ä–Ω–∞ –º–æ–¥–µ–ª—å
    promises.push(
      this.makeTimedRequest('/v1/simple-chat', {
        model: 'nonexistent-model',
        message: '–¶–µ –º–∞—î –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É'
      }, 'ERROR-BAD-MODEL')
    );

    // –ù–µ–≤—ñ—Ä–Ω–∏–π endpoint
    promises.push(
      fetch(`${BASE_URL}/v1/nonexistent-endpoint`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({})
      }).then(async (res) => ({
        id: 'ERROR-BAD-ENDPOINT',
        success: false,
        status: res.status,
        error: await res.text()
      })).catch(error => ({
        id: 'ERROR-BAD-ENDPOINT',
        success: false,
        error: error.message
      }))
    );

    // –í–µ–ª–∏–∫–∏–π –∑–∞–ø–∏—Ç (–º–æ–∂–ª–∏–≤–µ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É)
    const hugeMessage = '–î—É–∂–µ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç. '.repeat(1000);
    promises.push(
      this.makeTimedRequest('/v1/simple-chat', {
        model: TEST_MODEL,
        message: hugeMessage
      }, 'ERROR-HUGE-REQUEST')
    );

    // –í–∞–ª—ñ–¥–Ω—ñ –∑–∞–ø–∏—Ç–∏ —Ä–∞–∑–æ–º –∑ –ø–æ–º–∏–ª–∫–æ–≤–∏–º–∏
    for (let i = 1; i <= 5; i++) {
      promises.push(
        this.makeTimedRequest('/v1/simple-chat', {
          model: TEST_MODEL,
          message: `–í–∞–ª—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Ç #${i} —Å–µ—Ä–µ–¥ –ø–æ–º–∏–ª–∫–æ–≤–∏—Ö`
        }, `VALID-${i}`)
      );
    }

    await Promise.allSettled(promises);
    return this.analyzeResults('Error Resilience Test');
  }

  async analyzeResults(testName) {
    const successful = this.completedRequests.filter(r => r.success);
    const failed = this.completedRequests.filter(r => !r.success);
    const timedOut = this.completedRequests.filter(r => r.timeout);

    const results = {
      testName,
      total: this.completedRequests.length,
      successful: successful.length,
      failed: failed.length,
      timedOut: timedOut.length,
      successRate: (successful.length / this.completedRequests.length * 100).toFixed(1),
      metrics: {}
    };

    if (successful.length > 0) {
      const durations = successful.map(r => r.duration);
      results.metrics = {
        avgResponseTime: (durations.reduce((a, b) => a + b) / durations.length).toFixed(2),
        minResponseTime: Math.min(...durations).toFixed(2),
        maxResponseTime: Math.max(...durations).toFixed(2),
        p95ResponseTime: this.percentile(durations, 0.95).toFixed(2),
        p99ResponseTime: this.percentile(durations, 0.99).toFixed(2)
      };
    }

    // –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    console.log(`\\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò: ${testName}`);
    console.log(`   ‚úÖ –£—Å–ø—ñ—à–Ω—ñ: ${successful.length}/${this.completedRequests.length} (${results.successRate}%)`);
    console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∏: ${failed.length}`);
    console.log(`   ‚è∞ Timeout: ${timedOut.length}`);

    if (successful.length > 0) {
      console.log(`   üìà –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: ${results.metrics.avgResponseTime}ms`);
      console.log(`   üìä P95: ${results.metrics.p95ResponseTime}ms`);
      console.log(`   üìä P99: ${results.metrics.p99ResponseTime}ms`);
      console.log(`   ‚ö° –ù–∞–π—à–≤–∏–¥—à–∏–π: ${results.metrics.minResponseTime}ms`);
      console.log(`   üêå –ù–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π: ${results.metrics.maxResponseTime}ms`);
    }

    if (failed.length > 0) {
      console.log(`\\n‚ùå –ü–û–ú–ò–õ–ö–ò (–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä—à—ñ 5):`);
      failed.slice(0, 5).forEach(f => {
        console.log(`   [${f.id}] ${f.error}`);
      });
    }

    // –û—á–∏—â–µ–Ω–Ω—è –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
    this.completedRequests = [];
    this.errors = [];

    return results;
  }

  percentile(arr, p) {
    const sorted = arr.slice().sort((a, b) => a - b);
    const index = (sorted.length - 1) * p;
    const lower = Math.floor(index);
    const upper = Math.ceil(index);
    return lower === upper ? sorted[lower] : sorted[lower] * (upper - index) + sorted[upper] * (index - lower);
  }

  async checkServerHealth() {
    try {
      const response = await fetch(`${BASE_URL}/health`);
      const data = await response.json();
      return response.ok;
    } catch {
      return false;
    }
  }

  async runStressTests() {
    console.log('üî• –ó–ê–ü–£–°–ö –°–¢–†–ï–°-–¢–ï–°–¢–Ü–í –¢–ê –¢–ï–°–¢–Ü–í –ù–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø');
    console.log('='.repeat(80));
    console.log(`üìç –ë–∞–∑–æ–≤–∏–π URL: ${BASE_URL}`);
    console.log(`ü§ñ –¢–µ—Å—Ç–æ–≤–∞ –º–æ–¥–µ–ª—å: ${TEST_MODEL}`);
    console.log('='.repeat(80));

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞...');
    const isHealthy = await this.checkServerHealth();
    if (!isHealthy) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤.');
      return;
    }
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î\\n');

    const allResults = [];

    try {
      // –ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤ –≤—ñ–¥ –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–æ —Å–∫–ª–∞–¥–Ω–æ–≥–æ
      allResults.push(await this.burstTest(10, 200));
      allResults.push(await this.sustainedLoadTest(15000, 1500));  // 15 —Å–µ–∫—É–Ω–¥, –∑–∞–ø–∏—Ç –∫–æ–∂–Ω—ñ 1.5—Å
      allResults.push(await this.rampUpTest(12, 4));
      allResults.push(await this.errorResilienceTest());

      // –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç
      console.log('\\n' + '='.repeat(80));
      console.log('üìã –ü–Ü–î–°–£–ú–ö–û–í–ò–ô –ó–í–Ü–¢ –°–¢–†–ï–°-–¢–ï–°–¢–Ü–í');
      console.log('='.repeat(80));

      allResults.forEach(result => {
        console.log(`üìä ${result.testName}:`);
        console.log(`   –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${result.successRate}% (${result.successful}/${result.total})`);
        if (result.metrics.avgResponseTime) {
          console.log(`   –°–µ—Ä. —á–∞—Å: ${result.metrics.avgResponseTime}ms`);
          console.log(`   P95: ${result.metrics.p95ResponseTime}ms`);
        }
        console.log('');
      });

      // –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Å–Ω–æ–≤–∫–∏
      const totalRequests = allResults.reduce((sum, r) => sum + r.total, 0);
      const totalSuccessful = allResults.reduce((sum, r) => sum + r.successful, 0);
      const overallSuccessRate = ((totalSuccessful / totalRequests) * 100).toFixed(1);

      console.log('üéØ –ó–ê–ì–ê–õ–¨–ù–Ü –í–ò–°–ù–û–í–ö–ò:');
      console.log(`   üìà –ó–∞–≥–∞–ª—å–Ω–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${overallSuccessRate}% (${totalSuccessful}/${totalRequests})`);

      if (overallSuccessRate >= 95) {
        console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤—ñ–¥–º—ñ–Ω–Ω–æ –≤–∏—Ç—Ä–∏–º—É—î –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
        console.log('   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
      } else if (overallSuccessRate >= 85) {
        console.log('   ‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ –≤–∏—Ç—Ä–∏–º—É—î –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
        console.log('   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: —Ä–æ–∑–≥–ª—è–Ω—å—Ç–µ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –ø—ñ–¥ –ø—ñ–∫–æ–≤–∏–º–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º–∏');
      } else {
        console.log('   ‚ùå –°–∏—Å—Ç–µ–º–∞ –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏ –ø—ñ–¥ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º');
        console.log('   üí° –ö—Ä–∏—Ç–∏—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:');
        console.log('      ‚Ä¢ –î–æ–¥–∞–π—Ç–µ rate limiting —Ç–∞ —á–µ—Ä–≥–∏');
        console.log('      ‚Ä¢ –û–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ –æ–±—Ä–æ–±–∫—É –∑–∞–ø–∏—Ç—ñ–≤');
        console.log('      ‚Ä¢ –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è');
      }

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—ñ–≤
if (import.meta.url === `file://${process.argv[1]}`) {
  const tester = new StressTester();
  tester.runStressTests().catch(console.error);
}

export default StressTester;
