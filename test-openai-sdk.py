#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ API —á–µ—Ä–µ–∑ OpenAI Python SDK
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python test-openai-sdk.py [--chat] [--stream] [--full]
"""

from openai import OpenAI
import time
import sys

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ OpenAI –¥–ª—è –≤–∞—à–æ–≥–æ API
client = OpenAI(
    api_key="dummy-key",
    base_url="https://8a42c760f69d.ngrok-free.app/v1"
)

# –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
MODELS = [
    'microsoft/phi-3-mini-4k-instruct',
    'microsoft/phi-3.5-mini-instruct', 
    'openai/gpt-4o-mini',
    'meta/llama-3.3-70b-instruct',
    'mistral-ai/mistral-small-2503'
]

def test_models():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π"""
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ OpenAI Python SDK\n")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        print("üìã –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π...")
        models_response = client.models.list()
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(models_response.data)} –º–æ–¥–µ–ª–µ–π\n")
        
        # –¢–µ—Å—Ç—É—î–º–æ –∫—ñ–ª—å–∫–∞ –º–æ–¥–µ–ª–µ–π
        test_prompt = "–ü—Ä–∏–≤—ñ—Ç! –ö–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
        
        for model in MODELS[:3]:  # –¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä—à—ñ 3 –º–æ–¥–µ–ª—ñ
            print(f"ü§ñ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ: {model}")
            
            try:
                start_time = time.time()
                
                response = client.chat.completions.create(
                    model=model,
                    messages=[
                        {"role": "system", "content": "–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."},
                        {"role": "user", "content": test_prompt}
                    ],
                    temperature=0.7,
                    max_tokens=200
                )
                
                duration = int((time.time() - start_time) * 1000)
                
                print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å ({duration}ms):")
                content = response.choices[0].message.content
                print(f'   "{content[:100]}..."')
                print(f"üìä –¢–æ–∫–µ–Ω–∏: {response.usage.total_tokens} (prompt: {response.usage.prompt_tokens}, completion: {response.usage.completion_tokens})\n")
                
            except Exception as error:
                status = getattr(error, 'status', None) or getattr(getattr(error, 'response', None), 'status', None)
                body = ''
                resp = getattr(error, 'response', None)
                if resp is not None and hasattr(resp, 'data') and resp.data is not None:
                    try:
                        import json as _json
                        body = _json.dumps(resp.data)[:500]
                    except Exception:
                        body = str(resp.data)[:500]
                msg = str(error)
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞{f' ({status})' if status else ''}: {body or msg}\n")
                
    except Exception as error:
        status = getattr(error, 'status', None) or getattr(getattr(error, 'response', None), 'status', None)
        body = ''
        resp = getattr(error, 'response', None)
        if resp is not None and hasattr(resp, 'data') and resp.data is not None:
            try:
                import json as _json
                body = _json.dumps(resp.data)[:500]
            except Exception:
                body = str(resp.data)[:500]
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è{f' ({status})' if status else ''}: {body or error}")

def interactive_chat():
    """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç"""
    print("\nüí¨ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç (–≤–≤–µ–¥—ñ—Ç—å 'exit' –¥–ª—è –≤–∏—Ö–æ–¥—É)\n")
    
    messages = [
        {"role": "system", "content": "–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."}
    ]
    
    model = 'microsoft/phi-3-mini-4k-instruct'  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–±—ñ–ª—å–Ω—É –º–æ–¥–µ–ª—å
    
    while True:
        try:
            user_input = input("üë§ –í–∏: ").strip()
            
            if user_input.lower() == 'exit':
                break
                
            if user_input:
                messages.append({"role": "user", "content": user_input})
                
                try:
                    print("ü§ñ –î—É–º–∞—é...")
                    
                    response = client.chat.completions.create(
                        model=model,
                        messages=messages,
                        temperature=0.7,
                        max_tokens=500
                    )
                    
                    assistant_message = response.choices[0].message.content
                    messages.append({"role": "assistant", "content": assistant_message})
                    
                    print(f"ü§ñ AI: {assistant_message}\n")
                    
                except Exception as error:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {error}\n")
                    
        except KeyboardInterrupt:
            print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break

def test_streaming():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É"""
    print("\nüåä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É...\n")
    
    try:
        response = client.chat.completions.create(
            model='microsoft/phi-3-mini-4k-instruct',
            messages=[
                {"role": "system", "content": "–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."},
                {"role": "user", "content": "–†–æ–∑–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫—É —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ —Ä–æ–±–æ—Ç—ñ–≤ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ."}
            ],
            stream=True,
            temperature=0.7,
            max_tokens=300
        )
        
        print("ü§ñ AI (streaming): ")
        print("   ", end="", flush=True)
        
        for chunk in response:
            if chunk.choices[0].delta.content is not None:
                print(chunk.choices[0].delta.content, end="", flush=True)
        
        print("\n‚úÖ –°—Ç—Ä—ñ–º—ñ–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n")
        
    except Exception as error:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É: {error}")

def test_multiple_turns():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–≥–∞—Ç–æ—Ö–æ–¥–æ–≤–æ—ó —Ä–æ–∑–º–æ–≤–∏"""
    print("\nüîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–≥–∞—Ç–æ—Ö–æ–¥–æ–≤–æ—ó —Ä–æ–∑–º–æ–≤–∏...\n")
    
    try:
        messages = [
            {"role": "system", "content": "–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."},
            {"role": "user", "content": "–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?"},
            {"role": "assistant", "content": "–Ø AI –∞—Å–∏—Å—Ç–µ–Ω—Ç, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –≤–∞–º."},
            {"role": "user", "content": "–ê —â–æ —Ç–∏ –º–æ–∂–µ—à —Ä–æ–±–∏—Ç–∏?"}
        ]
        
        response = client.chat.completions.create(
            model='microsoft/phi-3-mini-4k-instruct',
            messages=messages,
            temperature=0.7,
            max_tokens=300
        )
        
        print("ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –±–∞–≥–∞—Ç–æ—Ö–æ–¥–æ–≤—É —Ä–æ–∑–º–æ–≤—É:")
        print(f"   {response.choices[0].message.content}")
        print(f"üìä –¢–æ–∫–µ–Ω–∏: {response.usage.total_tokens}\n")
        
    except Exception as error:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {error}")

def test_tts():
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ TTS API"""
    print("üîä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è TTS API...\n")
    
    tts_url = "https://8a42c760f69d.ngrok-free.app/tts?text=–ü—Ä–∏–≤—ñ—Ç%20–≤—ñ–¥%20–≤–∞—à–æ–≥–æ%20AI%20–∞—Å–∏—Å—Ç–µ–Ω—Ç–∞!"
    print(f"üåê TTS URL: {tts_url}")
    print("üí° –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –±—Ä–∞—É–∑–µ—Ä—ñ, —â–æ–± –ø—Ä–æ—Å–ª—É—Ö–∞—Ç–∏ –∞—É–¥—ñ–æ\n")

def show_usage():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    print("üí° –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó:")
    print("   --chat, -c     : –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç")
    print("   --stream, -s   : –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É")
    print("   --tts, -t      : –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è TTS")
    print("   --full, -f     : –ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç —É—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π")
    print("   --help, -h     : –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    args = sys.argv[1:]
    
    if '--help' in args or '-h' in args:
        show_usage()
        return
    
    if '--chat' in args or '-c' in args:
        interactive_chat()
    elif '--stream' in args or '-s' in args:
        test_streaming()
    elif '--tts' in args or '-t' in args:
        test_tts()
    elif '--full' in args or '-f' in args:
        test_models()
        test_streaming()
        test_multiple_turns()
        test_tts()
        interactive_chat()
    else:
        # –ë–∞–∑–æ–≤–∏–π —Ç–µ—Å—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        test_models()
        test_multiple_turns()
        show_usage()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
