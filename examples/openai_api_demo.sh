#!/usr/bin/env bash
# Demo script showing OpenAI API compatibility
# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ–≤–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ OpenAI API

echo "üöÄ AI Chat OpenAI API Compatibility Demo"
echo "========================================"

SERVER="http://127.0.0.1:3010"
AUTH_HEADER="Authorization: Bearer fake-key"

echo ""
echo "üîå –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º..."
if ! curl -s "$SERVER/health" > /dev/null; then
    echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: aichat"
    exit 1
fi
echo "‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î"

echo ""
echo "üìã 1. –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π (GET /v1/models):"
echo "curl -H '$AUTH_HEADER' $SERVER/v1/models"
echo ""
curl -s -H "$AUTH_HEADER" "$SERVER/v1/models" | python3 -m json.tool --compact | head -3
echo "... (—Å–∫–æ—Ä–æ—á–µ–Ω–æ)"

echo ""
echo ""
echo "üí¨ 2. –ó–≤–∏—á–∞–π–Ω–∏–π —á–∞—Ç (POST /v1/chat/completions):"
cat << 'EOF'
curl -X POST http://127.0.0.1:3010/v1/chat/completions \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer fake-key" \
  -d '{
    "model": "gpt-4o-mini",
    "messages": [{"role": "user", "content": "–ü—Ä–∏–≤—ñ—Ç!"}],
    "temperature": 0.7
  }'
EOF
echo ""
echo "üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:"
curl -s -X POST "$SERVER/v1/chat/completions" \
  -H "Content-Type: application/json" \
  -H "$AUTH_HEADER" \
  -d '{
    "model": "gpt-4o-mini",
    "messages": [{"role": "user", "content": "–ü—Ä–∏–≤—ñ—Ç! –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ—é."}],
    "temperature": 0.7,
    "max_tokens": 50
  }' | python3 -c "
import json, sys
try:
    data = json.load(sys.stdin)
    message = data['choices'][0]['message']['content']
    print(f'üí≠ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {message}')
    print(f'üìä –ú–æ–¥–µ–ª—å: {data[\"model\"]}')
    print(f'üî¢ –¢–æ–∫–µ–Ω–∏: {data[\"usage\"][\"total_tokens\"]}')
except:
    print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ')
"

echo ""
echo ""
echo "üåä 3. Streaming —á–∞—Ç (stream=true):"
cat << 'EOF'
curl -X POST http://127.0.0.1:3010/v1/chat/completions \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer fake-key" \
  -d '{
    "model": "gpt-4o",
    "messages": [{"role": "user", "content": "–õ—ñ—á–∏ –¥–æ 5"}],
    "stream": true
  }' --no-buffer
EOF
echo ""
echo "üì§ Streaming –≤—ñ–¥–ø–æ–≤—ñ–¥—å:"
curl -s -X POST "$SERVER/v1/chat/completions" \
  -H "Content-Type: application/json" \
  -H "$AUTH_HEADER" \
  -d '{
    "model": "gpt-4o",
    "messages": [{"role": "user", "content": "–õ—ñ—á–∏ –≤—ñ–¥ 1 –¥–æ 3"}],
    "stream": true,
    "max_tokens": 30
  }' --no-buffer | head -10

echo ""
echo ""
echo "ü§ñ 4. –¢–µ—Å—Ç —Ä—ñ–∑–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π:"

models=("gpt-4o-mini" "Phi-3-mini-4k-instruct" "Meta-Llama-3.1-8B-Instruct")

for model in "${models[@]}"; do
    echo ""
    echo "üî¨ –¢–µ—Å—Ç—É—é –º–æ–¥–µ–ª—å: $model"
    curl -s -X POST "$SERVER/v1/chat/completions" \
      -H "Content-Type: application/json" \
      -H "$AUTH_HEADER" \
      -d "{
        \"model\": \"$model\",
        \"messages\": [{\"role\": \"user\", \"content\": \"–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?\"}],
        \"max_tokens\": 30
      }" | python3 -c "
import json, sys
try:
    data = json.load(sys.stdin)
    message = data['choices'][0]['message']['content']
    print(f'   üí≠ {message[:100]}...')
except Exception as e:
    print(f'   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}')
"
done

echo ""
echo ""
echo "‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
echo "üí° –í–∞—à AI Chat —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–Ω—ñ—Å—Ç—é —Å—É–º—ñ—Å–Ω–∏–π –∑ OpenAI API!"
echo "üåê –í–µ–± —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://127.0.0.1:3010"
echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è OpenAI: https://platform.openai.com/docs/api-reference"
echo ""
echo "üöÄ –®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏:"
echo "   aichat         - –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä"
echo "   aichat models  - –ø–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–µ–ª—ñ"  
echo "   aichat test    - —à–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç"
echo "   aichat stop    - –∑—É–ø–∏–Ω–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä"
