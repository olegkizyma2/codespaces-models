#!/usr/bin/env python3
"""
–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI Chat —Å–µ—Ä–≤–µ—Ä–∞ –∑ Python OpenAI SDK
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ–≤–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ OpenAI API
"""

import openai
from openai import OpenAI
import json

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ OpenAI –¥–ª—è –Ω–∞—à–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
client = OpenAI(
    api_key="fake-key",  # –ù–∞—à —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∫–ª—é—á
    base_url="http://127.0.0.1:3010/v1"  # –õ–æ–∫–∞–ª—å–Ω–∏–π AI Chat —Å–µ—Ä–≤–µ—Ä
)

def test_chat_completion():
    """–¢–µ—Å—Ç –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —á–∞—Ç—É"""
    print("ü§ñ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Chat Completion...")
    
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–í–∏ –∫–æ—Ä–∏—Å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."},
            {"role": "user", "content": "–†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ –ø–µ—Ä–µ–≤–∞–≥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ AI —Å–µ—Ä–≤–µ—Ä–∞"}
        ],
        temperature=0.7,
        max_tokens=200
    )
    
    print("üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å:", response.choices[0].message.content)
    print("üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Ç–æ–∫–µ–Ω—ñ–≤:", response.usage.total_tokens)
    print()

def test_streaming():
    """–¢–µ—Å—Ç —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É"""
    print("üåä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Streaming...")
    
    stream = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "user", "content": "–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ñ—Ä—à –ø—Ä–æ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç"}
        ],
        stream=True,
        temperature=0.8
    )
    
    print("üìù –°—Ç—Ä—ñ–º—ñ–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ", end="", flush=True)
    for chunk in stream:
        if chunk.choices[0].delta.content is not None:
            print(chunk.choices[0].delta.content, end="", flush=True)
    print("\n")

def test_multiple_models():
    """–¢–µ—Å—Ç —Ä—ñ–∑–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π"""
    print("üî¨ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π...")
    
    models_to_test = [
        "gpt-4o-mini",
        "Phi-3-mini-4k-instruct", 
        "Meta-Llama-3.1-8B-Instruct",
        "Mistral-Nemo"
    ]
    
    question = "–©–æ —Ç–∞–∫–µ –º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è?"
    
    for model in models_to_test:
        try:
            response = client.chat.completions.create(
                model=model,
                messages=[{"role": "user", "content": question}],
                max_tokens=100,
                temperature=0.3
            )
            
            print(f"ü§ñ {model}:")
            print(f"   {response.choices[0].message.content[:150]}...")
            print()
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ –º–æ–¥–µ–ª–ª—é {model}: {e}")
            print()

def list_available_models():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ"""
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ:")
    
    models = client.models.list()
    
    # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
    providers = {}
    for model in models.data:
        provider = model.owned_by.upper()
        if provider not in providers:
            providers[provider] = []
        providers[provider].append(model.id)
    
    for provider, model_list in providers.items():
        print(f"\nüè¢ {provider}:")
        for model_id in sorted(model_list):
            print(f"   ‚Ä¢ {model_id}")
    
    print(f"\nüìä –í—Å—å–æ–≥–æ –º–æ–¥–µ–ª–µ–π: {len(models.data)}")
    print()

if __name__ == "__main__":
    try:
        print("üöÄ AI Chat Python SDK Demo")
        print("=" * 50)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
        print("üîå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º...")
        list_available_models()
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
        test_chat_completion()
        test_streaming()
        test_multiple_models()
        
        print("‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        print("\nüí° –í–∞—à AI Chat —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–Ω—ñ—Å—Ç—é —Å—É–º—ñ—Å–Ω–∏–π –∑ OpenAI Python SDK!")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        print("\nüí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ AI Chat —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π:")
        print("   aichat status")
        print("   aichat        # –∞–±–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏, —è–∫—â–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π")
